<?xml version="1.0" encoding="UTF-8"?><xml><records><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Templeman, Robert</author><author>Templeman, Robert</author><author>Rahman, Zahid</author><author>Crandall, David J</author><author>Rahman, Zahid</author><author>Kapadia, Apu</author><author>Crandall, David</author><author>Kapadia, Apu</author></authors></contributors><titles><title>PlaceRaider: Virtual Theft in Physical Spaces with Smartphones.</title><secondary-title>Transactions on Information Forensics and Security</secondary-title></titles><periodical><full-title>Transactions on Information Forensics and Security</full-title></periodical><volume>cs.CR</volume><keywords/><dates><year>2012</year></dates><urls><pdf-urls><url>internal-pdf://4c38b1c231063450d165ec6ce58640189c9c.pdf</url></pdf-urls><web-urls><url>http://internetsociety.org/doc/placeraider-virtual-theft-physical-spaces-smartphones%5Cnpapers3://publication/uuid/9D67BC54-C275-4890-8DB8-1F6D645CDC6D</url></web-urls></urls><abstract>As smartphones become more pervasive, they are increasingly targeted bymalware. At the same time, each new generation of smartphone featuresincreasingly powerful onboard sensor suites. A new strain of sensor malware hasbeen developing that leverages these sensors to steal information from thephysical environment (e.g., researchers have recently demonstrated how malwarecan listen for spoken credit card numbers through the microphone, or feelkeystroke vibrations using the accelerometer). Yet the possibilities of whatmalware can see through a camera have been understudied. This paper introducesa novel visual malware called PlaceRaider, which allows remote attackers toengage in remote reconnaissance and what we call virtual theft. Throughcompletely opportunistic use of the camera on the phone and other sensors,PlaceRaider constructs rich, three dimensional models of indoor environments.Remote burglars can thus download the physical space, study the environmentcarefully, and steal virtual objects from the environment (such as financialdocuments, information on computer monitors, and personally identifiableinformation). Through two human subject studies we demonstrate theeffectiveness of using mobile devices as powerful surveillance and virtualtheft platforms, and we suggest several possible defenses against visual malware.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Rasthofer, Siegfried</author><author>Arzt, Steven</author><author>Bodden, Eric</author></authors></contributors><titles><title>A Machine-learning Approach for Classifying and Categorizing Android Sources and Sinks</title><secondary-title>Proceedings 2014 Network and Distributed System Security Symposium</secondary-title></titles><periodical><full-title>Proceedings 2014 Network and Distributed System Security Symposium</full-title></periodical><pages>23-26</pages><issue>February</issue><keywords><keyword>stat</keyword><keyword>static analysi</keyword><keyword>static analysis</keyword></keywords><dates><year>2014</year></dates><isbn>1-891562-35-5</isbn><electronic-resource-num>10.14722/ndss.2014.23039</electronic-resource-num><urls><pdf-urls><url>internal-pdf://d3604393818fe1bca9396e55ea6bd320e49c.pdf</url></pdf-urls><web-urls><url>http://www.internetsociety.org/doc/machine-learning-approach-classifying-and-categorizing-android-sources-and-sinks</url></web-urls></urls><abstract>Today’s smartphone users face a security dilemma: many apps they install operate on privacy-sensitive data, although they might originate from developers whose trustworthiness is hard to judge. Researchers have addressed the problem with more and more sophisticated static and dynamic analysis tools as an aid to assess how apps use private user data. Those tools, however, rely on the manual configuration of lists of sources of sensitive data as well as sinks which might leak data to untrusted observers. Such lists are hard to come by. We thus propose SUSI, a novel machine-learning guided approach for identifying sources and sinks directly from the code of any Android API. Given a training set of hand-annotated sources and sinks, SUSI identifies other sources and sinks in the entire API. To provide more fine-grained information, SUSI further categorizes the sources (e.g., unique identifier, location information, etc.) and sinks (e.g., network, file, etc.). For Android 4.2, SUSI identifies hundreds of sources and sinks with over 92% accuracy, many of which are missed by current information-flow tracking tools. An evaluation of about 11,000 malware samples confirms that many of these sources and sinks are indeed used. We furthermore show that SUSI can reliably classify sources and sinks even in new, previously unseen Android versions and components like Google Glass or the Chromecast API.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Han, Jih</author><author>Yan, Qiang</author><author>Gao, Debin</author><author>Zhou, Jianying</author><author>Deng, Robert H</author></authors></contributors><titles><title>Comparing Mobile Privacy Protection through Cross-Platform Applications</title><secondary-title>Network and Distributed System Security Symposium</secondary-title></titles><periodical><full-title>Network and Distributed System Security Symposium</full-title></periodical><pages>1-15</pages><keywords><keyword>stat</keyword><keyword>static analysi</keyword><keyword>static analysis</keyword></keywords><dates><year>2013</year></dates><urls><pdf-urls><url>internal-pdf://ea44899d9efd12da4cb0f9e46f8c1e032916.pdf</url></pdf-urls><web-urls><url>http://www.liaiqin.com/hanjin/%5Cnpapers3://publication/uuid/EDE08F21-0175-4B99-B31B-86FC339DAFB4</url></web-urls></urls><abstract>With the rapid growth of the mobile market, secu- rity of mobile platforms is receiving increasing attention from both research community as well as the public. In this paper, we make the first attempt to establish a baseline for security comparison between the two most popular mobile platforms. We investigate applications that run on both Android and iOS and examine the difference in the usage of their security sensitive APIs (SS-APIs). Our analysis over 2,600 applications shows that iOS applications consistently access more SS-APIs than their counterparts on Android. The additional privileges gained on iOS are often associated with accessing private resources such as device ID, camera, and users’ contacts. A possible explanation for this difference in SS-API usage is that privileges obtained by an application on the current iOS platform are invisible to end users. Our analysis shows that: 1) third-party libraries (specifically advertising and an- alytic libraries) on iOS invoke more SS-APIs than those on Android; 2) Android application developers avoid requesting unnecessary privileges which will be shown in the permission list during application installation. Considering the fact that an Android application may gain additional privileges with privilege-escalation attacks and iOS provides a more restricted privilege set accessible by third-party applications, our results do not necessarily imply that Android provides better privacy protection than iOS. However, our evidence suggests that Apple’s application vetting process may not be as effective as Android’s privilege notification mechanism, particularly in protecting sensitive resources from third-party applications.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Georgiev, Martin</author><author>Jana, Suman</author><author>Shmatikov, Vitaly</author></authors></contributors><titles><title>Breaking and Fixing Origin-Based Access Control in Hybrid Web/Mobile Application Frameworks.</title><secondary-title>Ndss</secondary-title></titles><periodical><full-title>Ndss</full-title></periodical><pages>1-15</pages><volume>2014</volume><keywords/><dates><year>2014</year></dates><isbn>2122633255</isbn><accession-num>25485311</accession-num><electronic-resource-num>10.1016/j.biotechadv.2011.08.021.Secreted</electronic-resource-num><urls><pdf-urls><url>internal-pdf://e320ed94c4b5eda9d2d023446b3740645226.pdf</url></pdf-urls><web-urls><url>http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=4254737&amp;tool=pmcentrez&amp;rendertype=abstract</url></web-urls></urls><abstract>Hybrid mobile applications (apps) combine the features of Web applications and &quot;native&quot; mobile apps. Like Web applications, they are implemented in portable, platform-independent languages such as HTML and JavaScript. Like native apps, they have direct access to local device resources-file system, location, camera, contacts, etc. Hybrid apps are typically developed using hybrid application frameworks such as PhoneGap. The purpose of the framework is twofold. First, it provides an embedded Web browser (for example, WebView on Android) that executes the app's Web code. Second, it supplies &quot;bridges&quot; that allow Web code to escape the browser and access local resources on the device. We analyze the software stack created by hybrid frameworks and demonstrate that it does not properly compose the access-control policies governing Web code and local code, respectively. Web code is governed by the same origin policy, whereas local code is governed by the access-control policy of the operating system (for example, user-granted permissions in Android). The bridges added by the framework to the browser have the same local access rights as the entire application, but are not correctly protected by the same origin policy. This opens the door to fracking attacks, which allow foreign-origin Web content included into a hybrid app (e.g., ads confined in iframes) to drill through the layers and directly access device resources. Fracking vulnerabilities are generic: they affect all hybrid frameworks, all embedded Web browsers, all bridge mechanisms, and all platforms on which these frameworks are deployed. We study the prevalence of fracking vulnerabilities in free Android apps based on the PhoneGap framework. Each vulnerability exposes sensitive local resources-the ability to read and write contacts list, local files, etc.-to dozens of potentially malicious Web domains. We also analyze the defenses deployed by hybrid frameworks to prevent resource access by foreign-origin Web content and explain why they are ineffectual. We then present NoFrak, a capability-based defense against fracking attacks. NoFrak is platform-independent, compatible with any framework and embedded browser, requires no changes to the code of the existing hybrid apps, and does not break their advertising-supported business model.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Lever, C</author><author>Antonakakis, M</author><author>Reaves, B</author><author>Traynor, P</author><author>Lee, W</author></authors></contributors><titles><title>The Core of the Matter: Analyzing Malicious Traffic in Cellular Carriers.</title><secondary-title>Ndss</secondary-title></titles><periodical><full-title>Ndss</full-title></periodical><keywords/><dates><year>2013</year></dates><urls><pdf-urls><url>internal-pdf://b12ee970fefbc8abad335140564800e6601b.pdf</url></pdf-urls><web-urls><url>http://internetsociety.org/doc/core-matter-analyzing-malicious-traffic-cellular-carriers%5Cnpapers3://publication/uuid/5BCD1CDA-0C53-498B-88B5-82AF6B49E1E3</url></web-urls></urls><abstract>Much of the attention surrounding mobile malware has focused on the in-depth analysis of malicious applications. While bringing the community valuable information about the methods used and data targeted by malware writers, such work has not yet been able to quantify the prevalence with which mobile devices are actually infected. In this pa- per, we present the first such attempt through a study of the hosting infrastructure used by mobile applications. Using DNS traffic collected over the course of three months from a major US cellular provider as well as a major US non- cellular Internet service provider, we identify the DNS do- mains looked up by mobile applications, and analyze in- formation related to the Internet hosts pointed to by these domains. We make several important observations. The mobile malware found by the research community thus far appears in a minuscule number of devices in the network: 3,492 out of over 380 million (less than 0.0009%) observed during the course of our analysis. This result lends cre- dence to the argument that, while not perfect, mobile ap- plication markets are currently providing adequate security for the majority of mobile device users. Second, we find that users of iOS devices are virtually identically as likely to communicate with known low reputation domains as the owners of other mobile platforms, calling into question the conventional wisdom of one platform demonstrably provid- ing greater security than another. Finally, we observe two malware campaigns from the upper levels of the DNS hi- erarchy and analyze the lifetimes and network properties of these threats. We also note that one of these campaigns ceases to operate long before the malware associated with it is discovered suggesting that network-based countermea- sures may be useful in the identification and mitigation of future threats.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Lu, Kangjie</author><author>Li, Zhichun</author><author>Kemerlis, Vasileios P.</author><author>Wu, Zhenyu</author><author>Lu, Long</author><author>Zheng, Cong</author><author>Qian, Zhiyun</author><author>Lee, Wenke</author><author>Jiang, Guofei</author></authors></contributors><titles><title>Checking More and Alerting Less: Detecting Privacy Leakages via Enhanced Data-flow Analysis and Peer Voting</title><secondary-title>Proceedings 2015 Network and Distributed System Security Symposium</secondary-title></titles><periodical><full-title>Proceedings 2015 Network and Distributed System Security Symposium</full-title></periodical><pages>956-963</pages><volume>7</volume><issue>11</issue><keywords/><dates><year>2015</year></dates><isbn>1-891562-38-X</isbn><electronic-resource-num>10.14722/ndss.2015.23287</electronic-resource-num><urls><pdf-urls><url>internal-pdf://adb8d6ce5331b9208821d0b79523bca8d2ba.pdf</url></pdf-urls><web-urls><url>http://www.internetsociety.org/doc/checking-more-and-alerting-less-detecting-privacy-leakages-enhanced-data-flow-analysis-and-peer</url></web-urls></urls><abstract>Serious concerns have been raised about steahlthy disclosures of pricate user data in smartphone apps, and recent research efforts in mobile security have studied various machanisms to detect privacy disclosures. However, existing approaches are not effective in informin users and security analysts about potential privacy leakage threats. This is because these methods largely fail to 1) provide highly accurate and inclusive detections of privacy disclosures, and 2) filter out legitimate privacy disclosures that usaually dominate detection results and in turn obscure true threats. In this paper, we propose AAPL, an automated system that detects privacy leaks.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Skillen, Adam</author><author>Mannan, Mohammad</author></authors></contributors><titles><title>On Implementing Deniable Storage Encryption for Mobile Devices</title><secondary-title>Ndss</secondary-title></titles><periodical><full-title>Ndss</full-title></periodical><keywords/><dates><year>2013</year></dates><urls><pdf-urls><url>internal-pdf://39045731afd3762bcc61723f866724edc2f0.pdf</url></pdf-urls></urls></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Chung, Simon P</author><author>Jang, Yeongjin</author><author>Payne, Bryan D</author><author>Lee, Wenke</author></authors></contributors><titles><title>Gyrus: A Framework for User-Intent Monitoring of Text-Based Networked Applications</title><secondary-title>Ndss</secondary-title></titles><periodical><full-title>Ndss</full-title></periodical><pages>1-16</pages><issue>February</issue><keywords/><dates><year>2014</year></dates><isbn>1-891562-35-5</isbn><electronic-resource-num>10.14722/ndss.2014.23076</electronic-resource-num><urls><pdf-urls><url>internal-pdf://35f5e6dd53b9232932a90dfea362d3d74af3.pdf</url></pdf-urls><web-urls><url>http://scholar.google.com/scholar_url?hl=en&amp;q=http://www.cc.gatech.edu/~yjang37/papers/gyrus.pdf&amp;sa=X&amp;scisig=AAGBfm0h0sctqCB5HYtkcB_3x53wANXYvw&amp;oi=scholaralrt%5Cnpapers3://publication/uuid/C506AEBC-B290-4E0E-99FA-150A1FCC0F0E</url></web-urls></urls></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Dey, Sanorita</author><author>Roy, Nirupam</author><author>Xu, Wenyuan</author><author>Choudhury, Romit Roy</author><author>Nelakuditi, Srihari</author></authors></contributors><titles><title>AccelPrint: Imperfections of Accelerometers Make Smartphones Trackable</title><secondary-title>Network and Distributed System Security Symposium (NDSS)</secondary-title></titles><periodical><full-title>Network and Distributed System Security Symposium (NDSS)</full-title></periodical><pages>23-26</pages><issue>February</issue><keywords/><dates><year>2014</year></dates><isbn>1891562355</isbn><urls><pdf-urls><url>internal-pdf://79f36528411a9f1350545ca6f1754b18dfc7.pdf</url></pdf-urls><web-urls><url>http://web.engr.illinois.edu/~nroy8/PDF/AccelPrint_Presentation.pdf</url></web-urls></urls><abstract>As mobile begins to overtake the fixed Internet access, ad networks have aggressively sought methods to track users on their mobile devices. While existing countermeasures and regulation focus on thwarting cookies and various device IDs, this paper submits a hypothesis that smartphone/tablet accelerometers possess unique fingerprints, which can be ex- ploited for tracking users.We believe that the fingerprints arise from hardware imperfections during the sensor manufacturing process, causing every sensor chip to respond differently to the same motion stimulus. The differences in responses are subtle enough that they do not affect most of the higher level func- tions computed on them. Nonetheless, upon close inspection, these fingerprints emerge with consistency, and can even be somewhat independent of the stimulus that generates them. Measurements and classification on 80 standalone accelerom- eter chips, 25 Android phones, and 2 tablets, show precision and recall upward of 96%, along with good robustness to real- world conditions. Utilizing accelerometer fingerprints, a crowd- sourcing application running in the cloud could segregate sensor data for each device, making it easy to track a user over space and time. Such attacks are almost trivial to launch, while simple solutions may not be adequate to counteract them.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Schlegel, Roman</author><author>Zhang, Kehuan</author><author>Zhou, Xiaoyong</author></authors></contributors><titles><title>Soundcomber: A stealthy and context-aware sound trojan for smartphones</title><secondary-title>Proceedings of the 18th Annual Network and Distributed System Security Symposium (NDSS)</secondary-title></titles><periodical><full-title>Proceedings of the 18th Annual Network and Distributed System Security Symposium (NDSS)</full-title></periodical><pages>17-33</pages><keywords/><dates><year>2011</year></dates><urls><pdf-urls><url>internal-pdf://7dffc8b4c090e3c8283c1f6ab1e20444c09b.pdf</url></pdf-urls><web-urls><url>https://www.cs.indiana.edu/~kapadia/papers/soundcomber-ndss11.pdf</url></web-urls></urls><abstract>We explore the threat of smartphone malware with access to on-board sensors, which opens new avenues for illicit collection of private information. While existing work shows that such &quot;sensory malware&quot; can convey raw sensor data (e.g., video and audio) to a remote server, these approaches lack stealthiness, incur significant communication and computation overhead during data transmission and processing, and can easily be defeated by existing protections like denying installation of applications with access to both sensitive sensors and the network. We present Soundcomber, a Trojan with few and innocuous permissions, that can extract a small amount of targeted private information from the audio sensor of the phone. Using targeted profiles for context-aware analysis, Soundcomber intelligently &quot;pulls out&quot; sensitive data such as credit card and PIN numbers from both tone- and speech-based interaction with phone menu systems. Soundcomber performs efficient, stealthy local extraction, thereby greatly reducing the communication cost for delivering stolen data. Soundcomber automatically infers the destination phone number by analyzing audio, circumvents known security defenses, and conveys information remotely without direct network access. We also design and implement a defensive architecture that foils Soundcomber, identify new covert channels specific to smartphones, and provide a video demonstration of Soundcomber.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>McIlroy, Stuart</author><author>Ali, Nasir</author><author>Hassan, Ahmed E.</author></authors></contributors><titles><title>Fresh apps: an empirical study of frequently-updated mobile apps in the Google play store</title><secondary-title>Empirical Software Engineering</secondary-title></titles><periodical><full-title>Empirical Software Engineering</full-title></periodical><pages>1346-1370</pages><volume>21</volume><issue>3</issue><keywords><keyword>Mobile apps</keyword><keyword>Release frequency</keyword><keyword>Release patterns</keyword><keyword>Reverse engineering</keyword><keyword>Software releases</keyword><keyword>Source code analysis</keyword></keywords><dates><year>2016</year></dates><publisher>Empirical Software Engineering</publisher><isbn>1382-3256</isbn><electronic-resource-num>10.1007/s10664-015-9388-2</electronic-resource-num><urls><pdf-urls><url>internal-pdf://120.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1007/s10664-015-9388-2</url></web-urls></urls><abstract>Mobile app stores provide a unique platform for developers to rapidly deploy new updates of their apps. We studied the frequency of updates of 10,713 mobile apps (the top free 400 apps at the start of 2014 in each of the 30 categories in the Google Play store). We find that a small subset of these apps (98 apps representing ˜1 % of the studied apps) are updated at a very frequent rate — more than one update per week and 14 % of the studied apps are updated on a bi-weekly basis (or more frequently). We observed that 45 % of the frequently-updated apps do not provide the users with any information about the rationale for the new updates and updates exhibit a median growth in size of 6 %. This paper provides information regarding the update strategies employed by the top mobile apps. The results of our study show that 1) developers should not shy away from updating their apps very frequently, however the frequency varies across store categories. 2) Developers do not need to be too concerned about detailing the content of new updates. It appears that users are not too concerned about such information. 3) Users highly rank frequently-updated apps instead of being annoyed about the high update frequency.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Damopoulos, Dimitrios</author><author>Kambourakis, Georgios</author><author>Gritzalis, Stefanos</author><author>Park, Sang Oh</author></authors></contributors><titles><title>Exposing mobile malware from the inside (or what is your mobile app really doing?)</title><secondary-title>Peer-to-Peer Networking and Applications</secondary-title></titles><periodical><full-title>Peer-to-Peer Networking and Applications</full-title></periodical><pages>687-697</pages><volume>7</volume><issue>4</issue><keywords><keyword>Behavior-based detection</keyword><keyword>Dynamic analysis</keyword><keyword>Malware</keyword><keyword>Smartphone</keyword><keyword>iOS</keyword></keywords><dates><year>2014</year></dates><isbn>1936-6442</isbn><electronic-resource-num>10.1007/s12083-012-0179-x</electronic-resource-num><urls><pdf-urls><url>internal-pdf://112.pdf</url></pdf-urls></urls><abstract>It is without a doubt that malware especially designed for modern mobile platforms is rapidly becoming a serious threat. The problem is further multiplexed by the growing convergence of wired, wireless and cellular networks, since virus writers can now develop sophisticated malicious software that is able to migrate across network domains. This is done in an effort to exploit vulnerabilities and services specific to each network. So far, research in dealing with this risk has concentrated on the Android platform and mainly considered static solutions rather than dynamic ones. Compelled by this fact, in this paper, we contribute a fully-fledged tool able to dynamically analyze any iOS software in terms of method invocation (i.e., which API methods the application invokes and under what order), and produce exploitable results that can be used to manually or automatically trace software’s behavior to decide if it contains malicious code or not. By employing real life malware we assessed our tool both manually, as well as, via heuristic techniques and the results we obtained seem highly accurate in detecting malicious code.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Asquith, Matthew</author></authors></contributors><titles><title>Extremely scalable storage and clustering of malware metadata</title><secondary-title>Journal of Computer Virology and Hacking Techniques</secondary-title></titles><periodical><full-title>Journal of Computer Virology and Hacking Techniques</full-title></periodical><pages>49-58</pages><volume>12</volume><issue>2</issue><keywords/><dates><year>2016</year></dates><electronic-resource-num>10.1007/s11416-015-0241-3</electronic-resource-num><urls><pdf-urls><url>internal-pdf://113.pdf</url></pdf-urls></urls><abstract>The sheer volume of new malware samples presents some big data challenges for antivirus vendors. Not only does the metadata for tens (or even hundreds) of millions of samples need to be stored, but all this data also needs to be ‘clustered’ - mined to find groups of related samples. Existing techniques cannot easily scale to the magnitudes of samples already arriving today, yet alone those that we expect to receive in the future. This paper proposes a data structure called an ‘aggregation overlay graph’ to simplify these problems. By exploiting the shared similarities of most malware variants, we can reduce the total volume of metadata by more than 90% without any loss of information. Furthermore, by including a wide variety of features from each sample, this process of reduction also creates groups of similar files, a clustering technique that can handle very high volumes. The versatility of this approach is demonstrated by applying it not only to large corpuses of Windows PE metadata, but also for Android APK files.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Dewan, Prateek</author><author>Kumaraguru, Ponnurangam</author></authors></contributors><titles><title>Facebook Inspector (FbI): Towards automatic real-time detection of malicious content on Facebook</title><secondary-title>Social Network Analysis and Mining</secondary-title></titles><periodical><full-title>Social Network Analysis and Mining</full-title></periodical><volume>7</volume><issue>1</issue><keywords><keyword>Facebook</keyword><keyword>Machine learning</keyword><keyword>Malicious content</keyword><keyword>Real-time system</keyword></keywords><dates><year>2017</year></dates><publisher>Springer Vienna</publisher><electronic-resource-num>10.1007/s13278-017-0434-5</electronic-resource-num><urls><pdf-urls><url>internal-pdf://114.pdf</url></pdf-urls></urls><abstract>© 2017, Springer-Verlag Wien.Online Social Networks witness a rise in user activity whenever a major event makes news. Cyber criminals exploit this spur in user engagement levels to spread malicious content that compromises system reputation, causes financial losses and degrades user experience. In this paper, we collect and characterize a dataset of 4.4 million public posts generated on Facebook during 17 news-making events (natural calamities, sports, terror attacks, etc.) over a 16-month time period. From this dataset, we filter out two sets of malicious posts, one using URL blacklists and another using human annotations. Our observations reveal some characteristic differences between malicious posts obtained from the two methodologies, thus demanding a twofold filtering process for a more complete and robust filtering system. We empirically confirm the need for this twofold filtering approach by cross-validating supervised learning models obtained from the two sets of malicious posts. These supervised learning models include Naive Bayesian, Decision Trees, Random Forest, and Support Vector Machine-based models. Based on this learning, we implement Facebook Inspector, a REST API-based browser plug-in for identifying malicious Facebook posts in real time. Facebook Inspector uses class probabilities obtained from two independent supervised learning models based on a Random Forest classifier to identify malicious posts in real time. These supervised learning models are based on a feature set comprising of 44 features and achieve an accuracy of over 80% each, using only publicly available features. During the first 9 months of its public deployment (August 2015–May 2016), Facebook Inspector processed 0.97 million posts at an average response time of 2.6 s per post and was downloaded over 2500 times. We also evaluate Facebook Inspector in terms of performance and usability to identify further scope for improvement.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Garg, Shree</author><author>Peddoju, Sateesh K</author><author>Sarje, Anil K</author></authors></contributors><titles><title>Network-based detection of Android malicious apps</title><secondary-title>International Journal of Information Security</secondary-title></titles><periodical><full-title>International Journal of Information Security</full-title></periodical><pages>385-400</pages><volume>16</volume><issue>4</issue><keywords><keyword>Android</keyword><keyword>Detection</keyword><keyword>Encrypted communication</keyword><keyword>Known and unknown apps</keyword><keyword>Machine learning</keyword><keyword>Malicious app</keyword><keyword>Malware</keyword><keyword>Mobile bots</keyword><keyword>Network traces</keyword><keyword>Network-behavior</keyword></keywords><dates><year>2017</year></dates><publisher>Springer Berlin Heidelberg</publisher><electronic-resource-num>10.1007/s10207-016-0343-z</electronic-resource-num><urls><pdf-urls><url>internal-pdf://garg2016.pdf</url></pdf-urls></urls><abstract>Users leverage mobile devices for their daily Internet needs by running various mobile applications (apps) such as social networking, e-mailing, news-reading, and video/audio streaming. Mobile device have become major targets for malicious apps due to their heavy network activity and is a research challenge in the current era. The majority of the research reported in the literature is focused on host-based systems rather than the network-based; unable to detect malicious activities occurring on mobile device through the Internet. This paper presents a detection app model for classification of apps. We investigate the accuracy of various machine learning models, in the context of known and unknown apps, benign and normal apps, with or without encrypted message-based app, and operating system version independence of classification. The best resulted machine learning(ML)-based model is embedded into the detection app for efficient and effective detection. We collect a dataset of network activities of 18 different malware families-based apps and 14 genuine apps and use it to develop ML-based detectors. We show that, it is possible to detect malicious app using network traces with the traditional ML techniques, and results revealed the accuracy (95–99.9 %) in detection of apps in different scenarios. The model proposed is proved efficient and suitable for mobile devices. Due to the widespread penetration of Android OS into the market, it has become the main target for the attackers. Hence, the proposed system is deployed on Android environment.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Derhab, Abdelouahid</author><author>Saleem, Kashif</author><author>Youssef, Ahmed</author><author>Guerroumi, Mohamed</author></authors></contributors><titles><title>Preventive Policy Enforcement with Minimum User Intervention Against SMS Malware in Android Devices</title><secondary-title>Arabian Journal for Science and Engineering</secondary-title></titles><periodical><full-title>Arabian Journal for Science and Engineering</full-title></periodical><pages>479-493</pages><volume>41</volume><issue>2</issue><keywords><keyword>Android</keyword><keyword>Policy enforcement</keyword><keyword>Prevention</keyword><keyword>SMS malware</keyword></keywords><dates><year>2016</year></dates><electronic-resource-num>10.1007/s13369-015-1665-2</electronic-resource-num><urls><pdf-urls><url>internal-pdf://derhab2015(1).pdf</url></pdf-urls></urls><abstract>In this paper, we propose MinDroid, a user-centric preventive policy\nenforcement system against SMS malware in Android devices. The design of\nMinDroid takes into consideration the user's little understanding of the\nAndroid permission system. This can be done by deriving the policy rules\nfrom the behavioral model of the malicious SMS applications rather than\nadopting user-defined rules. MinDroid requires user intervention only\nduring the first T time units from the application installation time.\nThe user during this time period is notified to accept or reject the\nSMS-sending operations. MinDroid execution is specified as a finite\nstate machine, and its security properties are formally proven using\nMetric Temporal Logic. We also show that MinDroid is resilient against\nthreats trying to compromise its correct functionality. In addition, an\nanalytical study demonstrates that MinDroid offers good performance in\nterms of detection time and execution cost in comparison with intrusion\ndetection systems based on static and dynamic analysis. The detection\nefficiency of MinDroid is also studied in terms of detection rate, false\npositive rate, and ROC distance. A prototype implementation of MinDroid\nis tested under Android emulator.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Chawdhary, Aziem</author><author>Singh, Ranjeet</author><author>King, Andy</author></authors></contributors><titles><title>Partial evaluation of string obfuscations for Java malware detection</title><secondary-title>Formal Aspects of Computing</secondary-title></titles><periodical><full-title>Formal Aspects of Computing</full-title></periodical><pages>33-55</pages><volume>29</volume><issue>1</issue><keywords><keyword>Malware detection</keyword><keyword>Partial evaluation</keyword><keyword>String deobfuscation</keyword></keywords><dates><year>2017</year></dates><electronic-resource-num>10.1007/s00165-016-0357-3</electronic-resource-num><urls><pdf-urls><url>internal-pdf://chawdhary2016.pdf</url></pdf-urls></urls><abstract>The fact that Java is platformindependent gives hackers the opportunity towrite exploits that can target users on any platform, which has a JVM implementation. Metasploit is a well-known source of Java exploits and to circumvent detection by anti virus (AV) software, obfuscation techniques are routinely applied to make an exploit more difficult to recognise. Popular obfuscation techniques for Java include string obfuscation and applying reflection to hide method calls; two techniques that can either be used together or independently. This paper shows how to apply partial evaluation to remove these obfuscations and thereby improve AV matching. The paper presents a partial evaluator for Jimple, which is an intermediate language for JVM bytecode designed for optimisation and programanalysis, and demonstrates howpartially evaluated Jimple code,when transformed back into Java, improves the detection rates of a number of commercial AV products.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Chen, Ting</author><author>Li, Xiaoqi</author><author>Luo, Xiapu</author><author>Zhang, Xiaosong</author></authors></contributors><titles><title>System-level attacks against android by exploiting asynchronous programming</title></titles><periodical/><keywords><keyword>Android</keyword><keyword>Asynchronous programming</keyword><keyword>IntentService</keyword><keyword>android</keyword><keyword>asynchronous programming</keyword><keyword>homescreen hiding</keyword><keyword>intent service</keyword><keyword>nfc state</keyword><keyword>sim card removal</keyword><keyword>system-level attacks</keyword><keyword>telephone signal block</keyword><keyword>wi-fi dos</keyword></keywords><dates><year>2017</year></dates><publisher>Software Quality Journal</publisher><electronic-resource-num>10.1007/s11219-017-9374-6</electronic-resource-num><urls><pdf-urls><url>internal-pdf://chen2017.pdf</url></pdf-urls></urls><abstract>To avoid unresponsiveness, Android developers utilize asynchronous program- ming to schedule long-running tasks in the background. In this work, we conduct a systematic study on IntentService, one of the async constructs provided by Android using static program analysis, and find that in Android 6, 974 intents can be sent by third-party applications without protection. Based on this observation, we develop a tool, ATUIN, to demonstrate the feasibility of attacking a CPU automatically by exploiting the intents that can be handled by an Android system. Furthermore, by investigating the unprotected intents, we discover tens of critical vulnerabilities that have not been reported before, includingWi- Fi DoS, telephone signal blocking, SIM card removal, homescreen hiding, and NFC state cheating. Our study sheds light on research into protecting asynchronous programming from being exploited by hackers.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Cho, Haehyun</author><author>Bang, Jiwoong</author><author>Ji, Myeongju</author><author>Yi, Jeong Hyun</author></authors></contributors><titles><title>Mobile application tamper detection scheme using dynamic code injection against repackaging attacks</title><secondary-title>Journal of Supercomputing</secondary-title></titles><periodical><full-title>Journal of Supercomputing</full-title></periodical><pages>3629-3645</pages><volume>72</volume><issue>9</issue><keywords><keyword>Android application protection</keyword><keyword>Android platform</keyword><keyword>Tamper detection</keyword></keywords><dates><year>2016</year></dates><publisher>Springer US</publisher><electronic-resource-num>10.1007/s11227-016-1763-2</electronic-resource-num><urls><pdf-urls><url>internal-pdf://cho20166.pdf</url></pdf-urls></urls><abstract>TheAndroidplatform, with a largemarket share fromits inclusive openness, faces a big problem with repackaging attacks, because reverse engineering is made easy due to the signature method that allows self-sign and also due to application structure. A repackaging attack is a method of attack, where an attacker with mali- cious intent alters an application distributed on the market to then redistribute it. The attacker injects into the original application illegal advertisement or malicious code that extracts personal information, and then redistributes the app. To protect against such repackaging attacks, obfuscation methods and tampering detection schemes to prevent application analysis are being developed and applied to Android applications. However, through dynamic analysis, protection methods at the managed code can be rendered ineffective, and there is a need for a protection method that will address this. In this paper, we show that, using Dalvik monitor, protection methods at the managed code level can be dynamically analyzed. In addition, to prevent a tampered application from running, we propose a tampering detection scheme that uses a dynamic attes- tation platform. It consist of two phases; (1) detection code injection: inject tamper detecting code into an application and (2) code attestation: attest the injected code on the platform. The proposed scheme first uses the tamper detection method at the platform level to inspect execution codes executed in real time and to fundamentally intercept repackaged applications.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Apvrille, Axelle</author><author>Strazzere, Tim</author></authors></contributors><titles><title>Reducing the window of opportunity for Android malware Gotta catch 'em all</title><secondary-title>Journal in Computer Virology</secondary-title></titles><periodical><full-title>Journal in Computer Virology</full-title></periodical><pages>61-71</pages><volume>8</volume><issue>1-2</issue><keywords/><dates><year>2012</year></dates><electronic-resource-num>10.1007/s11416-012-0162-3</electronic-resource-num><urls><pdf-urls><url>internal-pdf://apvrille2012.pdf</url></pdf-urls></urls><abstract>Spotting malicious samples in the wild has always been difficult, and Android malware is no exception. Actually, the fact Android applications are (usually) not directly accessible from market places hardens the task even more. For instance, Google enforces its own communication protocol to browse and download applications from its market. Thus, an efficient market crawler must reverse and implement this protocol, issue appropriate search requests and take necessary steps so as not to be banned. From end-users’ side, having difficulties spotting malicious mobile applications results in most Android malware remaining unnoticed up to 3 months before a security researcher finally stumbles on it. To reduce this window of opportunity, this paper presents a heuristics engine that statically pre-processes and prioritizes samples. The engine uses 39 different flags of different nature such as Java API calls, presence of embedded executables, code size, URLs… Each flag is assigned a different weight, based on statistics we computed from the techniques mobile malware authors most commonly use in their code. The engine outputs a risk score which highlights samples which are the most likely to be malicious. The engine has been tested over a set of clean applications and malicious ones. The results show a strong difference in the average risk score for both sets and in its distribution, proving its use to spot malware.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Apvrille, Axelle</author><author>Apvrille, Ludovic</author></authors></contributors><titles><title>SherlockDroid : a research assistant to spot unknown malware in Android marketplaces</title><secondary-title>Journal of Computer Virology and Hacking Techniques</secondary-title></titles><periodical><full-title>Journal of Computer Virology and Hacking Techniques</full-title></periodical><pages>235-245</pages><volume>11</volume><issue>4</issue><keywords><keyword>Android</keyword><keyword>Classification</keyword><keyword>Malware</keyword><keyword>Security</keyword><keyword>Static analysis</keyword><keyword>android</keyword><keyword>classification</keyword></keywords><dates><year>2015</year></dates><publisher>Springer Paris</publisher><electronic-resource-num>10.1007/s11416-015-0245-z</electronic-resource-num><urls><pdf-urls><url>internal-pdf://apvrille2015.pdf</url></pdf-urls></urls><abstract>With over 1,400,000 Android applications in Google Play alone, and dozens of different marketplaces, Android malware unfortunately have no difficulty to sneak in and silently spread. Known malware and their variants are nowadays quite well detected by anti-virus scanners. Nevertheless, the fundamentally new and unknown malware remain an issue. To assist research teams in the discovery of such new malware, we built an infrastructure, named Sher- lockDroid, whose goal is to filter out the mass of applications and only keep those which are the most likely to be malicious for future inspection by Anti-virus teams. SherlockDroid consists of marketplace crawlers, code-level property extrac- tors and a classification tool named Alligator which decides whether the sample looks malicious or not, based on some prior learning. In our tests,weextracted properties and classi- fied over 480K applications. During two crawling campaigns in July 2014 and October 2014, SherlockDroid crawled over 120K applications with the detection of one new malware, Android/Odpa.A!tr.spy, and two new riskware. With previ- ous findings, this increases SherlockDroid and Alligator’s “Hall of Shame” to 8 malware and potentially unwanted applications. Keywords</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Barakat, Osamah L</author><author>Hashim, Shaiful J</author><author>Raja Abdullah, Raja Syamsul Azmir B.</author><author>Ramli, Abdul Rahman</author><author>Hashim, Fazirulhisyam</author><author>Samsudin, Khairulmizam</author><author>Ab Rahman, Mahmud</author></authors></contributors><titles><title>Malware analysis performance enhancement using cloud computing</title><secondary-title>Journal of Computer Virology and Hacking Techniques</secondary-title></titles><periodical><full-title>Journal of Computer Virology and Hacking Techniques</full-title></periodical><pages>1-10</pages><volume>10</volume><issue>1</issue><keywords/><dates><year>2013</year></dates><electronic-resource-num>10.1007/s11416-013-0187-2</electronic-resource-num><urls><pdf-urls><url>internal-pdf://barakat2013.pdf</url></pdf-urls><web-urls><url>http://www.scopus.com/inward/record.url?eid=2-s2.0-84893846568&amp;partnerID=tZOtx3y1</url></web-urls></urls><abstract>Nowadays, computer based technology has taken a central role in every person life. Hence, damage caused by malicious software (malware) can reach and effect many people globally as what could be in the early days of computer. A close look at the current approaches of malware analysis shows that the respond time of reported malware to public users is slow. Hence, the users are unable to get prompt feedback when reporting suspicious files. Therefore, this paper aims at introducing a new approach to enhance malware analyzer performance. This approach utilizes cloud computing features and integrates it with malware analyzer. To evaluate the proposed approach, two systems had been prepared carefully with the same malware analyzer, one of them utilizes cloud computing and the other left without change. The evaluation results showed that the proposed approach is faster by 23 % after processing 3,000 samples. Furthermore, utilizing cloud computing can open door to crowd-source this service hence encouraging malware reporting and accelerate malware detection by engaging the public users at large. Ultimately this proposed system hopefully can reduce the time taken to detect new malware in the wild.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Anagnostopoulos, Marios</author><author>Kambourakis, Georgios</author><author>Gritzalis, Stefanos</author></authors></contributors><titles><title>New facets of mobile botnet: architecture and evaluation</title><secondary-title>International Journal of Information Security</secondary-title></titles><periodical><full-title>International Journal of Information Security</full-title></periodical><pages>455-473</pages><volume>15</volume><issue>5</issue><keywords><keyword>Covert channel</keyword><keyword>Cyber security</keyword><keyword>DNS amplification</keyword><keyword>Mobile botnets</keyword></keywords><dates><year>2016</year></dates><publisher>Springer Berlin Heidelberg</publisher><electronic-resource-num>10.1007/s10207-015-0310-0</electronic-resource-num><urls><pdf-urls><url>internal-pdf://anagnostopoulos2015.pdf</url></pdf-urls></urls><abstract>It is without a doubt that botnets pose a growing threat to the Internet, with DDoS attacks of any kind car- ried out by botnets to be on the rise. Nowadays, botmasters rely on advanced Command and Control (C&amp;C) infrastruc- tures to achieve their goals and most importantly to remain undetected. This work introduces two novel botnet archi- tectures that consist only of mobile devices and evaluates both their impact in terms of DNS amplification and TCP flooding attacks, and their cost pertaining to the maintenance of the C&amp;C channel. The first one puts forward the idea of using a continually changing mobile HTTP proxy in front of the botherder, while the other capitalizes on DNS protocol as a covert channel for coordinating the botnet. That is, for the latter, the messages exchanged among the bots and the herder appear as legitimate DNS transactions. Also, a third architecture is described and assessed, which is basically an optimized variation of the first one. Namely, it utilizes a mixed layout where all the attacking bots are mobile, but the proxy machines are typical PCs not involved in the actual attack. For the DNS amplification attack, which is by nature more powerful, we report an amplification factor that fluc- tuates between 32.7 and 34.1. Also, regarding the imposed C&amp;Ccost, we assert that it is minimal (about 0.25 Mbps) per bot in the worst case happening momentarily when the bot learns about the parameters of the attack.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Apvrille, Axelle</author></authors></contributors><titles><title>Symbian worm Yxes: Towards mobile botnets?</title><secondary-title>Journal in Computer Virology</secondary-title></titles><periodical><full-title>Journal in Computer Virology</full-title></periodical><pages>117-131</pages><volume>8</volume><issue>4</issue><keywords/><dates><year>2012</year></dates><electronic-resource-num>10.1007/s11416-012-0163-2</electronic-resource-num><urls><pdf-urls><url>internal-pdf://apvrille2012 (1).pdf</url></pdf-urls></urls><abstract>In 2009, a new Symbian malware named SymbOS/Yxes was detected and quickly hit the headlines as one of the first malware for Symbian OS 9 and above all as the foretaste of a mobile botnet. Yet, detailed analysis of the malware were still missing. This paper addresses this issue and details how the malware silently connects to the Internet, installs new malware or spreads to other victims. Each of these points are illustrated with commented assembly code taken from the malware or re-generated Symbian API calls. Besides those implementation aspects, the paper also provides a global overview of Yxes's behaviour. It explains how malicious remote servers participate in the configuration and propagation of the malware, including Yxes's similarities with a botnet. It also tries to shed light on some incomplete or misleading statements in prior press articles. Those statements are corrected, based on the reverse engineering evidence previously. Finally, the paper concludes on Yxes's importance and the lack of security on mobile phones. It also indicates several aspects future work should focus on such as communication decryption, tools to analyze embedded malware or cybercriminals motivations. © 2012 Springer-Verlag France.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Preda, Mila Dalla</author><author>Maggi, Federico</author></authors></contributors><titles><title>Testing android malware detectors against code obfuscation: a systematization of knowledge and unified methodology</title><secondary-title>Journal of Computer Virology and Hacking Techniques</secondary-title></titles><periodical><full-title>Journal of Computer Virology and Hacking Techniques</full-title></periodical><pages>209-232</pages><volume>13</volume><issue>3</issue><keywords><keyword>Android malware detection</keyword><keyword>Code obfuscation</keyword></keywords><dates><year>2017</year></dates><publisher>Springer Paris</publisher><electronic-resource-num>10.1007/s11416-016-0282-2</electronic-resource-num><urls><pdf-urls><url>internal-pdf://preda2016.pdf</url></pdf-urls></urls><abstract>The authors of mobile-malware have started to leverage program protection techniques to circumvent anti- viruses, or simply hinder reverse engineering. In response to the diffusion of anti-virus applications, several researches have proposed a plethora of analyses and approaches to highlight their limitations when malware authors employ program-protection techniques.An important contribution of this work is a systematization of the state of the art of anti- virus apps, comparing the existing approaches and providing a detailed analysis of their pros and cons. As a result of our systematization, we notice the lack of openness and repro- ducibility that, in our opinion, are crucial for any analysis methodology. Following this observation, the second con- tribution of this work is an open, reproducible, rigorous methodology to assess the effectiveness ofmobile anti-virus tools against code-transformation attacks.Our unifiedwork- flow, released in the form of an open-source prototype, comprises a comprehensive set of obfuscation operators. It is intended to be used by anti-virus developers and vendors to test the resilience of their products against a large dataset of malware samples and obfuscations, and to obtain insights on how to improve their products with respect to particular classes of code-transformation attacks.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Peng, Guojun</author><author>Shao, Yuru</author><author>Wang, Taige</author><author>Zhan, Xian</author><author>Zhang, Huanguo</author></authors></contributors><titles><title>Research on android malware detection and interception based on behavior monitoring</title><secondary-title>Wuhan University Journal of Natural Sciences</secondary-title></titles><periodical><full-title>Wuhan University Journal of Natural Sciences</full-title></periodical><pages>421-427</pages><volume>17</volume><issue>5</issue><keywords><keyword>Android</keyword><keyword>Malware detection</keyword><keyword>Smartphone security</keyword><keyword>Software behavior</keyword></keywords><dates><year>2012</year></dates><electronic-resource-num>10.1007/s11859-012-0864-x</electronic-resource-num><urls><pdf-urls><url>internal-pdf://peng2012.pdf</url></pdf-urls></urls><abstract>Focusing on the sensitive behaviors of malware, such as privacy stealing and money costing, this paper proposes a new method to monitor software behaviors and detect malicious appli- cations on Android platform. According to the theory and imple- mentation of Android Binder interprocess communication mecha- nism, a prototype system that integrates behavior monitoring and intercepting, malware detection, and identification is built in this work. There are 50 different kinds of samples used in the experi- ment of malware detection, including 40 normal samples and 10 malicious samples. The theoretical analysis and experimental re- sult demonstrate that this system is effective in malware detection and interception, with a true positive rate equal to 100% and a false positive rate less than 3%.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Newspaper Article">5</ref-type><contributors><authors><author>Martín, Alejandro</author><author>Menéndez, Héctor D</author><author>Camacho, David</author></authors></contributors><titles><title>MOCDroid: multi-objective evolutionary classifier for Android malware detection</title><secondary-title>Soft Computing</secondary-title></titles><periodical><full-title>Soft Computing</full-title></periodical><pages>1-11</pages><keywords><keyword>Android</keyword><keyword>Classification</keyword><keyword>Clustering</keyword><keyword>Malware</keyword></keywords><dates><year>2016</year></dates><publisher>Springer Berlin Heidelberg</publisher><electronic-resource-num>10.1007/s00500-016-2283-y</electronic-resource-num><urls><pdf-urls><url>internal-pdf://martn2016.pdf</url></pdf-urls></urls><abstract>Malware threats are growing, while at the same time, concealment strategies are being used to make them undetectable for current commercial antivirus. Android is one of the target architectures where these problems are specially alarming due to the wide extension of the platform in different everyday devices. The detection is specially relevant for Android markets in order to ensure that all the software they offer is clean. However, obfuscation has proven to be effective at evading the detection process. In this paper, we leverage third-party calls to bypass the effects of these concealment strategies, since they cannot be obfuscated. We combine clustering and multi-objective optimisation to generate a classifier based on specific behaviours defined by third-party call groups. The optimiser ensures that these groups are related to malicious or benign behaviours cleaning any non-discriminative pattern. This tool, named MOCDroid, achieves an accuracy of 95.15 % in test with 1.69 % of false positives with real apps extracted from the wild, overcoming all commercial antivirus engines from VirusTotal.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Kim, Hyunki</author><author>Cho, Taejoo</author><author>Ahn, G.-J.</author><author>Hyun Yi, J.</author></authors></contributors><titles><title>Risk assessment of mobile applications based on machine learned malware dataset</title><secondary-title>Multimedia Tools and Applications</secondary-title></titles><periodical><full-title>Multimedia Tools and Applications</full-title></periodical><keywords><keyword>Machine learning</keyword><keyword>Malware analysis</keyword><keyword>Mobile security</keyword></keywords><dates><year>2017</year></dates><publisher>Multimedia Tools and Applications</publisher><isbn>1104201747</isbn><electronic-resource-num>10.1007/s11042-017-4756-0</electronic-resource-num><urls><pdf-urls><url>internal-pdf://kim2017.pdf</url></pdf-urls></urls><abstract>© 2017 Springer Science+Business Media New YorkWith the expected development of the Internet of Things, in which all devices will be connected, mobile devices will play a greater role in providing personalized services and will store larger amounts of personal information. However, the number of malicious applications is also increasing, with the aim being to steal user personal information. Furthermore, given the open-market policies of Android and the distribution structure of the Google Play store, any application developer can readily distribute such applications. On the other hand, end users cannot easily determine whether an application is malicious or not. Therefore, we propose an Android application package (APK) Vulnerability Identification System (AVIS) that can identify malicious applications in advance using the Naïve Bayes classification scheme. To achieve this goal, AVIS builds a dataset by downloading sample applications and extracting their framework methods. To verify the accuracy of AVIS, we analyze sample applications. The APK vulnerability score determined by AVIS is expected to be used as a core metric for quantitatively evaluating the vulnerability of mobile applications.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Jo, Hyo Jin</author><author>Choi, Wonsuk</author><author>Na, Seoung Yeop</author><author>Woo, Samuel</author><author>Lee, Dong Hoon</author></authors></contributors><titles><title>Vulnerabilities of Android OS-Based Telematics System</title><secondary-title>Wireless Personal Communications</secondary-title></titles><periodical><full-title>Wireless Personal Communications</full-title></periodical><pages>1511-1530</pages><volume>92</volume><issue>4</issue><keywords><keyword>Android</keyword><keyword>Controller Area Network</keyword><keyword>Open platform</keyword><keyword>Smart vehicle</keyword><keyword>Telematics communication</keyword></keywords><dates><year>2017</year></dates><publisher>Springer US</publisher><electronic-resource-num>10.1007/s11277-016-3618-9</electronic-resource-num><urls><pdf-urls><url>internal-pdf://jo2016.pdf</url></pdf-urls></urls><abstract>Intelligent vehicle technologies have been developed rapidly. Modern vehicles include many Electronic Control Units (ECUs) and in-vehicle networks. While these technologies offer accurate vehicle control and increase the convenience and safety of drivers, their vulnerabilities also have been analyzed and exploited. Nevertheless, open platforms, such as the Android OS, have been introduced into vehicle systems without careful consideration about security issues. In this paper, we indicate the security problems of an Android OS-based telematics system. Our target device’s firmware is offered on a public Web site and is easily analyzed using public analysis tools. This means that our analysis methods are more scalable and practical than previous ones for remote attacks that require difficult analysis skills, such as signal processing and reverse engineering. We also found that the device allows malicious firmware to be updated because of a problem related to misuse of certificates. Furthermore, we conducted attack experiments using a real vehicle.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Jeong, Eun Su</author><author>Kim, In Seok</author><author>Lee, Dong Hoon</author></authors></contributors><titles><title>SafeGuard : a behavior based real-time malware detection scheme for mobile multimedia applications in android platform</title><secondary-title>Multimedia Tools and Applications</secondary-title></titles><periodical><full-title>Multimedia Tools and Applications</full-title></periodical><keywords><keyword>Android malware detection</keyword><keyword>Mobile multimedia applic</keyword><keyword>android malware detection</keyword><keyword>android platform</keyword><keyword>behavior detection</keyword><keyword>mobile multimedia application</keyword><keyword>mobile security</keyword></keywords><dates><year>2016</year></dates><publisher>Multimedia Tools and Applications</publisher><isbn>1104201641891</isbn><electronic-resource-num>10.1007/s11042-016-4189-1</electronic-resource-num><urls><pdf-urls><url>internal-pdf://jeong2016.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1007/s11042-016-4189-1</url></web-urls></urls><abstract>SafeGuard is proposed as a solution to monitor behaviors of smartphone applications in real-time and detect and block any malicious behaviors. This solution consists of a server that manages and deploys the blocking rules and the device solution that monitors various applications in Android devices. The proposed scheme provides users with real-time malware information such as spyware detected by the SafeGuard library upon suspicious API call within the Android platform. Except for use of Rootkit at the kernel level, the scheme can detect behaviors that use the API from the platform or caused by a combination of those APIs. The database that determines any malicious behaviors can be periodically updated to block various malicious behaviors by using preemptive responses different from existing anti-virus products. For this purpose, the behaviors of smartphone applications are classified and are defined for monitoring. The architecture to apply them is also proposed in the Android framework and the proposed scheme is applied in the Android smartphone environment to verify its stability and feasibility through measuring the overhead in the environment. Keywords</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Jones, Beth H</author><author>Chin, Amita Goyal</author><author>Aiken, Peter</author></authors></contributors><titles><title>Risky Business: Students and Smartphones</title><secondary-title>TechTrends: Linking Research and Practice to Improve Learning</secondary-title></titles><periodical><full-title>TechTrends: Linking Research and Practice to Improve Learning</full-title></periodical><pages>73-83</pages><volume>58</volume><issue>December</issue><keywords><keyword>Best practices</keyword><keyword>business students</keyword><keyword>cell phones</keyword><keyword>compliance</keyword><keyword>mobile devices</keyword><keyword>security guidelines</keyword><keyword>smartphone security.</keyword></keywords><dates><year>2014</year></dates><electronic-resource-num>10.1007/s11528-014-0806-x</electronic-resource-num><urls><pdf-urls><url>internal-pdf://jones2014.pdf</url></pdf-urls><web-urls><url>http://search.ebscohost.com/login.aspx?direct=true&amp;db=eric&amp;AN=EJ1042919&amp;site=ehost-live%5Cnhttp://dx.doi.org/10.1007/s11528-014-0806-x</url></web-urls></urls><abstract>The increase in smartphone adoption has been no less than astounding. Unfortunately, the explosive growth has been accompanied by a rash of security problems. A contributing factor to the growing security problem is a lack of education, training, and awareness. In addition, &quot;bring your own device&quot; (BYOD) policies often leave security responsibilities to the competencies of device owners, which compromises security. Today's students are tomorrow's employees with responsibilities for protecting their work environment. They need to understand and practice a full-range of mobile security practices so that they can safely access the information assets of their organizations. If students are not engaging in such practices, educational institutions have a responsibility to ensure that students understand how to keep information assets secure. This paper investigates the smartphone security practices of undergraduate college students. Five hundred students in business classes at a regional public university were surveyed to determine their use of recommended smartphone security practices. The study found that many smartphone users did employ some security measures, but a high percentage of them were ignoring potential risks. This suggests a need for increased education, training, and awareness.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Newspaper Article">5</ref-type><contributors><authors><author>Zhu, Hui Juan</author><author>Jiang, Tong Hai</author><author>Ma, Bo</author><author>You, Zhu Hong</author><author>Shi, Wei Lei</author><author>Cheng, Li</author></authors></contributors><titles><title>HEMD: a highly efficient random forest-based malware detection framework for Android</title><secondary-title>Neural Computing and Applications</secondary-title></titles><periodical><full-title>Neural Computing and Applications</full-title></periodical><pages>1-9</pages><keywords><keyword>Android</keyword><keyword>Malware detection</keyword><keyword>Random forest</keyword><keyword>Requested permissions</keyword><keyword>Support vector machine</keyword></keywords><dates><year>2017</year></dates><electronic-resource-num>10.1007/s00521-017-2914-y</electronic-resource-num><urls><pdf-urls><url>internal-pdf://zhu2017.pdf</url></pdf-urls></urls><abstract>Mobile phones are rapidly becoming the most widespread and popular form of communication; thus, they are also the most important attack target of malware. The amount of malware in mobile phones is increasing exponen- tially and poses a serious security threat. Google’s Android is the most popular smart phone platforms in the world and the mechanisms of permission declaration access control cannot identify the malware. In this paper, we proposed an ensemble machine learning system for the detection of malware on Android devices. More specifically, four groups of features including permissions, monitoring system events, sensitive API and permission rate are extracted to characterize each Android application (app). Then an ensemble random forest classifier is learned to detect whether an app is potentially malicious or not. The performance of our proposed method is evaluated on the actual data set using tenfold cross-validation. The experimental results demonstrate that the proposed method can achieve a highly accuracy of 89.91%. For further assessingthe performance ofourmethod,wecompareditwith the state-of-the-art support vector machine classifier. Com- parison results demonstrate that the proposed method is extremely promising and could provide a cost-effective alternative for Android malware detection.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wang, Ping</author><author>Chao, Kuo Ming</author><author>Lo, Chi Chun</author><author>Wang, Yu Shih</author></authors></contributors><titles><title>Using ontologies to perform threat analysis and develop defensive strategies for mobile security</title><secondary-title>Information Technology and Management</secondary-title></titles><periodical><full-title>Information Technology and Management</full-title></periodical><volume>18</volume><issue>1</issue><keywords><keyword>Behavior analysis</keyword><keyword>Code analysis</keyword><keyword>Mobile virus</keyword><keyword>Ontology</keyword><keyword>Threat risk analysis</keyword></keywords><dates><year>2017</year></dates><electronic-resource-num>10.1007/s10799-014-0213-1</electronic-resource-num><urls><pdf-urls><url>internal-pdf://wang2015.pdf</url></pdf-urls></urls><abstract>Existing studies on the detection of mobile malware have focused mainly on static analyses performed to examine the code-structure signature of viruses, rather than the dynamic behavioral aspects. By contrast, the unidentified behavior of new mobile viruses using the self-modification, polymorphic, and mutation techniques for variants have largely been ignored. The problem of precision regarding malware variant detection has become one of the key concerns in mobile security. Accordingly, the present study proposed a threat risk analysis model for mobile viruses, using a heuristic approach incorporating both malware behavior analysis and code analysis to generate a virus behavior ontology associated with the Protégé platform. The proposed model can not only explicitly identify an attack profile in accordance with structural signature of mobile viruses, but also overcome the uncertainty regarding the probability of an attack being successful. This model is able to achieve this by extending frequent episode rules to investigate the attack profile of a given malware, using specific event sequences associated with the sandbox technique for mobile applications (apps) and hosts. For probabilistic analysis, defense evaluation metrics for each node were used to simulate the results of an attack. The simulations focused specifically on the attack profile of a botnet to assess the threat risk. The validity of the proposed approach was demonstrated numerically by using two malware cyber-attack examples. Overall, the results presented in this paper prove that the proposed scheme offers an effective countermeasure, evaluated using a set of security metrics, for mitigating network threats by considering the interaction between the attack profiles and defense needs.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Varsha, M. V.</author><author>Vinod, P.</author><author>Dhanya, K. A.</author></authors></contributors><titles><title>Identification of malicious android app using manifest and opcode features</title><secondary-title>Journal of Computer Virology and Hacking Techniques</secondary-title></titles><periodical><full-title>Journal of Computer Virology and Hacking Techniques</full-title></periodical><pages>125-138</pages><volume>13</volume><issue>2</issue><keywords><keyword>Android malware</keyword><keyword>Classifier</keyword><keyword>Feature selection</keyword><keyword>Manifest</keyword><keyword>Meta feature</keyword><keyword>Opcode</keyword><keyword>Strings</keyword></keywords><dates><year>2017</year></dates><publisher>Springer Paris</publisher><electronic-resource-num>10.1007/s11416-016-0277-z</electronic-resource-num><urls><pdf-urls><url>internal-pdf://varsha2016.pdf</url></pdf-urls></urls><abstract>In this paper, we propose a statistical approach for smartphone malware detection. A set of features such as hardware, permission, application components, filtered intents, opcodes and strings are extracted from the samples to form a vector space model. Feature selection methods such as Entropy based Category Coverage Difference (ECCD) and Weighted Mutual Information (WI) are used to choose the prominent features. The performance of the system is analyzed using classifiers, Random Forest, Rotation Forest and Support Vector Machine (SVM). The system was evaluated on individual models as well as Meta feature space model for both malware and benign features. It was observed that the meta feature space model with malware features provide the best results for both feature selection. For ECCD, Random Forest classifier performs better [Dataset 1---0.972, Dataset 2---0.976 and Dataset 3---0.969] whereas in the case of WI, SVM gives highest F-measure [Dataset 1---0.993, Dataset 2---0.994 and Dataset 3---0.992]. From the overall analysis on the system, we conclude that the malware model outperforms it's benign counterpart and also that WI is a better feature selection technique compared to ECCD.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Spreitzenbarth, Michael</author><author>Schreck, Thomas</author><author>Echtler, Florian</author><author>Arp, Daniel</author><author>Hoffmann, Johannes</author></authors></contributors><titles><title>Mobile-Sandbox: combining static and dynamic analysis with machine-learning techniques</title><secondary-title>International Journal of Information Security</secondary-title></titles><periodical><full-title>International Journal of Information Security</full-title></periodical><pages>141-153</pages><volume>14</volume><issue>2</issue><keywords><keyword>Android</keyword><keyword>Automated analysis</keyword><keyword>Machine learning</keyword><keyword>Malware</keyword></keywords><dates><year>2015</year></dates><electronic-resource-num>10.1007/s10207-014-0250-0</electronic-resource-num><urls><pdf-urls><url>internal-pdf://spreitzenbarth2014.pdf</url></pdf-urls></urls><abstract>© 2014, Springer-Verlag Berlin Heidelberg. Smartphones in general and Android in particular are increasingly shifting into the focus of cyber criminals. For understanding the threat to security and privacy, it is important for security researchers to analyze malicious software written for these systems. The exploding number of Android malware calls for automation in the analysis. In this paper, we present Mobile-Sandbox, a system designed to automatically analyze Android applications in novel ways: First, it combines static and dynamic analysis, i.e., results of static analysis are used to guide dynamic analysis and extend coverage of executed code. Additionally, it uses specific techniques to log calls to native (i.e., “non-Java”) APIs, and last but not least it combines these results with machine-learning techniques to cluster the analyzed samples into benign and malicious ones. We evaluated the system on more than 69,000 applications from Asian third-party mobile markets and found that about 21 % of them actually use native calls in their code.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Schmidt, Aubrey Derrick</author><author>Peters, Frank</author><author>Lamour, Florian</author><author>Scheel, Christian</author><author>Çamtepe, Seyit Ahmet</author><author>Albayrak, Şahin</author></authors></contributors><titles><title>Monitoring smartphones for anomaly detection</title><secondary-title>Mobile Networks and Applications</secondary-title></titles><periodical><full-title>Mobile Networks and Applications</full-title></periodical><pages>92-106</pages><volume>14</volume><issue>1</issue><keywords><keyword>Anomaly detection</keyword><keyword>Monitoring</keyword><keyword>Smartphones</keyword></keywords><dates><year>2009</year></dates><isbn>9781595939845</isbn><electronic-resource-num>10.1007/s11036-008-0113-x</electronic-resource-num><urls><pdf-urls><url>internal-pdf://schmidt2008.pdf</url></pdf-urls></urls><abstract>In this paper we demonstrate how to monitor a smartphone running Symbian operating system and Windows Mobile in order to extract features for anom-aly detection. These features are sent to a remote server because running a complex intrusion detection system on this kind of mobile device still is not feasible due to capability and hardware limitations. We give examples on how to compute relevant features and introduce the top ten applications used by mobile phone users based on a study in 2005. The usage of these applications is recorded by a monitoring client and visualized. Addi-tionally, monitoring results of public and self-written malwares are shown. For improving monitoring client performance, Principal Component Analysis was ap-plied which lead to a decrease of about 80% of the amount of monitored features.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Xiao, Xi</author><author>Zhang, Shaofeng</author><author>Mercaldo, Francesco</author><author>Hu, Guangwu</author><author>Sangaiah, Arun Kumar</author></authors></contributors><titles><title>Android malware detection based on system call sequences and LSTM</title><secondary-title>Multimedia Tools and Applications</secondary-title></titles><periodical><full-title>Multimedia Tools and Applications</full-title></periodical><keywords><keyword>Android malware detection</keyword><keyword>System call sequences</keyword><keyword>android malware detection</keyword><keyword>deep learning</keyword><keyword>lstm</keyword><keyword>system call sequences</keyword></keywords><dates><year>2017</year></dates><publisher>Multimedia Tools and Applications</publisher><isbn>1104201751040</isbn><electronic-resource-num>10.1007/s11042-017-5104-0</electronic-resource-num><urls><pdf-urls><url>internal-pdf://36.pdf</url></pdf-urls><web-urls><url>http://link.springer.com/10.1007/s11042-017-5104-0</url></web-urls></urls><abstract>As Android-based mobile devices become increasingly popular, malware detection on Android is very crucial nowadays. In this paper, a novel detection method based on deep learning is proposed to distinguish malware from trusted applications. Considering there is some semantic information in system call sequences as the natural language, we treat one systemcall sequence as a sentence in the language and construct a classifier based on the Long Short-Term Memory (LSTM) language model. In the classifier, at first two LSTM models are trained respectively by the system call sequences from malware and those from benign applications. Then according to these models, two similarity scores are computed. Finally, the classifier determines whether the application under analysis is malicious or trusted by the greater score. Thorough experiments show that our approach can achieve high efficiency and reach high recall of 96.6% with low false positive rate of 9.3%, which is better than the other methods.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Shang, Fengjun</author><author>Li, Yalin</author><author>Deng, Xiaolin</author><author>He, Dexiang</author></authors></contributors><titles><title>Android malware detection method based on naive Bayes and permission correlation algorithm</title><secondary-title>Cluster Computing</secondary-title></titles><periodical><full-title>Cluster Computing</full-title></periodical><pages>1-12</pages><keywords><keyword>Android malware detection</keyword><keyword>Correlation coefficient</keyword><keyword>Information theory</keyword><keyword>Naive Bayes</keyword><keyword>Privilege feature</keyword></keywords><dates><year>2017</year></dates><publisher>Springer US</publisher><isbn>1058601709</isbn><electronic-resource-num>10.1007/s10586-017-0981-6</electronic-resource-num><urls><pdf-urls><url>internal-pdf://37.pdf</url></pdf-urls></urls><abstract>In order to detect Android malware more effec- tively, an Android malware detection model was proposed based on improved naive Bayes classification. Firstly, con- sidering the unknown permission that may be malicious in detection samples, and in order to improve the Android detec- tion rate, the algorithm of malware detection is proposed based on improved naive Bayes. Considering the limited training samples, limited permissions, and the newmalicious permissions in the test samples, we used the impact of the new malware permissions and training permissions as the weight. The weighted naive Bayesian algorithm improves the Android malware detection efficiency. Secondly, taking into account the detection model, we proposed a detection model of permissions and information theory based on the improved naive Bayes algorithm. We analyzed the correla- tion of the permission.Bycalculating the Pearson correlation coefficient, we determined the value of Pearson correlation coefficient r, and delete the permissions whose value r is less than the threshold ρ and get the new permission set. So, we got the improved detection model by clustering based on information theory. Finally, we detected the 1725 Android malware and 945 non malicious application of multiple data sets in the same simulation environment. The detection rate of the improved the naive Bayes algorithm is 86.54%, and the detection rate of the non-malicious application is increased to 97.59%. Based on the improved naive Bayes algorithm, the false detection rate of the improved detection model is reduced by 8.25%.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Altaher, Altyeb</author></authors></contributors><titles><title>An improved Android malware detection scheme based on an evolving hybrid neuro-fuzzy classifier (EHNFC) and permission-based features</title><secondary-title>Neural Computing and Applications</secondary-title></titles><periodical><full-title>Neural Computing and Applications</full-title></periodical><pages>1-11</pages><keywords><keyword>Android security</keyword><keyword>Evolving clustering algorithm</keyword><keyword>Evolving hybrid neuro-fuzzy classifier</keyword><keyword>Malware</keyword><keyword>Malware detection</keyword></keywords><dates><year>2016</year></dates><publisher>Springer London</publisher><electronic-resource-num>10.1007/s00521-016-2708-7</electronic-resource-num><urls><pdf-urls><url>internal-pdf://31.pdf</url></pdf-urls></urls><abstract>The increasing number of Android devices and users has been attracting the attention of different types of attackers. Malware authors create new versions of malware from previous ones by implementing code obfuscation techniques. Obfuscated malware is potentially contributed to the exponential increase in the number of generated malware variants. Detection of obfuscated malware is a continuous challenge because it can easily evade the signature-based malware detectors, and behaviour-based detectors are not able to detect them accurately. Therefore, an efficient technique for obfuscated malware detection in Android-based smartphones is needed. In the literature on Android malware classification, few malware detection approaches are designed with the capability of detecting obfuscated malware. However, these malware detection approaches were not equipped with the capacity to improve their performance by learning and evolving their malware detection rules. Based on the concept of evolving soft computing systems, this paper proposes an evolving hybrid neuro-fuzzy classifier (EHNFC) for Android malware classification using permission-based features. The pro- posed EHNFC not only has the capability of detecting obfuscated malware using fuzzy rules, but can also evolve its structure by learning new malware detection fuzzy rules to improve its detection accuracy when used in detection of more malware applications. To this end, an evolving clustering method for adapting and evolving malware detection fuzzy rules was modified to incorporate an &amp; Altyeb Altaher altypaltaher@gmail.com 1 Faculty of Computing and Information Technology in Rabigh, King Abdulaziz University, Rabigh 21911, Saudi Arabia adaptive procedure for updating the radii and centres of clustered permission-based features. This modification to the evolving clustering method enhances cluster conver- gence and generates rules that are better tailored to the input data, hence improving the classification accuracy of the proposed EHNFC. The experimental results for the proposed EHNFC show that the proposal outperforms several state-of-the-art obfuscated malware classification approaches in terms of false negative rate (0.05) and false positive rate (0.05). The results also demonstrate that the proposal detects the Android malware better than other neuro-fuzzy systems (viz., the adaptive neuro-fuzzy infer- ence system and the dynamic evolving neuro-fuzzy sys- tem) in terms of accuracy (90%).</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Lee, Jong Han</author><author>Kim, Seung Joo</author></authors></contributors><titles><title>Analysis and Security Evaluation of Security Threat on Broadcasting Service</title><secondary-title>Wireless Personal Communications</secondary-title></titles><periodical><full-title>Wireless Personal Communications</full-title></periodical><pages>4149-4169</pages><volume>95</volume><issue>4</issue><keywords><keyword>Broadcasting service</keyword><keyword>CVSS</keyword><keyword>Security</keyword><keyword>Security evaluation</keyword><keyword>Threat</keyword></keywords><dates><year>2017</year></dates><publisher>Springer US</publisher><electronic-resource-num>10.1007/s11277-017-4056-z</electronic-resource-num><urls><pdf-urls><url>internal-pdf://34.pdf</url></pdf-urls></urls><abstract>This paper defines and maps all possible threats to broadcasting services. Viewers currently use various types of broadcasting services---including cable TV, IPTV, and mobile TV, among others---and broadcast business operators are now developing the appropriate security mechanisms for each medium to safely and reliably provide broadcasting services to their audiences. Unlike mobile TV, which uses of a public network as in an over-the-top configuration, cable TV and IPTV are basically closed networks in terms of network security. However, they also link with external networks to provide additional services (bidirectional services or commerce-related services). Therefore, broadcast business operators of with various types of broadcast media are susceptible to security threats from which their broadcasting services may come to a halt or may be abused by hackers, such as with well-developed APT attacks, as well as other common external attacks. The common vulnerability scoring system for IT security is used to conduct a quantitative evaluation of the risk to security threats for broadcasting services. We also derive the results of a penetration test for the STB through the results presented with respect to a security threat. This result will help address potential security vulnerabilities in broadcasting services.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Hamon, Valentin</author></authors></contributors><titles><title>Android botnets for multi-targeted attacks</title><secondary-title>Journal of Computer Virology and Hacking Techniques</secondary-title></titles><periodical><full-title>Journal of Computer Virology and Hacking Techniques</full-title></periodical><pages>193-202</pages><volume>11</volume><issue>4</issue><keywords><keyword>Android security</keyword><keyword>Botnet</keyword><keyword>Clustering</keyword><keyword>Computer security</keyword><keyword>Industrial espionage</keyword><keyword>Malware</keyword><keyword>Mobile agents</keyword><keyword>Sat Nav</keyword><keyword>Targeted attacks</keyword><keyword>Trojan</keyword></keywords><dates><year>2015</year></dates><isbn>1569607737</isbn><electronic-resource-num>10.1007/s11416-014-0216-9</electronic-resource-num><urls><pdf-urls><url>internal-pdf://35.pdf</url></pdf-urls></urls><abstract>Today, mobile Botnets are well known in the IT security field. Whenever we talk about Botnets on mobile phones, we mostly deal with denial of service attacks. This is due to the fact that we refer to classical Botnets on computers. But mobile phones are “mobiles” by definition. Indeed, they offer a lot of information not present on personal computers. They have a lot of sensors which are interesting for attackers. Most of the time, we used to think that targeted attacks have a single target. But with mobile phones, targeting a group of people does make sense. Coupled with data collected by the Sat Nav, we could so be able to localize with a certain probability meeting points in a criminal organization. By this way of attacking, we can deduce lots of things by cross-checking information obtained on devices. Thereby, this paper will aim to show the potential offered by such attacks. Firstly, this paper will focus on localization data. Furthermore, an implementation of an Android botnet and its server side part will be presented for illustrative purposes. Besides, the major part of the source code used will be included step by step in this paper. This paper aims to be technical because the author does not want to show any theory without trying some practicals tests with real and technical constraints.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wang, Chundong</author><author>Li, Zhiyuan</author><author>Mo, Xiuliang</author><author>Yang, Hong</author><author>Zhao, Yi</author></authors></contributors><titles><title>An android malware dynamic detection method based on service call co-occurrence matrices</title><secondary-title>Annales des Telecommunications/Annals of Telecommunications</secondary-title></titles><periodical><full-title>Annales des Telecommunications/Annals of Telecommunications</full-title></periodical><pages>1-9</pages><keywords><keyword>Android</keyword><keyword>Android malware identify</keyword><keyword>Co-occurrence matrix</keyword><keyword>Machine-learning</keyword><keyword>System service call</keyword></keywords><dates><year>2017</year></dates><publisher>Annals of Telecommunications</publisher><electronic-resource-num>10.1007/s12243-017-0580-9</electronic-resource-num><urls><pdf-urls><url>internal-pdf://27.pdf</url></pdf-urls></urls><abstract>© 2017 Institut Mines-Télécom and Springer-Verlag FranceWith the market share of Android mobile devices increasing, Android has come to dominate the smartphone operating system market. It also draws the attention of malware authors and researchers. The number of Android malicious applications is constantly increasing. However, due to the limitations of static detection in code obfuscation and dynamic loading, the current research of Android malicious code detection needs to be deeply studied in dynamic detection. In this paper, a new Android malware identification method is proposed. This method extracts the feature of Android system service call sequences by using a co-occurrence matrix and uses machine-learning algorithm to classify the feature sequence and to verify whether this feature sequence can expose Android malware behaviors or not. By using 750 malware samples and 1000 benign samples, this paper has designed an experiment to evaluate this method. The results show that this method has a high detection precision rate (97.1%) in the best case and a low false-positive rate (2.1%) in the worst case based on the system service call co-occurrence matrix.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Banuri, Hammad</author><author>Alam, Masoom</author><author>Khan, Shahryar</author><author>Manzoor, Jawad</author><author>Ali, Bahar</author><author>Khan, Yasar</author><author>Yaseen, Mohsin</author><author>Tahir, Mir Nauman</author><author>Ali, Tamleek</author><author>Alam, Quratulain</author><author>Zhang, Xinwen</author></authors></contributors><titles><title>An Android runtime security policy enforcement framework</title><secondary-title>Personal and Ubiquitous Computing</secondary-title></titles><periodical><full-title>Personal and Ubiquitous Computing</full-title></periodical><pages>631-641</pages><volume>16</volume><issue>6</issue><keywords><keyword>Android security</keyword><keyword>Permission labels</keyword><keyword>Smart phone malwares</keyword></keywords><dates><year>2012</year></dates><electronic-resource-num>10.1007/s00779-011-0437-6</electronic-resource-num><urls><pdf-urls><url>internal-pdf://28.pdf</url></pdf-urls></urls><abstract>Today, smart phone’s malwares are deceptive enough to spoof itself as a legal mobile application. The front-end service of Trojans is attractive enough to deceive mobile users. Mobile users download similar malwares without knowing their illegitimate background threat. Unlike other vendors, Android is an open-source mobile operating system, and hence, it lacks a dedicated team to analyze the application code and decide its trustworthiness. We propose an augmented framework for Android that monitors the dynamic behavior of application during its execution. Our proposed architecture called Security Enhanced Android Framework (SEAF) validates the behav- ior of an application through its permissions exercising patterns. Based on the exercised permissions’ combination, the mobile user is intimated about the dangerous behavior of an application. We have implemented the proposed framework within Android software stack and ported it to device. Our initial investigation shows that our solution is practical enough to be used in the consumer market.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Nissim, Nir</author><author>Moskovitch, Robert</author><author>BarAd, Oren</author><author>Rokach, Lior</author><author>Elovici, Yuval</author></authors></contributors><titles><title>ALDROID: efficient update of Android anti-virus software using designated active learning methods</title><secondary-title>Knowledge and Information Systems</secondary-title></titles><periodical><full-title>Knowledge and Information Systems</full-title></periodical><pages>795-833</pages><volume>49</volume><issue>3</issue><keywords><keyword>Acquisition</keyword><keyword>Active learning</keyword><keyword>Android</keyword><keyword>Anti-virus</keyword><keyword>Application</keyword><keyword>Detection</keyword><keyword>Malware</keyword></keywords><dates><year>2016</year></dates><publisher>Springer London</publisher><electronic-resource-num>10.1007/s10115-016-0918-z</electronic-resource-num><urls><pdf-urls><url>internal-pdf://24.pdf</url></pdf-urls></urls><abstract>© 2016 Springer-Verlag London Many new unknown malwares aimed at compromising smartphones are created constantly. These widely used smartphones are very dependent on anti-virus solutions due to their limited resources. To update the anti-virus signature repository, anti-virus vendors must deal with vast quantities of new applications daily in order to identify new unknown malwares. Machine learning algorithms have been used to address this task, yet they must also be efficiently updated on a daily basis. To improve detection and updatability, we introduce a new framework, “ALDROID” and active learning (AL) methods on which ALDROID is based. Our methods are aimed at selecting only new informative applications (benign and especially malicious), thus reducing the labeling efforts of security experts, and enable a frequent and efficient process of enhancing the framework’s detection model and Android’s anti-virus software. Results indicate that our AL methods outperformed other solutions including the existing AL method and heuristic engine. Our AL methods acquired the largest number and percentage of new malwares, while preserving the detection models’ detection capabilities (high TPR and low FPR rates). Specifically, our methods acquired more than double the amount of new malwares acquired by the heuristic engine and 6.5 times more malwares than the existing AL method.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Chen, Wei</author><author>Gong, Peihua</author><author>Yu, Le</author><author>Yang, Geng</author></authors></contributors><titles><title>An adaptive push-styled command and control mechanism in mobile botnets</title><secondary-title>Wuhan University Journal of Natural Sciences</secondary-title></titles><periodical><full-title>Wuhan University Journal of Natural Sciences</full-title></periodical><pages>427-434</pages><volume>18</volume><issue>5</issue><keywords><keyword>Google cloud messaging (GCM)</keyword><keyword>adaptive connection</keyword><keyword>mobile botnet</keyword><keyword>push style</keyword></keywords><dates><year>2013</year></dates><isbn>1185901309526</isbn><electronic-resource-num>10.1007/s11859-013-0952-6</electronic-resource-num><urls><pdf-urls><url>internal-pdf://26.pdf</url></pdf-urls></urls><abstract>The mobile botnet, developed from the traditional PC-based botnets, has become a practical underlying trend. In this paper, we design a mobile botnet, which exploits a novel command and control (C&amp;C) strategy named Push-Styled C&amp;C. It utilizes Google cloud messaging (GCM) service as the botnet channel. Compared with traditional botnet, Push-Styled C&amp;C avoids direct communications between botmasters and bots, which makes mobile botnets more stealthy and resilient. Since mobile devices users are sensitive to battery power and traffic consumption, Push-Styled botnet also applies adaptive network connection strategy to reduce traffic consumption and cost. To prove the efficacy of our design, we implemented the prototype of Push-Style C&amp;C in Android. The experiment results show that botnet traffic can be concealed in legal GCM traffic with low traffic cost. © 2013 Wuhan University and Springer-Verlag Berlin Heidelberg.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Coskun, Vedat</author><author>Ozdenizci, Busra</author><author>Ok, Kerem</author></authors></contributors><titles><title>A survey on near field communication (NFC) technology</title><secondary-title>Wireless Personal Communications</secondary-title></titles><periodical><full-title>Wireless Personal Communications</full-title></periodical><pages>2259-2294</pages><volume>71</volume><issue>3</issue><keywords><keyword>Application development</keyword><keyword>Applications</keyword><keyword>Business</keyword><keyword>Communication essentials</keyword><keyword>Ecosystem</keyword><keyword>NFC</keyword><keyword>Near field communication</keyword><keyword>Secure element</keyword><keyword>Security</keyword><keyword>Survey</keyword></keywords><dates><year>2013</year></dates><isbn>9783642228759</isbn><electronic-resource-num>10.1007/s11277-012-0935-5</electronic-resource-num><urls><pdf-urls><url>internal-pdf://12.pdf</url></pdf-urls></urls><abstract>Near Field Communication (NFC) as a promising short range wireless communication technology facilitates mobile phone usage of billions of people throughout the world that offers diverse services ranging from payment and loyalty applications to access keys for offices and houses. Eventually NFC technology integrates all such services into one single mobile phone. NFC technology has emerged lately, and consequently not much academic source is available yet. On the contrary, due to its promising business case options, there will be an increasing amount of work to be studied in the very close future. This paper presents the concept of NFC technology in a holistic approach with different perspectives, including communication essentials with standards, ecosystem and business issues, applications, and security issues. Open research areas and further recommended studies in terms of academic and business point of view are also explored and discussed at the end of each major subject's subsection. This comprehensive survey will be a valuable guide for researchers and academicians as well as for business world interested in NFC technology. © 2012 Springer Science+Business Media New York.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Opria, Ciprian</author><author>Gavrilu, Drago</author><author>Cab˘ Au, George</author><author>Cab˘, George</author></authors></contributors><titles><title>A scalable approach for detecting plagiarized mobile applications</title><secondary-title>Knowl Inf Syst</secondary-title></titles><periodical><full-title>Knowl Inf Syst</full-title></periodical><pages>143-169</pages><volume>49</volume><keywords><keyword>Clustering</keyword><keyword>Code similarity</keyword><keyword>Plagiarism</keyword><keyword>Scalability</keyword></keywords><dates><year>2016</year></dates><electronic-resource-num>10.1007/s10115-015-0903-y</electronic-resource-num><urls><pdf-urls><url>internal-pdf://6.pdf</url></pdf-urls></urls><abstract>Plagiarism cases are quite common in mobile applications ecosystems like the Android market. An application can be decompiled, modified and repackaged with a different author name. The modifications can affect the user's privacy or even contain malicious logic. If the original application is supported by advertisements, they are usually replaced so the ad revenue will go to the repackager. Such events can cause the legitimate author damage both in reputation and financially so they need to be detected. A plagiarism detection system is proposed that can detect plagiarized applications based on the features extracted from code. Two similarity functions are given along with techniques for finding similar applications in a large collection. The main issue with this search is that it cannot be performed sequentially, by comparing a given item with every other item in the collection. The built solution will improve the search time by comparing the searched item only with those with a high probability of being similar. The greatest advantage of our approach is scalability. The system's database can be built, updated and queried in reasonable time, even when large quantities of data are involved. Our experiments were conducted on a large collection of over one million samples and managed to identify a concerning number of plagiarism cases.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Malhotra, Aashima</author><author>Bajaj, Karan</author></authors></contributors><titles><title>A hybrid pattern based text mining approach for malware detection using DBScan</title><secondary-title>CSI Transactions on ICT</secondary-title></titles><periodical><full-title>CSI Transactions on ICT</full-title></periodical><keywords><keyword>Malware,Detection,Text mining,Pattern matching,DBS</keyword><keyword>malware á detection á</keyword><keyword>text mining á pattern</keyword></keywords><dates><year>2016</year></dates><publisher>Springer India</publisher><electronic-resource-num>10.1007/s40012-016-0095-y</electronic-resource-num><urls><pdf-urls><url>internal-pdf://3.pdf</url></pdf-urls><web-urls><url>http://link.springer.com/10.1007/s40012-016-0095-y</url></web-urls></urls></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Shi, L</author><author>Liu, X</author><author>Wang, Y</author></authors></contributors><titles><title>A defense model against mobile phone malicious codes based on social computing</title><secondary-title>Wuhan University Journal of Natural Sciences</secondary-title></titles><periodical><full-title>Wuhan University Journal of Natural Sciences</full-title></periodical><pages>134-140</pages><volume>22</volume><issue>2</issue><keywords><keyword>ant colony optimization</keyword><keyword>community</keyword><keyword>malicious code</keyword><keyword>mobile phone</keyword><keyword>social computing</keyword><keyword>trust computing</keyword></keywords><dates><year>2017</year></dates><isbn>1185901712265</isbn><electronic-resource-num>10.1007/s11859-017-1226-5</electronic-resource-num><urls><pdf-urls><url>internal-pdf://1.pdf</url></pdf-urls><web-urls><url>https://www.scopus.com/inward/record.uri?eid=2-s2.0-85014916947&amp;doi=10.1007%2Fs11859-017-1226-5&amp;partnerID=40&amp;md5=a5ed553d09263225306f64d3b966652e</url></web-urls></urls></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Lee, Junwon</author><author>Cho, Jaeik</author><author>Seo, Jungtaek</author><author>Shon, Taeshik</author><author>Won, Dongho</author></authors></contributors><titles><title>A novel approach to analyzing for detecting malicious network activity using a cloud computing testbed</title><secondary-title>Mobile Networks and Applications</secondary-title></titles><periodical><full-title>Mobile Networks and Applications</full-title></periodical><pages>122-128</pages><volume>18</volume><issue>1</issue><keywords><keyword>cloud network anomaly</keyword><keyword>cloud test bed</keyword><keyword>mobile cloud</keyword></keywords><dates><year>2013</year></dates><isbn>1383-469X</isbn><electronic-resource-num>10.1007/s11036-012-0375-1</electronic-resource-num><urls><pdf-urls><url>internal-pdf://5.pdf</url></pdf-urls></urls><abstract>Issue Title: Advances in Mobile Application, Services and Mobile Cloud Computing                 Recent developments have caused the expansion of various cloud computing environments and services. Cloud computing environments have led to research in the areas of data processing, virtual environments, and access control. Information security is the most important research area for these environments security. In this study, we analyzed typical example of network testbeds, which have been used for malicious activity data collection and its subsequent analysis. Further, we propose an effective malicious network application testbed, which is based on a cloud system. We also verified the performance of our new testbed by comparing real malicious activity with the cloud-based testbed results.[PUBLICATION ABSTRACT]</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bhatia, Tarunpreet</author><author>Verma, A. K.</author></authors></contributors><titles><title>Data security in mobile cloud computing paradigm: a survey, taxonomy and open research issues</title><secondary-title>The Journal of Supercomputing</secondary-title></titles><periodical><full-title>The Journal of Supercomputing</full-title></periodical><pages>2558-2631</pages><volume>73</volume><issue>6</issue><keywords><keyword>Cloud computing</keyword><keyword>Mobile cloud computing</keyword><keyword>access control</keyword><keyword>authentication</keyword><keyword>data security</keyword></keywords><dates><year>2017</year></dates><publisher>Springer US</publisher><isbn>0920-8542, 1573-0484</isbn><electronic-resource-num>10.1007/s11227-016-1945-y</electronic-resource-num><urls><pdf-urls><url>internal-pdf://74.pdf</url></pdf-urls><web-urls><url>http://link.springer.com/10.1007/s11227-016-1945-y</url></web-urls></urls><abstract>The incessant spurt of research activities to augment capabilities of resource-constrained mobile devices by leveraging heterogeneous cloud resources has created a new research impetus called mobile cloud computing. However, this rapid relocation to the cloud has fueled security and privacy concerns as users’ data leave owner’s protection sphere and enter the cloud. Significant efforts have been devoted by academia and research community to study and build secure frameworks in cloud environment, but there exists a research gap for comprehensive study of security frameworks in mobile cloud computing environment. Therefore, we aim to conduct a comprehensive survey to analyze various cryptographic, biometric and multifactor lightweight solutions for data security in mobile cloud. This survey highlights the current security issues in mobile cloud environment and infrastructure, investigates various data security frameworks and provides a taxonomy of the state-of-the-art data security frameworks and deep insight into open research issues for ensuring security and privacy of data in mobile cloud computing platform.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Lee, Jeong Kyu</author><author>Moon, Seo Yeon</author><author>Park, Jong Hyuk</author></authors></contributors><titles><title>CloudRPS: a cloud analysis based enhanced ransomware prevention system</title><secondary-title>Journal of Supercomputing</secondary-title></titles><periodical><full-title>Journal of Supercomputing</full-title></periodical><pages>3065-3084</pages><volume>73</volume><issue>7</issue><keywords><keyword>Abnormal behavior</keyword><keyword>Cloud</keyword><keyword>Intrusion detection</keyword><keyword>Prevention system</keyword><keyword>Ransomware</keyword></keywords><dates><year>2017</year></dates><publisher>Springer US</publisher><electronic-resource-num>10.1007/s11227-016-1825-5</electronic-resource-num><urls><pdf-urls><url>internal-pdf://62.pdf</url></pdf-urls></urls><abstract>Recently, indiscriminate ransomware attacks targeting a wide range of victims for monetary gains have become a worldwide social issue. In the early years, ransomware has used e-mails as attack method. The most common spreading method was through spam mail or harmful websites. In addition, social networking sites or smartphone messages are used. Ransomware can encrypt the user's files and issues a warning message to the user and requests payment through bitcoin, which is a virtual currency that is hard to trace. It is possible to analyze ransomware but this has its limitations as new ransomware is being continuously created and disseminated. In this paper, we propose an enhanced ransomware prevention system based on abnormal behavior analysis and detection in cloud analysis system---CloudRPS. This proposed system can defend against ransomware through more in-depth prevention. It can monitors the network, file, and server in real time. Furthermore, it installs a cloud system to collect and analyze various information from the device and log information to defend against attacks. Finally, the goal of the system is to minimize the possibility of the early intrusion. And it can detect the attack quickly more to prevent at the user's system in case of the ransomware compromises.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bhatt, Arpita Jadhav</author><author>Gupta, Chetna</author></authors></contributors><titles><title>Comparison of Static and Dynamic Analyzer Tools for iOS Applications</title><secondary-title>Wireless Personal Communications</secondary-title></titles><periodical><full-title>Wireless Personal Communications</full-title></periodical><pages>1-34</pages><keywords><keyword>Cycript</keyword><keyword>Dynamic analysis</keyword><keyword>GNU debugger</keyword><keyword>Reverse engineering</keyword><keyword>iNalyzer</keyword></keywords><dates><year>2017</year></dates><publisher>Springer US</publisher><electronic-resource-num>10.1007/s11277-017-4366-1</electronic-resource-num><urls><pdf-urls><url>internal-pdf://64.pdf</url></pdf-urls></urls><abstract>Recent studies have indicated that the growing mobile platforms such as Apple’s iOS (iPhone operating system) and Google’s Android operating system are increasingly facing malware attacks. The motivation behind malware attacks is that users store private and confidential data on the Smartphone and they personalize their Smartphone by installing third party applications. Millions of third party applications are present in online stores and they may contain malicious as well as non-malicious applications. The malware that is hidden inside the third party applications steals the private and sensitive information such as GPS location, contacts from the address book, images etc. The malware may exploit user’s data from remote locations without the user’s consent. There have been many data harvesting incidents, worm attacks and malware attacks such as ikee worm attack, Dutch ransom attack that were reported in the past. It is therefore important to reverse engineer the iOS applications by using powerful tools to provide a user with necessary information about an application’s behavior. Reverse engineering can be done in two ways: static analysis and dynamic analysis. In this paper, we present static and dynamic analysis of iOS applications using various tools such as Cycript, iNalyzer and GDB. Additionally, we present the working of each tool with installation steps and demonstrate each tool with a sample application. The paper presents how a user can perform run time analysis and manipulation of application using these tools. We have also demonstrated how a user can manipulate the application’s flow by patching some code in the application and discover the vulnerable areas. In the end, we present a comparison of all the tools which is intended to provide a better insight to a user.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Karim, Ahmad</author><author>Salleh, Rosli</author><author>Shiraz, Muhammad</author><author>Shah, Syed Adeel Ali</author><author>Awan, Irfan</author><author>Anuar, Nor Badrul</author></authors></contributors><titles><title>Botnet detection techniques: review, future trends, and issues</title><secondary-title>Journal of Zhejiang University-SCIENCE C (Computers &amp; Electronics)</secondary-title></titles><periodical><full-title>Journal of Zhejiang University-SCIENCE C (Computers &amp; Electronics)</full-title></periodical><pages>943-983</pages><volume>15</volume><issue>11</issue><keywords><keyword>Anomaly detection</keyword><keyword>Attack</keyword><keyword>Botnet detection</keyword><keyword>Defense</keyword><keyword>Network security</keyword><keyword>Taxonomy</keyword></keywords><dates><year>2014</year></dates><isbn>1869-1951, 1869-196X</isbn><electronic-resource-num>10.1631/jzus.C1300242</electronic-resource-num><urls><pdf-urls><url>internal-pdf://56.pdf</url></pdf-urls></urls><abstract>In recent years, the Internet has enabled access to widespread remote services in the distributed computing environment</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Firdaus, Ahmad</author><author>Anuar, Nor Badrul</author><author>Razak, Mohd Faizal Ab</author><author>Sangaiah, Arun Kumar</author></authors></contributors><titles><title>Bio-inspired computational paradigm for feature investigation and malware detection: interactive analytics</title><secondary-title>Multimedia Tools and Applications</secondary-title></titles><periodical><full-title>Multimedia Tools and Applications</full-title></periodical><pages>1-37</pages><keywords><keyword>Android</keyword><keyword>Feature selection</keyword><keyword>Machine learning</keyword><keyword>Malware</keyword><keyword>Neural network</keyword><keyword>Static analysis</keyword></keywords><dates><year>2017</year></dates><publisher>Multimedia Tools and Applications</publisher><electronic-resource-num>10.1007/s11042-017-4586-0</electronic-resource-num><urls><pdf-urls><url>internal-pdf://54.pdf</url></pdf-urls></urls><abstract>© 2017 Springer Science+Business Media New YorkRecently, people rely on mobile devices to conduct their daily fundamental activities. Simultaneously, most of the people prefer devices with Android operating system. As the demand expands, deceitful authors develop malware to compromise Android for private and money purposes. Consequently, security analysts have to conduct static and dynamic analyses to counter malware violation. In this paper, we adopt static analysis which only requests minimal resource consumption and rapid processing. However, finding a minimum set of features in the static analysis are vital because it removes irrelevant data, reduces the runtime of machine learning detection and reduces the dimensionality of datasets. Therefore, in this paper, we investigate three categories of features, which are permissions, directory path, and telephony. This investigation considers the features frequency as well as repeatedly used in each application. Subsequently, this study evaluates the proposed features in three bio-inspired machine learning classifiers in artificial neural network (ANN) category to signify the usefulness of ANN type in uncovering unknown malware. The classifiers are multilayer perceptron (MLP), voted perceptron (VP) and radial basis function network (RBFN). Among all these three classifiers, the outstanding outcomes acquire is the MLP, which achieves 90% in accuracy and 87% in true positive rate (TPR), as well as 97% accuracy in our Bio Analyzer prediction system.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Brandt, Nikki Benecke</author><author>Stamp, Mark</author></authors></contributors><titles><title>Automating NFC message sending for good and evil</title><secondary-title>Journal of Computer Virology and Hacking Techniques</secondary-title></titles><periodical><full-title>Journal of Computer Virology and Hacking Techniques</full-title></periodical><pages>273-297</pages><volume>10</volume><issue>4</issue><keywords/><dates><year>2014</year></dates><electronic-resource-num>10.1007/s11416-014-0223-x</electronic-resource-num><urls><pdf-urls><url>internal-pdf://49.pdf</url></pdf-urls></urls><abstract>Near Field Communication (NFC) is an emerg- ing proximity wireless technology used for triggering auto- matic interactions between mobile devices. In standard NFC usage, one message is sent per device contact, then the devices must be physically separated and brought together again. In this paper, we present a mechanism for automati- cally sending multiple messages without any need to physi- cally decouple the devices. After an introduction to NFC and related security issues, we discuss the motivation for—and an implementation of—an automation framework for send- ing repeated NFC messages without any need for human interaction. Then we consider how such an automated mech- anism can be used for both a denial of service attack and as a platform for fuzz testing. We present experimental evidence on the efficacy of automated NFC as a vector for achieving these goals. We conclude with suggestions for future work and provide some overall insights.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Kim, Jang Il</author><author>Kim, Kyung Shin</author><author>Nam, Ki Won</author><author>Jung, Yong-Gyu</author></authors></contributors><titles><title>Automated malware analysis service using mobile virtual box</title><secondary-title>Journal of Service Science Research</secondary-title></titles><periodical><full-title>Journal of Service Science Research</full-title></periodical><pages>73-83</pages><volume>8</volume><issue>1</issue><keywords><keyword>malware</keyword><keyword>malware analysis</keyword><keyword>mobile virtualization</keyword><keyword>security</keyword></keywords><dates><year>2016</year></dates><electronic-resource-num>10.1007/s12927-016-0004-9</electronic-resource-num><urls><pdf-urls><url>internal-pdf://47.pdf</url></pdf-urls><web-urls><url>http://link.springer.com/10.1007/s12927-016-0004-9</url></web-urls></urls></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Blasco, Jorge</author><author>Chen, Thomas M.</author></authors></contributors><titles><title>Automated generation of colluding apps for experimental research</title><secondary-title>Journal of Computer Virology and Hacking Techniques</secondary-title></titles><periodical><full-title>Journal of Computer Virology and Hacking Techniques</full-title></periodical><pages>1-12</pages><keywords><keyword>Android</keyword><keyword>Benchmark</keyword><keyword>Collusion</keyword><keyword>Malware</keyword><keyword>Sandbox</keyword></keywords><dates><year>2017</year></dates><publisher>Springer Paris</publisher><isbn>1141601702</isbn><electronic-resource-num>10.1007/s11416-017-0296-4</electronic-resource-num><urls><pdf-urls><url>internal-pdf://46.pdf</url></pdf-urls></urls><abstract>Colluding apps bypass the security measures enforced by sandboxed operating systems such as Android. App collusion can be a real threat in cloud environments as well. Research in detecting and protecting against app collusion requires a variety of colluding apps for experimentation. Presently the number of (real or manually crafted) apps available to researchers is very limited. In this paper we propose a system called Application Collusion Engine (ACE) to automatically generate combinations of colluding and non-colluding Android apps to help researchers fairly evaluate different collusion detection and protection methods. Our initial implementation includes a variety of components that enable the system to create more than 5,000 different colluding and non-colluding app sets. ACE can be extended with more functional components to create even more colluding apps. To show the usefulness of our system, we have applied different risk evaluation and collusion detection methods to the created set of colluding apps.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Allix, Kevin</author><author>Bissyandé, Tegawendé F.</author><author>Jérome, Quentin</author><author>Klein, Jacques</author><author>State, Radu</author><author>Le Traon, Yves</author></authors></contributors><titles><title>Empirical assessment of machine learning-based malware detectors for Android: Measuring the gap between in-the-lab and in-the-wild validation scenarios</title><secondary-title>Empirical Software Engineering</secondary-title></titles><periodical><full-title>Empirical Software Engineering</full-title></periodical><pages>183-211</pages><volume>21</volume><issue>1</issue><keywords><keyword>Android</keyword><keyword>Machine learning</keyword><keyword>Malware</keyword><keyword>Ten-Fold</keyword></keywords><dates><year>2016</year></dates><electronic-resource-num>10.1007/s10664-014-9352-6</electronic-resource-num><urls><pdf-urls><url>internal-pdf://107.pdf</url></pdf-urls></urls><abstract>To address the issue of malware detection through large sets of applications, researchers have recently started to investigate the capabilities of machine-learning techniques for proposing effective approaches. So far, several promising results were recorded in the literature, many approaches being assessed with what we call in the lab validation scenarios. This paper revisits the purpose of malware detection to discuss whether such in the lab validation scenarios provide reliable indications on the performance of malware detectors in real-world settings, aka in the wild. To this end, we have devised several Machine Learning classifiers that rely on a set of features built from applications’ CFGs. We use a sizeable dataset of over 50 000 Android applications collected from sources where state-of-the art approaches have selected their data. We show that, in the lab, our approach outperforms existing machine learning-based approaches. However, this high performance does not translate in high performance in the wild. The performance gap we observed—F-measures dropping from over 0.9 in the lab to below 0.1 in the wild—raises one important question: How do state-of-the-art approaches perform in the wild?</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Narudin, Fairuz Amalina</author><author>Feizollah, Ali</author><author>Anuar, Nor Badrul</author><author>Gani, Abdullah</author></authors></contributors><titles><title>Evaluation of machine learning classifiers for mobile malware detection</title><secondary-title>Soft Computing</secondary-title></titles><periodical><full-title>Soft Computing</full-title></periodical><pages>343-357</pages><volume>20</volume><issue>1</issue><keywords><keyword>Android malware detection</keyword><keyword>Anomaly based</keyword><keyword>Intrusion detection system</keyword><keyword>Machine learning</keyword><keyword>Mobile device</keyword></keywords><dates><year>2016</year></dates><isbn>1432-7643</isbn><electronic-resource-num>10.1007/s00500-014-1511-6</electronic-resource-num><urls><pdf-urls><url>internal-pdf://110.pdf</url></pdf-urls></urls><abstract>Mobile devices have become a significant part of people’s lives, leading to an increasing number of users involved with such technology. The rising number of users invites hackers to generate malicious applications. Besides, the security of sensitive data available on mobile devices is taken lightly. Relying on currently developed approaches is not sufficient, given that intelligent malware keeps modifying rapidly and as a result becomes more difficult to detect. In this paper, we propose an alternative solution to evaluating malware detection using the anomaly-based approach with machine learning classifiers. Among the various network traffic features, the four categories selected are basic information, content based, time based and connection based. The evaluation utilizes two datasets: public (i.e. MalGenome) and private (i.e. self-collected). Based on the evaluation results, both the Bayes network and random forest classifiers produced more accurate readings, with a 99.97 % true-positive rate (TPR) as opposed to the multi-layer perceptron with only 93.03 % on the MalGenome dataset. However, this experiment revealed that the k-nearest neighbor classifier efficiently detected the latest Android malware with an 84.57 % true-positive rate higher than other classifiers.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Azmoodeh, Amin; Dehghantanha, Ali; Conti, Mauro; Choo, Kim Kwang Raymond</author></authors></contributors><titles><title>Detecting Crypto Ransomware in IoT Networks Based On Energy Consumption Footprint</title><secondary-title>Journal of Ambient Intelligence and Humanized Computing</secondary-title></titles><periodical><full-title>Journal of Ambient Intelligence and Humanized Computing</full-title></periodical><pages>0</pages><volume>0</volume><issue>0</issue><keywords><keyword>Ransomware detection,Power consumption,Internet of</keyword><keyword>internet of things security</keyword><keyword>machine learning</keyword><keyword>malware</keyword><keyword>power consumption</keyword><keyword>ransomware detection</keyword></keywords><dates><year>2017</year></dates><publisher>Springer Berlin Heidelberg</publisher><isbn>0123456789</isbn><electronic-resource-num>10.1007/s12652-017-0558-5</electronic-resource-num><urls><pdf-urls><url>internal-pdf://89.pdf</url></pdf-urls></urls></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Kim, Daeyoung</author><author>Gokhale, Amruta</author><author>Ganapathy, Vinod</author><author>Srivastava, Abhinav</author></authors></contributors><titles><title>Detecting plagiarized mobile apps using API birthmarks</title><secondary-title>Automated Software Engineering</secondary-title></titles><periodical><full-title>Automated Software Engineering</full-title></periodical><pages>591-618</pages><volume>23</volume><issue>4</issue><keywords><keyword>API birthmarks</keyword><keyword>Mobile apps</keyword><keyword>Plagiarism</keyword></keywords><dates><year>2016</year></dates><publisher>Springer US</publisher><electronic-resource-num>10.1007/s10515-015-0182-6</electronic-resource-num><urls><pdf-urls><url>internal-pdf://91.pdf</url></pdf-urls></urls><abstract>This paper addresses the problem of detecting plagiarized mobile apps.\nPlagiarism is the practice of building mobile apps by reusing code from\nother apps without the consent of the corresponding app developers.\nRecent studies on third-party app markets have suggested that\nplagiarized apps are an important vehicle for malware delivery on mobile\nphones. Malware authors repackage official versions of apps with\nmalicious functionality, and distribute them for free via these\nthird-party app markets. An effective technique to detect app plagiarism\ncan therefore help identify malicious apps. Code plagiarism has long\nbeen a problem and a number of code similarity detectors have been\ndeveloped over the years to detect plagiarism. In this paper we show\nthat obfuscation techniques can be used to easily defeat similarity\ndetectors that rely solely on statically scanning the code of an app. We\npropose a dynamic technique to detect plagiarized apps that works by\nobserving the interaction of an app with the underlying mobile platform\nvia its API invocations. We propose API birthmarks to characterize\nunique app behaviors, and develop a robust plagiarism detection tool\nusing API birthmarks.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Nauman, Mohammad</author><author>Tanveer, Tamleek Ali</author><author>Khan, Sohail</author><author>Syed, Toqeer Ali</author></authors></contributors><titles><title>Deep neural architectures for large scale android malware analysis</title><secondary-title>Cluster Computing</secondary-title></titles><periodical><full-title>Cluster Computing</full-title></periodical><pages>1-20</pages><keywords><keyword>Android</keyword><keyword>Bayesian machine learning</keyword><keyword>Deep neural networks</keyword><keyword>Machine learning</keyword><keyword>Malware analysis</keyword></keywords><dates><year>2017</year></dates><publisher>Springer US</publisher><isbn>1058601709</isbn><electronic-resource-num>10.1007/s10586-017-0944-y</electronic-resource-num><urls><pdf-urls><url>internal-pdf://82.pdf</url></pdf-urls></urls></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Jarabek, Chris</author><author>Barrera, David</author><author>Aycock, John</author></authors></contributors><titles><title>ThinAV: Truly Lightweight Mobile Cloud-based Anti-malware</title><secondary-title>Proceedings of the 28th Annual Computer Security Applications Conference on - ACSAC '12</secondary-title></titles><periodical><full-title>Proceedings of the 28th Annual Computer Security Applications Conference on - ACSAC '12</full-title></periodical><pages>209</pages><keywords><keyword>Android</keyword><keyword>anti-virus</keyword><keyword>cloud computing</keyword><keyword>malware</keyword></keywords><dates><year>2012</year></dates><isbn>9781450313124</isbn><electronic-resource-num>10.1145/2420950.2420983</electronic-resource-num><urls><pdf-urls><url>internal-pdf://1cb1cad927bb9f3bbac2f72815a204399c14.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2420950.2420983</url></web-urls></urls><abstract>This paper introduces ThinAV, an anti-malware system for Android that uses pre-existing web-based file scanning ser- vices for malware detection. The goal in developing Thi- nAV was to assess the feasibility of providing real-time anti- malware scanning over a wide area network where resource limitation is a factor. As a result, our research provides a necessary counterpoint to many of the big-budget, resource- intensive idealized solutions that have been suggested in the area of cloud-based security. The evaluation of ThinAV shows that it functions well over a wide area network, re- sulting in a system which is highly practical for providing anti-malware security on smartphones</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Alazab, Moutaz</author><author>Monsamy, Veelasha</author><author>Batten, Lynn</author><author>Tian, Ronghua</author><author>Lantz, Patrik</author></authors></contributors><titles><title>Analysis of malicious and benign android applications</title><secondary-title>Proceedings - 32nd IEEE International Conference on Distributed Computing Systems Workshops, ICDCSW 2012</secondary-title></titles><periodical><full-title>Proceedings - 32nd IEEE International Conference on Distributed Computing Systems Workshops, ICDCSW 2012</full-title></periodical><pages>608-616</pages><keywords><keyword>Android</keyword><keyword>Behavior graph</keyword><keyword>Droidbox</keyword><keyword>Dynamic</keyword><keyword>Mobile malware</keyword><keyword>Treemap</keyword></keywords><dates><year>2012</year></dates><isbn>978-1-4673-1423-7</isbn><electronic-resource-num>10.1109/ICDCSW.2012.13</electronic-resource-num><urls><pdf-urls><url>internal-pdf://18c584384256a119d637c302d80981715a79.pdf</url></pdf-urls></urls><abstract>Since its establishment, the Android applications market has been infected by a proliferation of malicious applications. Recent studies show that rogue developers are injecting malware into legitimate market applications which are then installed on open source sites for consumer uptake. Often, applications are infected several times. In this paper, we investigate the behavior of malicious Android applications, we present a simple and effective way to safely execute and analyze them. As part of this analysis, we use the Android application sandbox Droidbox to generate behavioral graphs for each sample and these provide the basis of the development of patterns to aid in identifying it. As a result, we are able to determine if family names have been correctly assigned by current anti-virus vendors. Our results indicate that the traditional anti-virus mechanisms are not able to correctly identify malicious Android applications.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Xu, Wei</author><author>Zhang, Fangfang</author><author>Zhu, Sencun</author></authors></contributors><titles><title>Permlyzer: Analyzing permission usage in Android applications</title><secondary-title>2013 IEEE 24th International Symposium on Software Reliability Engineering, ISSRE 2013</secondary-title></titles><periodical><full-title>2013 IEEE 24th International Symposium on Software Reliability Engineering, ISSRE 2013</full-title></periodical><pages>400-410</pages><keywords/><dates><year>2013</year></dates><isbn>9781479923663</isbn><electronic-resource-num>10.1109/ISSRE.2013.6698893</electronic-resource-num><urls><pdf-urls><url>internal-pdf://9d177093826fe6751a74954c4bca53130a8b (1).pdf</url></pdf-urls></urls><abstract>As one of the most popular mobile platforms, the Android system implements an install-time permission mechanism to provide users with an opportunity to deny potential risky permissions requested by an application. In order for both users and application vendors to make informed decisions, we designed and built Permlyzer, a general-purpose framework to automatically analyze the uses of requested permissions in Android applications. Permlyzer leverages the combination of runtime analysis and static examination to perform an accurate and in-depth analysis. The call stack-based analysis in Permlyzer can provide fine-grained information of the permission uses from various aspects include location, cause and purpose. More importantly, Permlyzer can automatically explore the functionality of an application and analyze the permission uses. Our evaluation using 51 malware/spyware families and over 110,000 Android applications demonstrates that Permlyzer can provide detailed permission use analysis and discover the characteristics of the permission uses in both benign and malicious applications.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>You, Ilsun</author><author>Yim, Kangbin</author></authors></contributors><titles><title>Malware obfuscation techniques: A brief survey</title><secondary-title>Proceedings - 2010 International Conference on Broadband, Wireless Computing Communication and Applications, BWCCA 2010</secondary-title></titles><periodical><full-title>Proceedings - 2010 International Conference on Broadband, Wireless Computing Communication and Applications, BWCCA 2010</full-title></periodical><pages>297-300</pages><keywords><keyword>Malware</keyword><keyword>Metamorphic</keyword><keyword>Obfuscation</keyword><keyword>Polymorphic</keyword></keywords><dates><year>2010</year></dates><isbn>9780769542362</isbn><electronic-resource-num>10.1109/BWCCA.2010.85</electronic-resource-num><urls><pdf-urls><url>internal-pdf://3804edf3e86218d15868269a355dd3501c0f.pdf</url></pdf-urls></urls><abstract>As the obfuscation is widely used by malware writers to evade antivirus scanners, so it becomes important to analyze how this technique is applied to malwares. This paper explores the malware obfuscation techniques while reviewing the encrypted, oligomorphic, polymorphic and metamorphic malwares which are able to avoid detection. Moreover, we discuss the future trends on the malware obfuscation techniques.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Shastry, Abhijith</author><author>Kantarcioglu, Murat</author><author>Zhou, Yan</author><author>Thuraisingham, Bhavani</author></authors></contributors><titles><title>Randomizing Smartphone Malware Profiles against Statistical Mining Techniques</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>239-254</pages><volume>7371 LNCS</volume><keywords/><dates><year>2012</year></dates><isbn>9783642315398</isbn><electronic-resource-num>10.1007/978-3-642-31540-4_18</electronic-resource-num><urls><pdf-urls><url>internal-pdf://1107a8efe3881c84a15db593ac80547263cc.pdf</url></pdf-urls></urls><abstract>The growing use of smartphones opens up new opportunities for malware activities such as eavesdropping on phone calls, reading e-mail and call-logs, and tracking callers' locations. Statistical data mining techniques have been shown to be applicable to detect smartphone malware. In this paper, we demonstrate that statistical mining techniques are prone to attacks that lead to random smartphone malware behavior. We show that with randomized profiles, statistical mining techniques can be easily foiled. Six in-house proof-of-concept malware programs are developed on the Android platform for this study. The malware programs are designed to perform privacy intrusion, information theft, and denial of service attacks. By simulating and tuning the frequency and interval of attacks, we aim to answer the following questions: 1) Can statistical mining algorithms detect smartphone malware by monitoring the statistics of smartphone usage? 2) Are data mining algorithms robust against malware with random profiles? 3) Can simple consolidation of random profiles over a fixed time frame prepare a higher quality data source for existing algorithms? © 2012 IFIP International Federation for Information Processing.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Eder, Thomas</author><author>Rodler, Michael</author><author>Vymazal, Dieter</author><author>Zeilinger, Markus</author></authors></contributors><titles><title>ANANAS - A framework for analyzing Android Applications</title><secondary-title>Proceedings - 2013 International Conference on Availability, Reliability and Security, ARES 2013</secondary-title></titles><periodical><full-title>Proceedings - 2013 International Conference on Availability, Reliability and Security, ARES 2013</full-title></periodical><pages>711-719</pages><keywords><keyword>Android malware</keyword><keyword>Automated malware analysis</keyword><keyword>Smartphone security</keyword></keywords><dates><year>2013</year></dates><isbn>9780769550084</isbn><electronic-resource-num>10.1109/ARES.2013.93</electronic-resource-num><urls><pdf-urls><url>internal-pdf://71a433129e0519ff1f3c21a16ce12cd0277a.pdf</url></pdf-urls></urls><abstract>Android is an open software platform for mobile devices with a large market share in the smartphone sector. The openness of the system as well as its wide adoption lead to an increasing amount of malware developed for this platform. ANANAS is an expandable and modular framework for analyzing Android applications. It takes care of common needs for dynamic malware analysis and provides an interface for the development of plugins. Adaptability and expandability have been main design goals during the development process. An abstraction layer for simple user interaction and phone event simulation is also part of the framework. It allows an analyst to script the required user simulation or phone events on demand or adjust the simulation to his needs. Six plugins have been developed for ANANAS. They represent well known techniques for malware analysis, such as system call hooking and network traffic analysis. The focus clearly lies on dynamic analysis, as five of the six plugins are dynamic analysis methods.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Tesfay, Welderufael Berhane</author><author>Booth, Todd</author><author>Andersson, Karl</author></authors></contributors><titles><title>Reputation based security model for android applications</title><secondary-title>Proc. of the 11th IEEE Int. Conference on Trust, Security and Privacy in Computing and Communications, TrustCom-2012 - 11th IEEE Int. Conference on Ubiquitous Computing and Communications, IUCC-2012</secondary-title></titles><periodical><full-title>Proc. of the 11th IEEE Int. Conference on Trust, Security and Privacy in Computing and Communications, TrustCom-2012 - 11th IEEE Int. Conference on Ubiquitous Computing and Communications, IUCC-2012</full-title></periodical><pages>896-901</pages><keywords><keyword>Android OS</keyword><keyword>Inter Process Communication</keyword><keyword>Reputation based security</keyword><keyword>Smartphones</keyword></keywords><dates><year>2012</year></dates><isbn>9780769547459</isbn><electronic-resource-num>10.1109/TrustCom.2012.236</electronic-resource-num><urls><pdf-urls><url>internal-pdf://85d8c6719cff41b76f571c6796ebc111e19a.pdf</url></pdf-urls></urls><abstract>The market for smart phones has been booming in the past few years. There are now over 400,000 applications on the Android market. Over 10 billion Android applications have been downloaded from the Android market. Due to the Android popularity, there are now a large number of malicious vendors targeting the platform. Many honest end users are being successfully hacked on a regular basis. In this work, a cloud based reputation security model has been proposed as a solution which greatly mitigates the malicious attacks targeting the Android market. Our security solution takes advantage of the fact that each application in the android platform is assigned a unique user id (UID). Our solution stores the reputation of Android applications in an anti-malware providers' cloud (AM Cloud). The experimental results witness that the proposed model could well identify the reputation index of a given application and hence its potential of being risky or not.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Vidas, Timothy</author><author>Christin, Nicolas</author></authors></contributors><titles><title>Sweetening Android Lemon Markets: Measuring and Combating Malware in Application Marketplaces</title><secondary-title>CODASPY '13 (3rd ACM conference on Data and Application Security and Privac)</secondary-title></titles><periodical><full-title>CODASPY '13 (3rd ACM conference on Data and Application Security and Privac)</full-title></periodical><pages>197-207</pages><keywords><keyword>android</keyword><keyword>malware</keyword><keyword>software marketplace</keyword></keywords><dates><year>2013</year></dates><isbn>9781450318907</isbn><electronic-resource-num>10.1145/2435349.2435378</electronic-resource-num><urls><pdf-urls><url>internal-pdf://9600aafaf64ed03ecfb569fefa406adf7d5b.pdf</url></pdf-urls></urls><abstract>Application marketplaces are the main software distribution mechanism for modern mobile devices but are also emerging as a viable alternative to brick-and-mortar stores for personal computers. While most application marketplaces require applications to be cryptographically signed by their developers, in Android marketplaces, self-signed certificates are common, thereby offering very limited authentication properties. As a result, there have been reports of malware being distributed through application &quot;repackaging.&quot; We provide a quantitative assessment of this phenomenon by collecting 41,057 applications from 194 alternative Android application markets in October 2011, in addition to a sample of 35,423 applications from the official Android market, Google Play. We observe that certain alternative markets almost exclusively distribute repackaged applications containing malware. To remedy this situation we propose a simple verification protocol, and discuss a proofof- concept implementation, AppIntegrity. AppIntegrity strengthens the authentication properties offered in application marketplaces, thereby making it more difficult for miscreants to repackage apps, while presenting very little computational or communication overhead, and being deployable without requiring significant changes to the Android platform.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Liang, Shuying</author><author>Might, Matthew</author><author>Van Horn, David</author></authors></contributors><titles><title>AnaDroid: Malware analysis of Android with user-supplied predicates</title><secondary-title>Electronic Notes in Theoretical Computer Science</secondary-title></titles><periodical><full-title>Electronic Notes in Theoretical Computer Science</full-title></periodical><pages>3-14</pages><volume>311</volume><keywords><keyword>human analysis</keyword><keyword>malware detection</keyword><keyword>static analysis</keyword></keywords><dates><year>2015</year></dates><electronic-resource-num>10.1016/j.entcs.2015.02.002</electronic-resource-num><urls><pdf-urls><url>internal-pdf://3860bcb4123c1a1b19281e72cca9cebb7f8a.pdf</url></pdf-urls></urls><abstract>Today's mobile platforms provide only coarse-grained permissions to users with regard to how third-party applications use sensitive private data. Unfortunately, it is easy to disguise malware within the boundaries of legitimately-granted permissions. For instance, granting access to &quot;contacts&quot; and &quot;internet&quot; may be necessary for a text-messaging application to function, even though the user does not want contacts transmitted over the internet. To understand fine-grained application use of permissions, we need to statically analyze their behavior. Even then, malware detection faces three hurdles: (1) analyses may be prohibitively expensive, (2) automated analyses can only find behaviors that they are designed to find, and (3) the maliciousness of any given behavior is application-dependent and subject to human judgment. To remedy these issues, we propose semantic-based program analysis, with a human in the loop as an alternative approach to malware detection. In particular, our analysis allows analyst-crafted semantic predicates to search and filter analysis results. Human-oriented semantic-based program analysis can systematically, quickly and concisely characterize the behaviors of mobile applications. We describe a tool that provides analysts with a library of the semantic predicates and the ability to dynamically trade speed and precision. It also provides analysts the ability to statically inspect details of every suspicious state of (abstract) execution in order to make a ruling as to whether or not the behavior is truly malicious with respect to the intent of the application. In addition, permission and profiling reports are generated to aid analysts in identifying common malicious behaviors.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhu, Tian-tian</author><author>Lan, M A N</author></authors></contributors><titles><title>Proceedings of the 2013 International Conference on Machine Learning and Cybernetics , Tianjin , 14-17 July , 2013 MEASURING SHORT TEXT SEMANTIC SIMILARITY USING MULTIPLE Proceedings of the 2013 International Conference on Machine Learning and Cybernetics</title></titles><periodical/><pages>14-17</pages><keywords><keyword>semantic similarity</keyword><keyword>short text</keyword><keyword>support vector regression</keyword></keywords><dates><year>2013</year></dates><isbn>9781479902606</isbn><urls><pdf-urls><url>internal-pdf://a2b6ff937144c8ce4812f68bd3978391e1f3 (1).pdf</url></pdf-urls></urls></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sanz, Borja</author><author>Santos, Igor</author><author>Laorden, Carlos</author><author>Ugarte-Pedrero, Xabier</author><author>Bringas, Pablo Garcia</author></authors></contributors><titles><title>On the automatic categorisation of android applications</title><secondary-title>2012 IEEE Consumer Communications and Networking Conference, CCNC'2012</secondary-title></titles><periodical><full-title>2012 IEEE Consumer Communications and Networking Conference, CCNC'2012</full-title></periodical><pages>149-153</pages><keywords/><dates><year>2012</year></dates><isbn>9781457720710</isbn><electronic-resource-num>10.1109/CCNC.2012.6181075</electronic-resource-num><urls><pdf-urls><url>internal-pdf://abd7dc6dacbc8dd97f23978656f06f021ec2.pdf</url></pdf-urls></urls><abstract>The presence of mobile devices has increased in our lives offering almost the same functionality as a personal computer. Android devices have appeared lately and, since then, the number of applications available for this operating system have increased exponentially. Google already has its Android Market where applications are offered and, as happens with every popular media, is prone to misuse. A malware writer may insert a malicious application into this market without being noticed. Indeed, there are already several cases of Android malware within the Android Market. Therefore, an approach that can automatically characterise the different types of applications can be helpful for both organising the Android Market and detecting fraudulent or malicious applications. In this paper, we propose a new method for categorising Android applications through machine-learning techniques. To represent each application, our method extracts different feature sets: (i) the frequency of occurrence of the printable strings, (ii) the different permissions of the application itself and (iii) the permissions of the application extracted from the Android Market. We evaluate this approach of automatically categorisation of Android applications and show that achieves a high performance.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Lee, Ht</author><author>Park, Minkyu</author><author>Cho, Sj</author></authors></contributors><titles><title>Detection and prevention of LeNa Malware on Android</title><secondary-title>Journal of Internet Services and Information Security ( …</secondary-title></titles><periodical><full-title>Journal of Internet Services and Information Security ( …</full-title></periodical><pages>63-71</pages><issue>0</issue><keywords><keyword>android</keyword><keyword>lena</keyword><keyword>malware</keyword><keyword>root privilege</keyword><keyword>rooting</keyword></keywords><dates><year>2013</year></dates><urls><pdf-urls><url>internal-pdf://db0e5fbce4f945b4c4d1488dd41c40eb191a.pdf</url></pdf-urls><web-urls><url>http://isyou.info/jisis/vol3/no34/jisis-2013-vol3-no34-06.pdf</url></web-urls></urls><abstract>Smartphones contain security-sensitive information of a user such as contacts, SMS, photos, and GPS information. Because smartphones are always turned on and ready to connect to the Internet, that sensitive information is in danger of leakage. Various kinds of malware are more and more attacking smartphones, especially Android phones. We propose a scheme that protects Android phones against one of them, called LeNa. LeNa infects rooted Android phones and periodically leaks sensitive information of the phone. LeNa also dominates the system and makes the phone a zombie which can perform Distributed Denial of Service (DDoS) attack. The proposed scheme checks whether a process is allowed to execute a requesting operation even after the process have acquired the root privilege. This scheme can also protect smartphones from malware targeted for rooted phones.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Kwon, Bum Jun</author><author>Mondal, Jayanta</author><author>Jang, Jiyong</author><author>Bilge, Leyla</author><author>Dumitras, Tudor</author></authors></contributors><titles><title>The Dropper Effect</title><secondary-title>Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security - CCS '15</secondary-title></titles><periodical><full-title>Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security - CCS '15</full-title></periodical><pages>1118-1129</pages><keywords><keyword>downloader graph</keyword><keyword>early detection</keyword><keyword>malware classification</keyword></keywords><dates><year>2015</year></dates><isbn>9781450338325</isbn><electronic-resource-num>10.1145/2810103.2813724</electronic-resource-num><urls><pdf-urls><url>internal-pdf://d802446d9c83bc40d058cffb78b1c506658d.pdf</url></pdf-urls><web-urls><url>http://doi.acm.org/10.1145/2810103.2813724%0Ahttp://dl.acm.org/citation.cfm?doid=2810103.2813724</url></web-urls></urls></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Schmidt, Aubrey Derrick</author><author>Schmidt, Hans Gunther</author><author>Batyuk, Leonid</author><author>Clausen, Jan Hendrik</author><author>Camtepe, Seyit Ahmet</author><author>Albayrak, Sahin</author><author>Yildizli, Can</author></authors></contributors><titles><title>Smartphone malware evolution revisited: Android next target?</title><secondary-title>2009 4th International Conference on Malicious and Unwanted Software, MALWARE 2009</secondary-title></titles><periodical><full-title>2009 4th International Conference on Malicious and Unwanted Software, MALWARE 2009</full-title></periodical><pages>1-7</pages><keywords/><dates><year>2009</year></dates><isbn>9781424457878</isbn><accession-num>17383905</accession-num><electronic-resource-num>10.1109/MALWARE.2009.5403026</electronic-resource-num><urls><pdf-urls><url>internal-pdf://d647520bb3255d6552246677b9fc3dd0d80b.pdf</url></pdf-urls></urls><abstract>Smartphones started being targets for malware in June 2004 while malware count increased steadily until the introduction of a mandatory application signing mechanism for Symbian OS in 2006. From this point on, only few news could be read on this topic. Even despite of new emerging smartphone platforms, e.g. android and iPhone, malware writers seemed to lose interest in writing malware for smartphones giving users an unappropriate feeling of safety. In this paper, we revisit smartphone malware evolution for completing the appearance list until end of 2008. For contributing to smartphone malware research, we continue this list by adding descriptions on possible techniques for creating the first malware(s) for Android platform. Our approach involves usage of undocumented Android functions enabling us to execute native Linux application even on retail Android devices. This can be exploited to create malicious Linux applications and daemons using various methods to attack a device. In this manner, we also show that it is possible to bypass the Android permission system by using native Linux applications.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhao, Min</author><author>Zhang, Tao</author><author>Wang, Jinshuang</author><author>Yuan, Zhijian</author></authors></contributors><titles><title>A smartphone malware detection framework based on artificial immunology</title><secondary-title>Journal of Networks</secondary-title></titles><periodical><full-title>Journal of Networks</full-title></periodical><pages>469-476</pages><volume>8</volume><issue>2</issue><keywords><keyword>Affirmation selection</keyword><keyword>Artificial immune</keyword><keyword>Malware</keyword><keyword>Smartphone</keyword></keywords><dates><year>2013</year></dates><electronic-resource-num>10.4304/jnw.8.2.469-476</electronic-resource-num><urls><pdf-urls><url>internal-pdf://c401af70c12987f3b6326ce51964538b2107.pdf</url></pdf-urls></urls></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Al-Haiqi, Ahmed</author><author>Ismail, Mahamod</author><author>Nordin, Rosdiadee</author></authors></contributors><titles><title>A New Sensors-Based Covert Channel on Android</title><secondary-title>Scientific World Journal</secondary-title></titles><periodical><full-title>Scientific World Journal</full-title></periodical><volume>2014</volume><keywords/><dates><year>2014</year></dates><publisher>Hindawi Publishing Corporation</publisher><electronic-resource-num>10.1155/2014/969628</electronic-resource-num><urls><pdf-urls><url>internal-pdf://bda0b256f83e1bd365ebd233418eec7e86a5.pdf</url></pdf-urls></urls><abstract>Covert channels are not new in computing systems, and have been studied since their first definition four decades ago. New platforms invoke thorough investigations to assess their security. Now is the time for Android platform to analyze its security model, in particular the two key principles: process-isolation and the permissions system. Aside from all sorts of malware, one threat proved intractable by current protection solutions, that is, collusion attacks involving two applications communicating over covert channels. Still no universal solution can countermeasure this sort of attack unless the covert channels are known. This paper is an attempt to reveal a new covert channel, not only being specific to smartphones, but also exploiting an unusual resource as a vehicle to carry covert information: sensors data. Accelerometers generate signals that reflect user motions, and malware applications can apparently only read their data. However, if the vibration motor on the device is used properly, programmatically produced vibration patterns can encode stolen data and hence an application can cause discernible effects on acceleration data to be received and decoded by another application. Our evaluations confirmed a real threat where strings of tens of characters could be transmitted errorless if the throughput is reduced to around 2.5&amp;#x2013;5&amp;#x2009;bps. The proposed covert channel is very stealthy as no unusual permissions are required and there is no explicit communication between the colluding applications.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bickford, Jeffrey</author><author>Lagar-Cavilla, H. Andrés</author><author>Varshavsky, Alexander</author><author>Ganapathy, Vinod</author><author>Iftode, Liviu</author></authors></contributors><titles><title>Security versus energy tradeoffs in host-based mobile malware detection</title><secondary-title>Proceedings of the 9th international conference on Mobile systems, applications, and services - MobiSys '11</secondary-title></titles><periodical><full-title>Proceedings of the 9th international conference on Mobile systems, applications, and services - MobiSys '11</full-title></periodical><pages>225</pages><keywords><keyword>energy</keyword><keyword>mobile malware</keyword><keyword>rootkits</keyword><keyword>security</keyword></keywords><dates><year>2011</year></dates><isbn>9781450306430</isbn><electronic-resource-num>10.1145/1999995.2000017</electronic-resource-num><urls><pdf-urls><url>internal-pdf://d25f5b3e5b2297ae741c1e4396b6482ba4e1.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=1999995.2000017%5Cnhttp://portal.acm.org/citation.cfm?doid=1999995.2000017%5Cnhttp://dl.acm.org/citation.cfm?id=1999995.2000017%5Cnhttp://portal.acm.org/citation.cfm?doid=1999995.2000017</url></web-urls></urls><abstract>The rapid growth of mobile malware necessitates the presence of robust malware detectors on mobile devices. However, running malware detectors on mobile devices may drain their battery, causing users to disable these protection mechanisms to save power. This paper studies the security versus energy tradeoffs for a particularly challenging class of malware detectors, namely rootkit detectors. We investigate the security versus energy tradeoffs along two axes: attack surface and malware scanning frequency, for both code and data based rootkit detectors. Our findings, based on a real implementation on a mobile handheld device, reveal that protecting against code-driven attacks is relatively cheap, while protecting against all data-driven attacks is prohibitively expensive. Based on our findings, we determine a sweet spot in the security versus energy tradeoff, called the balanced profile, which protects a mobile device against a vast majority of known attacks, while consuming a limited amount of extra battery power.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Johnson, Ryan</author><author>Elsabagh, Mohamed</author><author>Stavrou, Angelos</author></authors></contributors><titles><title>Why software DoS is hard to fix: Denying access in embedded android platforms</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>193-211</pages><volume>9696</volume><keywords><keyword>Android</keyword><keyword>Dos attack</keyword><keyword>Dos defense</keyword><keyword>Mobile security</keyword></keywords><dates><year>2016</year></dates><isbn>9783319395548</isbn><electronic-resource-num>10.1007/978-3-319-39555-5_11</electronic-resource-num><urls><pdf-urls><url>internal-pdf://0b0e060f8bb96438e45e32b8606c90739652.pdf</url></pdf-urls></urls><abstract>A new class of software Denial of Service (DoS) attacks against Android platforms was recently discovered, where the attacks can force the victim device unresponsive, target and terminate other applications on the device, and continuously soft reboot the device [26]. After Google was informed of these DoS attacks, their attempt to resolve the problem did not adequately address the fundamental underlying attack principles. In this paper, we show that engineering software DoS defenses is challenging, especially for embedded and resource-constrained devices. To support our findings, we detail a revised DoS attack strategy for the latest version of Android. For our experimental evaluation, we demonstrate that the new class of DoS attacks are even more damaging to embedded Android devices. As part of our proof-of-concept attacks, we were able to render the Sony Bravia XBR-43X830C Android TV and the Amazon Fire TV Stick 1st generation devices permanently unusable. In addition, other devices, including the Moto 360 1st generation smartwatch, required flashing firmware images, whereas the Nvidia Shield Android TV and the Amazon Fire 7&quot; Tablet required a factory reset to recover. Our attack is applicable to most Android devices and requires manual intervention to attempt to recover the device. The proposed attack strategy is more debilitating to devices that do not provide means for the end-user to easily access safe mode, recovery mode, or the ability flash firmware images. To mitigate the attack, we created an open-source defense application that has a 100 % prevention rate after a single soft reboot of the device while incurring less than 1.6 % performance overhead.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>May, Michael J.</author><author>Bhargavan, Karthikeyan</author></authors></contributors><titles><title>Towards unified authorization for Android</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>42-57</pages><volume>7781 LNCS</volume><keywords/><dates><year>2013</year></dates><isbn>9783642365621</isbn><electronic-resource-num>10.1007/978-3-642-36563-8_4</electronic-resource-num><urls><pdf-urls><url>internal-pdf://f6d60e70d6b2d5a77503762838461fb02711.pdf</url></pdf-urls></urls></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Huang, Hsien De</author><author>Lee, Chang Shing</author><author>Hagras, Hani</author><author>Kao, Hung Yu</author></authors></contributors><titles><title>TWMAN+: A type-2 fuzzy ontology model for malware behavior analysis</title><secondary-title>Conference Proceedings - IEEE International Conference on Systems, Man and Cybernetics</secondary-title></titles><periodical><full-title>Conference Proceedings - IEEE International Conference on Systems, Man and Cybernetics</full-title></periodical><pages>2821-2826</pages><keywords><keyword>fuzzy ontology</keyword><keyword>interval type-2 fuzzy set</keyword><keyword>malware behavioral analysis</keyword><keyword>ontology</keyword></keywords><dates><year>2012</year></dates><isbn>9781467317146</isbn><electronic-resource-num>10.1109/ICSMC.2012.6378176</electronic-resource-num><urls><pdf-urls><url>internal-pdf://0bfac292d63cfeb935a5e0c690ed174ae4c9.pdf</url></pdf-urls></urls><abstract>Classical ontology is not sufficient to deal with vague or imprecise knowledge for real world applications such as malware behavioral analysis. In addition, malware has grown into a pressing problem for governments and commercial organizations. Anti-malware applications represent one of the most important research topics in the area of information security threat. As a countermeasure, enhanced systems for analyzing the behavior of malware are needed in order to predict malicious actions and minimize computer damages. Many researchers use Virtual Machine (VM) systems to monitor malware behavior, but there are many Anti-VM techniques which are used to counteract the collection, analysis, and reverse engineering features of the VM based malware analysis platform. Therefore, malware researchers are likely to obtain inaccurate analysis from the VM based approach. For this reason, we have developed the Taiwan Malware Analysis Net (TWMAN) which uses a real operating system environment to improve the accuracy of malware behavior analysis and has integrated Type-1 Fuzzy Set (T1FS), Ontology, and Fuzzy Markup Language (FML) on 2010. In this paper, we use Interval Type-2 Fuzzy Set (IT2FS), eggdrop, and glftpd as a cloud service (software as a service) on the Google App Engine along with Python and Android. We believe this system can help improve the correctness of malware analysis results and reduce the rate of malware misdiagnosis.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Hoffmann, Johannes</author><author>Neumann, Stephan</author><author>Holz, Thorsten</author></authors></contributors><titles><title>Mobile Malware Detection Based on Energy Fingerprints — A Dead End?</title><secondary-title>Raid</secondary-title></titles><periodical><full-title>Raid</full-title></periodical><pages>348-368</pages><keywords/><dates><year>2013</year></dates><isbn>978-3-642-41283-7</isbn><electronic-resource-num>10.1007/978-3-642-41284-4_18</electronic-resource-num><urls><pdf-urls><url>internal-pdf://dd1387bbad3cf70025befc6bfe1b9b64eb2c.pdf</url></pdf-urls><web-urls><url>http://link.springer.com/chapter/10.1007/978-3-642-41284-4_18%5Cnhttp://link.springer.com/10.1007/978-3-642-41284-4_18</url></web-urls></urls><abstract>With the ever rising amount and quality of malicious software for mobile phones, multiple ways to detect such threats are desirable. Next to classical approaches such as dynamic and static analysis, the idea of detecting malicious activities based on the energy consumption introduced by them was recently proposed by several researchers. The key idea behind this kind of detection is the fact that each activity performed on a battery powered device drains a certain amount of energy from it. This implies that measuring the energy consumption may reveal unwanted and possibly malicious software running next to genuine applications on such a device: if the normal energy consumption is known for a device, additional used up energy should be detectable. In this paper, we evaluate whether such an approach is indeed feasible for modern smartphones and argue that results presented in prior work are not applicable to such devices. By studying the typical energy consumption of different aspects of common Android phones, we show that it varies quite a lot in practice. Furthermore, empirical tests with both artificial and real-world malware indicate that the additional power consumed by such apps is too small to be detectable with the mean error rates of state-of-the art measurement tools.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Armando, Alessandro</author><author>Costa, Gabriele</author><author>Merlo, Alessio</author></authors></contributors><titles><title>Formal modeling and reasoning about the Android security framework</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>64-81</pages><volume>8191 LNCS</volume><keywords/><dates><year>2013</year></dates><isbn>9783642411564</isbn><electronic-resource-num>10.1007/978-3-642-41157-1_5</electronic-resource-num><urls><pdf-urls><url>internal-pdf://1dae20e7a40f456173985f8b17e6f16bf949.pdf</url></pdf-urls></urls></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Hasan, Ragib</author><author>Zawoad, Shams</author><author>Haque, Md Munirul</author></authors></contributors><titles><title>StuxMob: A Situational-Aware Malware for Targeted Attack on Smart Mobile Devices</title></titles><periodical/><issue>iii</issue><keywords/><urls><pdf-urls><url>internal-pdf://1f9ecd63feb5eb6eeb971e9a6412c26de1ac.pdf</url></pdf-urls><web-urls><url>http://ieeexplore.ieee.org/document/7795378/</url></web-urls></urls><abstract>—The availability of a rich variety of sensors in smart mobile devices has enabled today's software to be situational-aware and to learn about surrounding environment. We explore a novel generation of mobile malware, which utilizes this situational awareness and can attack a mobile device carried by a specific person, or people matching a specific set of criteria. The behavior and threat posed by StuxMob are distinguishable from the existing state-of-the-art malware. Today's malware attack devices either just after the devices got infected or through a command-and-control based botnets. In contrast, StuxMob will launch its payload and perform a specific act against the target, only if it finds a match between a given profile and the person carrying the device; otherwise, it remains dormant. By using off-the-shelf sensors of the mobile devices, StuxMob combines the physical activity of users with their surrounding environments to create users' profile. We analyze the feasibility of such a malware and propose defense mechanisms against this type of targeted attack.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Liang, Shuying</author><author>Keep, Andrew W.</author><author>Might, Matthew</author><author>Lyde, Steven</author><author>Gilray, Thomas</author><author>Aldous, Petey</author><author>Van Horn, David</author></authors></contributors><titles><title>Sound and precise malware analysis for android via pushdown reachability and entry-point saturation</title><secondary-title>Proceedings of the Third ACM workshop on Security and privacy in smartphones &amp; mobile devices - SPSM '13</secondary-title></titles><periodical><full-title>Proceedings of the Third ACM workshop on Security and privacy in smartphones &amp; mobile devices - SPSM '13</full-title></periodical><pages>21-32</pages><keywords><keyword>abstract interpretation</keyword><keyword>down systems</keyword><keyword>malware detection</keyword><keyword>push-</keyword><keyword>static analysis</keyword><keyword>taint analysis</keyword></keywords><dates><year>2013</year></dates><isbn>9781450324915</isbn><electronic-resource-num>10.1145/2516760.2516769</electronic-resource-num><urls><pdf-urls><url>internal-pdf://ddaa0c6eae73e207fe6b6e5392a54abc4d89.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2737924.2737971%5Cnhttp://dl.acm.org/citation.cfm?doid=2516760.2516769</url></web-urls></urls><abstract>Sound malware analysis of Android applications is challenging. First, object-oriented programs exhibit highly interprocedural, dynamically dispatched control structure. Second, the Android programming paradigm relies heavily on the asynchronous execution of multiple entry points. Existing analysis techniques focus more on the second challenge, while relying on traditional analytic techniques that suffer from inherent imprecision or unsoundness to solve the first. We present Anadroid, a static malware analysis framework for Android apps. Anadroid exploits two techniques to soundly raise precision: (1) it uses a pushdown system to precisely model dynamically dispatched interprocedural and exception-driven control-flow; (2) it uses Entry-Point Saturation (EPS) to soundly approximate all possible interleavings of asynchronous entry points in Android applications. (It also integrates static taint-flow analysis and least permissions analysis to expand the class of malicious behaviors which it can catch.) Anadroid provides rich user interface support for human analysts which must ultimately rule on the &quot;maliciousness&quot; of a behavior. To demonstrate the effectiveness of Anadroid's malware analysis, we had teams of analysts analyze a challenge suite of 52 Android applications released as part of the Automated Program Analysis for Cybersecurity (APAC) DARPA program. The first team analyzed the apps using a version of Anadroid that uses traditional (finite-state-machine-based) control-flow-analysis found in existing malware analysis tools; the second team analyzed the apps using a version of Anadroid that uses our enhanced pushdown-based control-flow-analysis. We measured machine analysis time, human analyst time, and their accuracy in flagging malicious applications. With pushdown analysis, we found statistically significant (p &lt; 0.05) decreases in time: from 85 minutes per app to 35 minutes per app in human plus machine analysis time; and statistically significant (p &lt; 0.05) increases in accuracy with the pushdown-driven analyzer: from 71% correct identification to 95% correct identification.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Finley, Sean</author><author>Du, Xiaojiang</author></authors></contributors><titles><title>Dynamic cache cleaning on Android</title><secondary-title>IEEE International Conference on Communications</secondary-title></titles><periodical><full-title>IEEE International Conference on Communications</full-title></periodical><pages>6143-6147</pages><keywords><keyword>Android</keyword><keyword>cache</keyword><keyword>memory</keyword><keyword>performance</keyword><keyword>security</keyword></keywords><dates><year>2013</year></dates><isbn>9781467331227</isbn><electronic-resource-num>10.1109/ICC.2013.6655587</electronic-resource-num><urls><pdf-urls><url>internal-pdf://1eab7656b16d3105749a29d6f4ed0995f0e8.pdf</url></pdf-urls></urls><abstract>Android developers cache data to improve the performance of their applications. Caching is the technique of transparently storing data such that future requests can be accessed more quickly. At times when a mobile device is not under heavy use the cached data, including sensitive data, can remain on the device for an extensive period of time. This poses a security risk, especially when developers do not take the necessary security measures to protect their users' sensitive information. While there does exist ways to clear application caches built within the Android operating system and third-party applications, these approaches require the user to manually perform these tasks. This paper presents a dynamic cache cleaner that more aggressively pushes out unused cache data. We also present other possible solutions to more effectively manage the cache.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Liebergeld, Steffen</author><author>Lange, Matthias</author></authors></contributors><titles><title>Android security, pitfalls and lessons learned</title><secondary-title>Lecture Notes in Electrical Engineering</secondary-title></titles><periodical><full-title>Lecture Notes in Electrical Engineering</full-title></periodical><pages>409-417</pages><volume>264 LNEE</volume><keywords/><dates><year>2014</year></dates><isbn>9783319016030</isbn><electronic-resource-num>10.1007/978-3-319-01604-7_40</electronic-resource-num><urls><pdf-urls><url>internal-pdf://1bba32c786320da0486d0dd6fb24e153d7ad.pdf</url></pdf-urls></urls><abstract>Over the last two years Android became the most popu- lar mobile operating system. But Android is also targeted by an over-proportional share of malware. In this paper we systematize the knowledge about the Android security mechanisms and formulate how the pitfalls can be avoided when building a mobile operating system. As smartphones enter the corporate domain, a new scheme called bring your own device (BYOD) became popular. One solution is to log- ically partition the device such that personal and business information are isolated from one another. We systematize the solutions for partitioning in Android.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Naveed, Muhammad</author><author>Zhou, Xiaoyong</author><author>Demetriou, Soteris</author></authors></contributors><titles><title>Inside Job: Understanding and Mitigating the Threat of External Device Mis-Bonding on Android</title><secondary-title>Ndss '14</secondary-title></titles><periodical><full-title>Ndss '14</full-title></periodical><pages>23-26</pages><issue>February</issue><keywords/><dates><year>2014</year></dates><isbn>1891562355</isbn><electronic-resource-num>10.14722/ndss.2014.23097</electronic-resource-num><urls><pdf-urls><url>internal-pdf://1f62e4fadd4fa20794bff4d19ab06e77f0f0.pdf</url></pdf-urls></urls><abstract>Today’s smartphones can be armed with many types of external devices, such as medical devices and credit card readers, that enrich their functionality and enable them to be used in application domains such as healthcare and retail. This new development comes with new security and privacy challenges. Existing phone-based operating systems, Android in particular, are not ready for protecting authorized use of those external devices: indeed, any app on an Android phone that acquires permission to utilize communication channels like Bluetooth and Near Field Communications is automatically given the access to devices communicating with the phone on these channels.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Ongtang, Machigar</author><author>Butler, Kevin</author><author>Mcdaniel, Patrick</author></authors></contributors><titles><title>Porscha : Policy Oriented Secure Content Handling in Android Categories and Subject Descriptors</title><secondary-title>Defense</secondary-title></titles><periodical><full-title>Defense</full-title></periodical><pages>221-230</pages><keywords><keyword>cse</keyword><keyword>edu</keyword><keyword>gence smart phones</keyword><keyword>has led a</keyword><keyword>mcdaniel</keyword><keyword>networks worldwide emer</keyword><keyword>penetration cellular</keyword><keyword>psu</keyword><keyword>revolution mobile</keyword></keywords><dates><year>2010</year></dates><isbn>9781450301336</isbn><electronic-resource-num>10.1145/1920261.1920295</electronic-resource-num><urls><pdf-urls><url>internal-pdf://0ca147d99ccb45e02191651fdaa253f05745.pdf</url></pdf-urls><web-urls><url>http://portal.acm.org/citation.cfm?id=1920295</url></web-urls></urls><abstract>The penetration of cellular networks worldwide and emergence of smart phones has led to a revolution in mobile content. Users consume diverse content when, for example, exchanging photos, playing games, browsing websites, and viewing multimedia. Current phone platforms provide protections for user privacy, the cellular radio, and the integrity of the OS itself. However, few offer protections to protect the content once it enters the phone. For example, MP3-based MMS or photo content placed on Android smart phones can be extracted and shared with impunity. In this paper, we explore the requirements and enforcement of digital rights management (DRM) policy on smart phones. An analysis of the Android market shows that DRM services should ensure: a) protected content is accessible only by authorized phones b) content is only accessible by provider-endorsed applications, and c) access is regulated by contextual constraints, e.g., used for a limited time, a maximum number of viewings, etc. The Porscha system developed in this work places content proxies and reference monitors within the Android middleware to enforce DRM policies embedded in received content. A pilot study controlling content obtained over SMS, MMS, and email illustrates the expressibility and enforcement of Porscha policies. Our experiments demonstrate that Porscha is expressive enough to articulate needed DRM policies and that their enforcement has limited impact on performance.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Arshad, Saba</author><author>Ali, Munam</author><author>Khan, Abid</author><author>Ahmed, Mansoor</author></authors></contributors><titles><title>Android Malware Detection &amp;amp; Protection: A Survey</title><secondary-title>International Journal of Advanced Computer Science and Applications</secondary-title></titles><periodical><full-title>International Journal of Advanced Computer Science and Applications</full-title></periodical><pages>463-475</pages><volume>7</volume><issue>2</issue><keywords><keyword>android</keyword><keyword>permissions</keyword><keyword>signature</keyword></keywords><dates><year>2016</year></dates><electronic-resource-num>10.14569/IJACSA.2016.070262</electronic-resource-num><urls><pdf-urls><url>internal-pdf://0e5212aa55204d11a0880f5d1abdbfe703d2.pdf</url></pdf-urls><web-urls><url>http://thesai.org/Publications/ViewPaper?Volume=7&amp;Issue=2&amp;Code=ijacsa&amp;SerialNo=62</url></web-urls></urls><abstract>Abstract—Android has become the most popular smartphone operating system. This rapidly increasing adoption of Android has resulted in significant increase in the number of malwares when compared with previous years. There exist lots of antimalware programs which are designed to effectively protect the users’ sensitive data in mobile systems from such attacks. In this paper, our contribution is twofold. Firstly, we have analyzed the Android malwares and their penetration techniques used for attacking the systems and antivirus programs that act against malwares to protect Android systems. We categorize many of the most recent antimalware techniques on the basis of their detection methods. We aim to provide an easy and concise view of the malware detection and protection mechanisms and deduce their benefits and limitations. Secondly, we have forecast Android market trends for the year up to 2018 and provide a unique hybrid security solution and take into account both the static and dynamic analysis an android application.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Karbab, El Mouatez Billah</author><author>Debbabi, Mourad</author><author>Alrabaee, Saed</author><author>Mouheb, Djedjiga</author></authors></contributors><titles><title>DySign: Dynamic fingerprinting for the automatic detection of android malware</title><secondary-title>2016 11th International Conference on Malicious and Unwanted Software, MALWARE 2016</secondary-title></titles><periodical><full-title>2016 11th International Conference on Malicious and Unwanted Software, MALWARE 2016</full-title></periodical><pages>139-146</pages><keywords/><dates><year>2017</year></dates><isbn>9781509045426</isbn><electronic-resource-num>10.1109/MALWARE.2016.7888739</electronic-resource-num><urls><pdf-urls><url>internal-pdf://0ca018665d52711de5e09dd306086b924e5d(1).pdf</url></pdf-urls></urls><abstract>The astonishing spread of Android OS, not only in smartphones and tablets but also in IoT devices, makes this operating system a very tempting target for malware threats. Indeed, the latter are expanding at a similar rate. In this respect, malware fingerprints, whether based on cryptographic or fuzzy-hashing, are the first defense line against such attacks. Fuzzy-hashing fingerprints are suitable for capturing malware static features. Moreover, they are more resilient to small changes in the actual static content of malware files. On the other hand, dynamic analysis is another technique for malware detection that uses emulation environments to extract behavioral features of Android malware. However, to the best of our knowledge, there is no such fingerprinting technique that leverages dynamic analysis and would act as the first defense against Android malware attacks. In this paper, we address the following question: could we generate effective fingerprints for Android malware through dynamic analysis? To this end, we propose DySign, a novel technique for fingerprinting Android malware's dynamic behaviors. This is achieved through the generation of a digest from the dynamic analysis of a malware sample on existing known malware. It is important to mention that: (i) DySign fingerprints are approximated of the observed behaviors during dynamic analysis so as to achieve resiliency to small changes in the behaviors of future malware variants; (ii) Fingerprint computation is agnostic to the analyzed malware sample or family. DySign leverages state-of-the-art Natural Language Processing (NLP) techniques to generate the aforementioned fingerprints, which are then leveraged to build an enhanced Android malware detection system with family attribution.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Ozsoy, Meltem</author><author>Donovick, Caleb</author><author>Gorelik, Iakov</author><author>Abu-Ghazaleh, Nael</author><author>Ponomarev, Dmitry</author></authors></contributors><titles><title>Malware-aware processors: A framework for efficient online malware detection</title><secondary-title>2015 IEEE 21st International Symposium on High Performance Computer Architecture, HPCA 2015</secondary-title></titles><periodical><full-title>2015 IEEE 21st International Symposium on High Performance Computer Architecture, HPCA 2015</full-title></periodical><pages>651-661</pages><keywords/><dates><year>2015</year></dates><isbn>9781479989300</isbn><electronic-resource-num>10.1109/HPCA.2015.7056070</electronic-resource-num><urls><pdf-urls><url>internal-pdf://03dea55ac3137edb13b3e141b19a03deba21.pdf</url></pdf-urls></urls><abstract>Security exploits and ensuant malware pose an increasing challenge to computing systems as the variety and complexity of attacks continue to increase. In response, software-based malware detection tools have grown in complexity, thus making it computationally difficult to use them to protect systems in real-time. Therefore, software detectors are applied selectively and at a low frequency, creating opportunities for malware to remain undetected. In this paper, we propose Malware-Aware Processors (MAP) - processors augmented with an online hardware-based detector to serve as the first line of defense to differentiate malware from legitimate programs. The output of this detector helps the system prioritize how to apply more expensive software-based solutions. The always-on nature of MAP detector helps protect against intermittently operating malware. Our work improves on the state of the art in the following ways: (1) We define and explore the use of sub-semantic features for online detection of malware. (2) We explore hardware implementations and show that simple classifiers appropriate for such implementations can effectively classify malware. We also study different classifiers, develop implementation optimizations, and explore complexity to performance trade-offs. (3) We propose a two-level detection framework where the hardware classifier prioritizes the work of a more accurate but more expensive software defense mechanism. (4) We integrate the MAP implementation with an open-source x86-compatible core, synthesizing the resulting design to run on an FPGA.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Liu, Xiangyu</author><author>Zhou, Zhe</author><author>Diao, Wenrui</author><author>Li, Zhou</author><author>Zhang, Kehuan</author></authors></contributors><titles><title>An Empirical Study on Android for Saving Non-shared Data on Public Storage</title></titles><periodical/><keywords/><dates><year>2014</year></dates><urls><pdf-urls><url>internal-pdf://3adc1fc8ae6b45200960d9617b41c7a42d81 (1).pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1407.5410</url></web-urls></urls><abstract>With millions of apps that can be downloaded from official or third-party market, Android has become one of the most popular mobile platforms today. These apps help people in all kinds of ways and thus have access to lots of user's data that in general fall into three categories: sensitive data, data to be shared with other apps, and non-sensitive data not to be shared with others. For the first and second type of data, Android has provided very good storage models: an app's private sensitive data are saved to its private folder that can only be access by the app itself, and the data to be shared are saved to public storage (either the external SD card or the emulated SD card area on internal FLASH memory). But for the last type, i.e., an app's non-sensitive and non-shared data, there is a big problem in Android's current storage model which essentially encourages an app to save its non-sensitive data to shared public storage that can be accessed by other apps. At first glance, it seems no problem to do so, as those data are non-sensitive after all, but it implicitly assumes that app developers could correctly identify all sensitive data and prevent all possible information leakage from private-but-non-sensitive data. In this paper, we will demonstrate that this is an invalid assumption with a thorough survey on information leaks of those apps that had followed Android's recommended storage model for non-sensitive data. Our studies showed that highly sensitive information from billions of users can be easily hacked by exploiting the mentioned problematic storage model. Although our empirical studies are based on a limited set of apps, the identified problems are never isolated or accidental bugs of those apps being investigated. On the contrary, the problem is rooted from the vulnerable storage model recommended by Android. To mitigate the threat, we also propose a defense framework.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Shebaro, Bilal</author><author>Oluwatimi, Oyindamola</author><author>Midi, Daniele</author><author>Bertino, Elisa</author></authors></contributors><titles><title>Identi Droid: Android can finally wear its anonymous suit</title><secondary-title>Transactions on Data Privacy</secondary-title></titles><periodical><full-title>Transactions on Data Privacy</full-title></periodical><pages>27-50</pages><volume>7</volume><issue>1</issue><keywords/><dates><year>2014</year></dates><urls><pdf-urls><url>internal-pdf://2f6d2914b56b9550540603b1adc621dc4cf0 (1).pdf</url></pdf-urls></urls><abstract>Because privacy today is a major concern for mobile applications, network anonymizers are widely available on smartphones, such as Android. However despite the use of such anonymizers, in many cases applications are still able to identify the user and the device by different means than the IP address. The reason is that very often applications require device services and information that go beyond the capabilities of anonymous networks in protecting users' identity and privacy. In this paper, we propose two solutions that address this problem. The first solution is based on an approach that shadows user and application data, device information, and resources that can reveal the user identity. Data shadowing is executed when the smartphone switches to the &quot; anonymous modality &quot; . Once the smartphone returns to work in the normal (i.e. non-anonymous) modality, application data, device information and resources are returned back to the state they had before the anonymous connection. The second solution is based on run-time modifications of Android application permissions. Permissions associated with sensitive information are dynamically revoked at run-time from applications when the smartphone is used under the anonymous modality. They are re-instated back when the smartphone returns to work in the normal modality. In addition, both solutions offer protection from applications that identify their users through traces left in the application's data storage or through exchanging identifying data messages. We developed IdentiDroid, a customized Android operating system, to deploy these solutions and built IdentiDroid Profile Manager, a profile-based configuration tool that allows one to set different configurations for each installed Android application. With this tool, applications running within the same device are configured to be given different identifications and privileges to limit the uniqueness of device and user information. We analyzed 250 Android applications to determine what information, services, and permissions can identify users and devices. Our experiments show that when IdentiDroid is deployed and properly configured on Android devices, users' anonymity is better guaranteed by either of the proposed solutions with no significant impact on most device applications.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Shin, Dongwan</author><author>Yao, Huiping</author></authors></contributors><titles><title>A User Study of Security Warnings for Detecting QR Code Based Attacks on Android Phone</title><secondary-title>Isyou.Info</secondary-title></titles><periodical><full-title>Isyou.Info</full-title></periodical><pages>49-64</pages><keywords><keyword>and user study</keyword><keyword>malware</keyword><keyword>phishing</keyword><keyword>qr code security</keyword><keyword>visual warning</keyword></keywords><dates><year>2013</year></dates><urls><pdf-urls><url>internal-pdf://2e5875b6b5a923ee1c62fee1efb3a653bc0c.pdf</url></pdf-urls><web-urls><url>http://isyou.info/jowua/papers/jowua-v4n4-4.pdf</url></web-urls></urls></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Ferreira, Denzil</author><author>Kostakos, Vassilis</author><author>Beresford, Alastair R</author><author>Lindqvist, Janne</author><author>Dey, Anind K.</author></authors></contributors><titles><title>Securacy: An Empirical Investigation of Android Applications’ Network Usage, Privacy and Security</title><secondary-title>Conference on Security and Privacy in Wireless and Mobile Networks (WiSec)</secondary-title></titles><periodical><full-title>Conference on Security and Privacy in Wireless and Mobile Networks (WiSec)</full-title></periodical><keywords><keyword>Network</keyword><keyword>applications</keyword><keyword>context</keyword><keyword>experience sampling</keyword><keyword>privacy</keyword></keywords><dates><year>2015</year></dates><isbn>9781450336239</isbn><electronic-resource-num>10.1145/2766498.2766506</electronic-resource-num><urls><pdf-urls><url>internal-pdf://2f9937855ce0ad75647ecd2c6d0a374bd6c4 (1).pdf</url></pdf-urls><web-urls><url>http://www.winlab.rutgers.edu/~janne/securacy-wisec15.pdf</url></web-urls></urls><abstract>Smartphone users do not fully know what their apps do. For example, an applications’ network usage and underlying security configuration is invisible to users. In this paper we introduce Securacy, a mobile app that explores users’ privacy and security concerns with Android apps. Securacy takes a reactive, personalized approach, highlighting app permission settings that the user has previously stated are concerning, and provides feedback on the use of secure and insecure network communication for each app. We began our design of Securacy by conducting a literature review and in-depth interviews with 30 participants to understand their concerns. We used this knowledge to build Securacy and evaluated its use by another set of 218 anonymous participants who installed the application from the Google Play store. Our results show that access to address book information is by far the biggest privacy concern. Over half (56.4%) of the connections made by apps are insecure, and the destination of the majority of network traffic is North America, regardless of the location of the user. Our app provides unprecedented insight into Android applications’ communications behavior globally, indicating that the majority of apps currently use insecure network connections.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Book">1</ref-type><contributors><authors><author>Chu, Wai C</author><author>Jose, San</author></authors></contributors><titles><title>2013 International Conference on Computing, Networking and Communications (ICNC) Workshop on Computing, Networking and Communications</title></titles><periodical/><pages>103-107</pages><issue>January</issue><keywords/><dates><year>2013</year></dates><isbn>9781467300094</isbn><urls><pdf-urls><url>internal-pdf://4ab0657866ee22ff8ce1d860e32a07a4c24e.pdf</url></pdf-urls></urls><abstract>&quot;... took place February 15-18, 2016 in Kauai, HI, USA.&quot; &quot;IEEE catalog number: CFP1659R-ART.&quot; Technically co-sponsored by IEEE Computer Society.</abstract></record><record><database name="My Collection_1to100.enl" path="My Collection_1to100.enl">My Collection_1to100.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Hammad, Mahmoud</author><author>Bagheri, Hamid</author><author>Malek, Sam</author></authors></contributors><titles><title>Determination and Enforcement of Least-Privilege Architecture in Android</title><secondary-title>Proceedings - 2017 IEEE International Conference on Software Architecture, ICSA 2017</secondary-title></titles><periodical><full-title>Proceedings - 2017 IEEE International Conference on Software Architecture, ICSA 2017</full-title></periodical><pages>59-68</pages><keywords><keyword>Android</keyword><keyword>Security</keyword><keyword>Software Architecture</keyword></keywords><dates><year>2017</year></dates><isbn>9781509057290</isbn><electronic-resource-num>10.1109/ICSA.2017.18</electronic-resource-num><urls><pdf-urls><url>internal-pdf://4c1dea67a4cc77bc5c8ffe28aa1fc3eb451a.pdf</url></pdf-urls></urls></record></records></xml>
