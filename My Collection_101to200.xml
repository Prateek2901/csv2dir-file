<?xml version="1.0" encoding="UTF-8"?><xml><records><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Hurier, Mederic</author><author>Suarez-Tangil, Guillermo</author><author>Dash, Santanu Kumar</author><author>Bissyande, Tegawende F.</author><author>Le Traon, Yves</author><author>Klein, Jacques</author><author>Cavallaro, Lorenzo</author></authors></contributors><titles><title>Euphony: Harmonious Unification of Cacophonous Anti-Virus Vendor Labels for Android Malware</title><secondary-title>IEEE International Working Conference on Mining Software Repositories</secondary-title></titles><periodical><full-title>IEEE International Working Conference on Mining Software Repositories</full-title></periodical><pages>425-435</pages><keywords><keyword>android</keyword><keyword>datasets</keyword><keyword>ground-Truth</keyword><keyword>labeling</keyword><keyword>malware</keyword></keywords><dates><year>2017</year></dates><isbn>9781538615447</isbn><electronic-resource-num>10.1109/MSR.2017.57</electronic-resource-num><urls><pdf-urls><url>internal-pdf://2be904fb8af76daf6744531af99c7761cd8a.pdf</url></pdf-urls></urls><abstract>—Android malware is now pervasive and evolving rapidly. Thousands of malware samples are discovered every day with new models of attacks. The growth of these threats has come hand in hand with the proliferation of collective repositories sharing the latest specimens. Having access to a large number of samples opens new research directions aiming at efficiently vetting apps. However, automatically inferring a reference dataset from those repositories is not straightforward and can inadvertently lead to unforeseen misconceptions. On the one hand, samples are often mis-labeled as different parties use distinct naming schemes for the same sample. On the other hand, samples are frequently mis-classified due to conceptual errors made during labeling processes. In this paper, we mine Anti-Virus labels and analyze the associations between all labels given by different vendors to systematically unify common samples into family groups. The key novelty of our approach, named EU-PHONY [20], is that no a-priori knowledge on malware families is needed. We evaluate EUPHONY using reference datasets and more than 400 thousands additional samples outside of these datasets. Results show that EUPHONY can accurately label malware with a fine-grained clustering of families, while providing competitive performance against the state-of-the-art.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhou, Wu</author><author>Zhang, Xinwen</author><author>Jiang, Xuxian</author></authors></contributors><titles><title>AppInk</title><secondary-title>Proceedings of the 8th ACM SIGSAC symposium on Information, computer and communications security - ASIA CCS '13</secondary-title></titles><periodical><full-title>Proceedings of the 8th ACM SIGSAC symposium on Information, computer and communications security - ASIA CCS '13</full-title></periodical><pages>1</pages><keywords><keyword>app repackaging</keyword><keyword>mobile application</keyword><keyword>software</keyword></keywords><dates><year>2013</year></dates><isbn>9781450317672</isbn><electronic-resource-num>10.1145/2484313.2484315</electronic-resource-num><urls><pdf-urls><url>internal-pdf://1f9459c803a16f346a4bca13d0ffe3e7722b (1).pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2484315%5Cnhttp://dl.acm.org/citation.cfm?doid=2484313.2484315</url></web-urls></urls><abstract>With increased popularity and wide adoption of smartphones and mobile devices, recent years have seen a new burgeoning economy model centered around mobile apps. However, app repackaging, among many other threats, brings tremendous risk to the ecosystem, including app developers, app market operators, and end users. To mitigate such threat, we propose and develop a watermarking mechanism for Android apps. First, towards automatic watermark embedding and extraction, we introduce the novel concept of manifest app, which is a companion of a target Android app under protection. We then design and develop a tool named AppInk, which takes the source code of an app as input to automatically generate a new app with a transparently-embedded watermark and the associated manifest app. The manifest app can be later used to reliably recognize embedded watermark with zero user intervention. To demonstrate the effectiveness of AppInk in preventing app repackaging, we analyze its robustness in defending against distortive, subtractive, and additive attacks, and then evaluate its resistance against two open source repackaging tools. Our results show that AppInk is easy to use, effective in defending against current known repackaging threats on Android platform, and introduces small performance overhead to end users.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Roy, S.</author><author>Deloach, J.</author><author>Li, Y.</author><author>Herndon, N.</author><author>Caragea, D.</author><author>Ou, X.</author><author>Ranganath, V.P.</author><author>Li, H.</author><author>Guevara, N.</author></authors></contributors><titles><title>Experimental study with real-world data for android app security analysis using machine learning</title><secondary-title>ACM International Conference Proceeding Series</secondary-title></titles><periodical><full-title>ACM International Conference Proceeding Series</full-title></periodical><pages>81-90</pages><volume>7-11-Decem</volume><keywords/><dates><year>2015</year></dates><isbn>9781450336826</isbn><electronic-resource-num>10.1145/2818000.2818038</electronic-resource-num><urls><pdf-urls><url>internal-pdf://2aea8445a410b85cc039b272c511b550fc2c.pdf</url></pdf-urls></urls><abstract>© 2015 ACM. Although Machine Learning (ML) based approaches have shown promise for Android malware detection, a set of critical challenges remain unaddressed. Some of those challenges arise in relation to proper evaluation of the detection approach while others are related to the design decisions of the same. In this paper, we systematically study the impact of these challenges as a set of research questions (i.e., hypotheses). We design an experimentation framework where we can reliably vary several parameters while evaluating ML-based Android malware detection approaches. The results from the experiments are then used to answer the research questions. Meanwhile, we also demonstrate the impact of some challenges on some existing ML-based approaches. The large (market-scale) dataset (benign and malicious apps) we use in the above experiments represents the real-world Android app security analysis scale. We envision this study to encourage the practice of employing a better evaluation strategy and better designs of future ML-based approaches for Android malware detection.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Adkins, Francis</author><author>Jones, Luke</author><author>Carlisle, Martin</author><author>Upchurch, Jason</author></authors></contributors><titles><title>Heuristic malware detection via basic block comparison</title><secondary-title>Proceedings of the 2013 8th International Conference on Malicious and Unwanted Software: &quot;The Americas&quot;, MALWARE 2013</secondary-title></titles><periodical><full-title>Proceedings of the 2013 8th International Conference on Malicious and Unwanted Software: &quot;The Americas&quot;, MALWARE 2013</full-title></periodical><pages>11-18</pages><keywords><keyword>Approved for public release</keyword><keyword>Distribution A</keyword><keyword>Distribution unlimited</keyword></keywords><dates><year>2013</year></dates><isbn>9781479925339</isbn><electronic-resource-num>10.1109/MALWARE.2013.6703680</electronic-resource-num><urls><pdf-urls><url>internal-pdf://4a3458112b5f1572d80812145c4be74024c2 (1).pdf</url></pdf-urls></urls><abstract>Each day, malware analysts are tasked with more samples than they have the ability to analyze by hand. To produce this trend, malware authors often reuse a significant portion of their code. In this paper, we introduce a technique to statically decompose malicious software to identify shared code. This technique variably applies a sliding-window methodology to either full files or individual basic blocks to produce representative similarity ratios either between two binaries or between two functionalities within binaries, respectively. This grants the ability to apply heuristic detection via threshold similarity matching as well as full-inclusivity matching for malicious functionality. Additionally, we apply generalization techniques to minimize local assembly variants while still maintaining consistent structural matching. We also identify improvements that this technique provides over previous technologies and demonstrate its success in practical sample detection. Finally, we suggest further applications of this technique and highlight possible contributions to modern malware detection.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Stevens, Ryan</author><author>Crussell, Jonathan</author><author>Chen, Hao</author></authors></contributors><titles><title>On the Origin of Mobile Apps</title><secondary-title>Proceedings of the Sixth ACM on Conference on Data and Application Security and Privacy - CODASPY '16</secondary-title></titles><periodical><full-title>Proceedings of the Sixth ACM on Conference on Data and Application Security and Privacy - CODASPY '16</full-title></periodical><pages>160-171</pages><keywords/><dates><year>2016</year></dates><isbn>9781450339353</isbn><electronic-resource-num>10.1145/2857705.2857712</electronic-resource-num><urls><pdf-urls><url>internal-pdf://3dd92bef302efc9cf3813f7448de8ea0768f.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2857705.2857712</url></web-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Yang, Chao</author><author>Xu, Zhaoyan</author><author>Gu, Guofei</author><author>Yegneswaran, Vinod</author><author>Porras, Phillip</author></authors></contributors><titles><title>DroidMiner: Automated mining and characterization of fine-grained malicious behaviors in android applications</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>163-182</pages><volume>8712 LNCS</volume><issue>PART 1</issue><keywords><keyword>android Malware Analysis and Detection</keyword><keyword>mobile Security</keyword></keywords><dates><year>2014</year></dates><isbn>9783319112022</isbn><accession-num>20433050</accession-num><electronic-resource-num>10.1007/978-3-319-11203-9_10</electronic-resource-num><urls><pdf-urls><url>internal-pdf://3b1ada2fe168d1b3b83f23bb71aa3b3738c0.pdf</url></pdf-urls></urls><abstract>Android;obfuscation</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Suarez-Tangil, Guillermo</author><author>Dash, Santanu Kumar</author><author>Holloway, Royal</author><author>Ahmadi, Mansour</author><author>Giacinto, Giorgio</author><author>Kinder, Johannes</author><author>Cavallaro, Lorenzo</author></authors></contributors><titles><title>DroidSieve: Fast and Accurate Classification of Obfuscated Android Malware</title><secondary-title>Proceedings of the 7th ACM Conference on Data and Application Security and Privacy, (CODASPY 2017)</secondary-title></titles><periodical><full-title>Proceedings of the 7th ACM Conference on Data and Application Security and Privacy, (CODASPY 2017)</full-title></periodical><pages>309-320</pages><keywords><keyword>android malware detection</keyword><keyword>clas-</keyword><keyword>machine learning</keyword><keyword>malware family identification</keyword><keyword>native code</keyword><keyword>obfuscation</keyword><keyword>scalability</keyword><keyword>security</keyword><keyword>sification</keyword></keywords><dates><year>2017</year></dates><isbn>9781450345231</isbn><electronic-resource-num>10.1145/3029806.3029825</electronic-resource-num><urls><pdf-urls><url>internal-pdf://4ab06a8ad52583bd4e18829694aecf5f5e6d(1).pdf</url></pdf-urls></urls><abstract>With more than two million applications, Android market-places require automatic and scalable methods to efficiently vet apps for the absence of malicious threats. Recent tech-niques have successfully relied on the extraction of lightweight syntactic features suitable for machine learning classification, but despite their promising results, the very nature of such features suggest they would unlikely—on their own—be suit-able for detecting obfuscated Android malware. To address this challenge, we propose DroidSieve, an Android malware classifier based on static analysis that is fast, accurate, and resilient to obfuscation. For a given app, DroidSieve first decides whether the app is malicious and, if so, classifies it as belonging to a family of related malware. DroidSieve exploits obfuscation-invariant features and artifacts introduced by obfuscation mechanisms used in malware. At the same time, these purely static features are designed for processing at scale and can be extracted quickly. For malware detection, we achieve up to 99.82% accuracy with zero false positives; for family identification of obfuscated malware, we achieve 99.26% accuracy at a fraction of the computational cost of state-of-the-art techniques.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Canzanese, Raymond</author><author>Kam, Moshe</author><author>Mancoridis, Spiros</author></authors></contributors><titles><title>Inoculation against malware infection using kernel-level software sensors</title><secondary-title>Proceedings of the 8th ACM international conference on Autonomic computing - ICAC '11</secondary-title></titles><periodical><full-title>Proceedings of the 8th ACM international conference on Autonomic computing - ICAC '11</full-title></periodical><pages>101</pages><keywords><keyword>fault tolerance</keyword><keyword>malware detection</keyword><keyword>system monitoring</keyword></keywords><dates><year>2011</year></dates><isbn>9781450306072</isbn><electronic-resource-num>10.1145/1998582.1998600</electronic-resource-num><urls><pdf-urls><url>internal-pdf://3e04cc7f0b74d0edad5968d233c5f9cd362a (1).pdf</url></pdf-urls><web-urls><url>http://portal.acm.org/citation.cfm?doid=1998582.1998600</url></web-urls></urls><abstract>We present a technique for dynamic malware detection that relies on a set of sensors that monitor the interaction of applications with the underlying operating system. By monitoring the requests that each process makes to kernel-level operating system functions, we build a statistical model that describes both clean and infected systems in terms of the distribution of data collected from each sensor. The model parameters are learned from labeled training data gathered from machines infected with canonical samples of malware. We present a technique for detecting malware using the Neyman-Pearson test from classical detection theory. This technique classifies a system as either clean or infected at runtime as measurements are collected from the sensors. We provide experimental results that illustrate the effectiveness of this technique for a selection of malware samples. Additionally, we provide a performance analysis of our sensing and detection techniques in terms of the overhead they introduce to the system. Finally, we show this method to be effective in detecting previously unknown malware when trained to detect similar malware under similar load conditions.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Jerome, Quentin</author><author>Allix, Kevin</author><author>State, Radu</author><author>Engel, Thomas</author></authors></contributors><titles><title>Using opcode-sequences to detect malicious Android applications</title><secondary-title>2014 IEEE International Conference on Communications, ICC 2014</secondary-title></titles><periodical><full-title>2014 IEEE International Conference on Communications, ICC 2014</full-title></periodical><pages>914-919</pages><keywords><keyword>Android malware</keyword><keyword>machine learning</keyword><keyword>opcode-sequences</keyword></keywords><dates><year>2014</year></dates><isbn>9781479920037</isbn><electronic-resource-num>10.1109/ICC.2014.6883436</electronic-resource-num><urls><pdf-urls><url>internal-pdf://3d3807537c83b727cea048259d58dcfa7538.pdf</url></pdf-urls></urls><abstract>Recently, the Android platform has seen its number of malicious applications increased sharply. Motivated by the easy application submission process and the number of alternative market places for distributing Android applications, rogue authors are developing constantly new malicious programs. While current anti-virus software mainly relies on signature detection, the issue of alternative malware detection has to be addressed. In this paper, we present a feature based detection mechanism relying on opcode-sequences combined with machine learning techniques. We assess our tool on both a reference dataset known as Genome Project as well as on a wider sample of 40,000 applications retrieved from the Google Play Store.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sun, Mingshen</author><author>Lui, John C.S.</author><author>Zhou, Yajin</author></authors></contributors><titles><title>Blender: Self-randomizing address space layout for android apps</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>457-480</pages><volume>9854 LNCS</volume><keywords><keyword>ASLR</keyword><keyword>Android</keyword><keyword>Blender</keyword><keyword>ROP</keyword></keywords><dates><year>2016</year></dates><isbn>9783319457185</isbn><accession-num>4520227</accession-num><electronic-resource-num>10.1007/978-3-319-45719-2_21</electronic-resource-num><urls><pdf-urls><url>internal-pdf://5c16577646bb502a17b65131e788ef58330b.pdf</url></pdf-urls></urls><abstract>Security analytics is a catchall term for vulnerability assessment and intrusion detection leveraging security logs from a wide array of Security Analytics Sources (SASs), which include firewalls, VPNs, and endpoint instrumentation. Today, nearly all security analytics systems suffer from a lack of even basic data protections. An adversary can eavesdrop on SAS outputs and advanced malware can undetectably suppress or tamper with SAS messages to conceal attacks. We introduce PillarBox, a tool that enforces integrity for SAS data even when such data is buffered on a compromised host within an adversarially controlled network. Additionally, PillarBox (optionally) offers stealth, concealing SAS data and potentially even alerting rules on a compromised host. Using data from a large enterprise and on-host performance measurements, we show experimentally that PillarBox has minimal overhead and is practical for real-world systems.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Song, Linhai</author><author>Huang, Heqing</author><author>Zhou, Wu</author><author>Wu, Wenfei</author><author>Zhang, Yiying</author></authors></contributors><titles><title>Learning from Big Malwares</title><secondary-title>Proceedings of the 7th ACM SIGOPS Asia-Pacific Workshop on Systems</secondary-title></titles><periodical><full-title>Proceedings of the 7th ACM SIGOPS Asia-Pacific Workshop on Systems</full-title></periodical><pages>12:1--12:8</pages><keywords/><dates><year>2016</year></dates><isbn>978-1-4503-4265-0</isbn><electronic-resource-num>10.1145/2967360.2967367</electronic-resource-num><urls><pdf-urls><url>internal-pdf://4ca5d3c9108c7d30d376d0b396a139b26e3d.pdf</url></pdf-urls><web-urls><url>http://doi.acm.org/10.1145/2967360.2967367</url></web-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Boomgaarden, Jacob</author><author>Corney, Joshua</author><author>Whittaker, Holly</author><author>Dinolt, George</author><author>McEachen, John</author></authors></contributors><titles><title>Mobile konami codes: Analysis of android malware services utilizing sensor and resource-based state changes</title><secondary-title>Proceedings of the Annual Hawaii International Conference on System Sciences</secondary-title></titles><periodical><full-title>Proceedings of the Annual Hawaii International Conference on System Sciences</full-title></periodical><pages>5578-5587</pages><volume>2016-March</volume><keywords><keyword>Android</keyword><keyword>Dynamic analysis</keyword><keyword>Emulated environment</keyword><keyword>Malware</keyword><keyword>Malware analysis</keyword><keyword>Mobile</keyword><keyword>Sensor</keyword><keyword>Smartphone</keyword></keywords><dates><year>2016</year></dates><isbn>9780769556703</isbn><electronic-resource-num>10.1109/HICSS.2016.690</electronic-resource-num><urls><pdf-urls><url>internal-pdf://5a103495557e8827159485d4f7105fc220b5(1).pdf</url></pdf-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Li, Li</author><author>Bartel, Alexandre</author><author>Bissyandé, Tegawendé F.</author><author>Klein, Jacques</author><author>Le Traon, Yves</author></authors></contributors><titles><title>ApkCombiner: Combining multiple android apps to support inter-app analysis</title><secondary-title>IFIP Advances in Information and Communication Technology</secondary-title></titles><periodical><full-title>IFIP Advances in Information and Communication Technology</full-title></periodical><pages>513-527</pages><volume>455</volume><issue>Icc</issue><keywords/><dates><year>2015</year></dates><isbn>9783319184661</isbn><electronic-resource-num>10.1007/978-3-319-18467-8_34</electronic-resource-num><urls><pdf-urls><url>internal-pdf://5b9efd8ed17f987c9a523ac369580b31f001.pdf</url></pdf-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sakamoto, Syunya</author><author>Okuda, Kenji</author><author>Nakatsuka, Ryo</author><author>Yamauchi, Toshihiro</author></authors></contributors><titles><title>DroidTrack: Tracking information diffusion and preventing information leakage on android</title><secondary-title>Lecture Notes in Electrical Engineering</secondary-title></titles><periodical><full-title>Lecture Notes in Electrical Engineering</full-title></periodical><pages>243-251</pages><volume>240 LNEE</volume><keywords><keyword>API control</keyword><keyword>Android</keyword><keyword>Malware</keyword><keyword>Preventing information leakage</keyword></keywords><dates><year>2013</year></dates><isbn>9789400767379</isbn><electronic-resource-num>10.1007/978-94-007-6738-6_31</electronic-resource-num><urls><pdf-urls><url>internal-pdf://4c461de535f2452f61b5794ab85dfee4bb65.pdf</url></pdf-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wong, Michelle Y</author><author>Lie, David</author></authors></contributors><titles><title> IntelliDroid: A Targeted Input Generator for the Dynamic Analysis of Android Malware </title><secondary-title>Ndss</secondary-title></titles><periodical><full-title>Ndss</full-title></periodical><pages>21-24</pages><issue>February</issue><keywords/><dates><year>2016</year></dates><isbn>189156241X</isbn><electronic-resource-num>10.14722/ndss.2016.23118</electronic-resource-num><urls><pdf-urls><url>internal-pdf://5e390327ca5218aef018c60938f0f2dc482b.pdf</url></pdf-urls></urls><abstract>—While dynamic malware analysis methods generally provide better precision than purely static methods, they have the key drawback that they can only detect malicious behavior if it is executed during analysis. This requires inputs that trigger the malicious behavior to be applied during execution. All current methods, such as hard-coded tests, random fuzzing and concolic testing, can provide good coverage but are inefficient because they are unaware of the specific capabilities of the dynamic analysis tool. In this work, we introduce IntelliDroid, a generic Android input generator that can be configured to produce inputs specific to a dynamic analysis tool, for the analysis of any Android application. Furthermore, IntelliDroid is capable of determining the precise order that the inputs must be injected, and injects them at what we call the device-framework interface such that system fidelity is preserved. This enables it to be paired with full-system dynamic analysis tools such as TaintDroid. Our experiments demonstrate that IntelliDroid requires an average of 72 inputs and only needs to execute an average of 5% of the application to detect malicious behavior. When evaluated on 75 instances of malicious behavior, IntelliDroid successfully identifies the behavior, extracts path constraints, and executes the malicious code in all but 5 cases. On average, IntelliDroid performs these tasks in 138.4 seconds per application.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Allix, Kevin</author><author>Bissyandé, Tegawendé F.</author><author>Jérome, Quentin</author><author>Klein, Jacques</author><author>State, Radu</author><author>Le Traon, Yves</author></authors></contributors><titles><title>Large-scale machine learning-based malware detection</title><secondary-title>Proceedings of the 4th ACM conference on Data and application security and privacy - CODASPY '14</secondary-title></titles><periodical><full-title>Proceedings of the 4th ACM conference on Data and application security and privacy - CODASPY '14</full-title></periodical><pages>163-166</pages><keywords><keyword>Android</keyword><keyword>Machine learning</keyword><keyword>Malware</keyword><keyword>Ten-Fold</keyword></keywords><dates><year>2014</year></dates><isbn>9781450322782</isbn><electronic-resource-num>10.1145/2557547.2557587</electronic-resource-num><urls><pdf-urls><url>internal-pdf://4f59dac9ee053ade6f061432f997751c7ba3.pdf</url></pdf-urls><web-urls><url>http://www.scopus.com/inward/record.url?eid=2-s2.0-84898944412&amp;partnerID=tZOtx3y1</url></web-urls></urls><abstract>To address the issue of malware detection, researchers have recently started to investigate the capabilities of machine- learning techniques for proposing effective approaches. Several promising results were recorded in the literature, many approaches being assessed with the common &quot;10-Fold cross validation&quot; scheme. This paper revisits the purpose of malware detection to discuss the adequacy of the&quot;10-Fold&quot;scheme for validating techniques that may not perform well in reality. To this end, we have devised several Machine Learning classifiers that rely on a novel set of features built from applications' CFGs. We use a sizeable dataset of over 50,000 Android applications collected from sources where state-of- the art approaches have selected their data. We show that our approach outperforms existing machine learning-based approaches. However, this high performance on usual-size datasets does not translate in high performance in the wild. Copyright is held by the author/owner(s).</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Butler, Margaret</author></authors></contributors><titles><title>Android: Changing the mobile landscape</title><secondary-title>IEEE Pervasive Computing</secondary-title></titles><periodical><full-title>IEEE Pervasive Computing</full-title></periodical><pages>4-7</pages><volume>10</volume><issue>1</issue><keywords><keyword>Android</keyword><keyword>App Inventor for Android</keyword><keyword>Apple App Store</keyword><keyword>BlackBerry</keyword><keyword>Technovation</keyword><keyword>iPhone</keyword></keywords><dates><year>2011</year></dates><isbn>1536-1268</isbn><electronic-resource-num>10.1109/MPRV.2011.1</electronic-resource-num><urls><pdf-urls><url>internal-pdf://7dc076bec86abfca83c64a74017c789d8382.pdf</url></pdf-urls></urls><abstract>The mobile phone landscape changed last year with the introduction of smart phones running Android, a platform marketed by Google. Android phones are the first credible threat to the iPhone market. Not only did Google target the same consumers as iPhone, it also aimed to win the hearts and minds of mobile application developers. On the basis of market share and the number of available apps, Android is a success.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Kiss, Nicolas</author><author>Lalande, Jean-François</author><author>Leslous, Mourad</author><author>Viet Triem Tong, Valérie</author></authors></contributors><titles><title>Kharon dataset: Android malware under a microscope</title><secondary-title>The Learning from Authoritative Security Experiment Results Workshop</secondary-title></titles><periodical><full-title>The Learning from Authoritative Security Experiment Results Workshop</full-title></periodical><pages>1-12</pages><keywords><keyword>malware</keyword></keywords><dates><year>2016</year></dates><urls><pdf-urls><url>internal-pdf://4c859391352cb708d9db283ec0341e898304.pdf</url></pdf-urls></urls><abstract>This study is related to the understanding of Android malware that now populate smartphone's markets. Our main objective is to help other malware researchers to better understand how malware works. Additionally, we aim at supporting the reproducibility of experiments analyzing malware samples: such a collection should improve the comparison of new detection or analysis methods. In order to achieve these goals, we describe here an Android malware collection called Kharon. This collection gives as much as possible a representation of the diversity of malware types. With such a dataset, we manually dissected each malware by reversing their code. We run them in a controlled and monitored real smartphone in order to extract their precise behavior. We also summarized their behavior using a graph representations of the information flows induced by an execution. With such a process, we obtained a precise knowledge of their malicious code and actions. As a result, researchers can figure out the engineering efforts of malware developers and understand their programming patterns. Another important result of this study is that most of malware now include triggering techniques that delay and hide their malicious activities. We also think that this collection can initiate a reference test set for future research works.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Skovoroda, Anastasia</author><author>Gamayunov, Dennis</author></authors></contributors><titles><title>Securing mobile devices: Malware mitigation methods</title><secondary-title>Journal of Wireless Mobile Networks, Ubiquitous Computing, and Dependable Applications</secondary-title></titles><periodical><full-title>Journal of Wireless Mobile Networks, Ubiquitous Computing, and Dependable Applications</full-title></periodical><pages>78-97</pages><volume>6</volume><issue>2</issue><keywords><keyword>malware</keyword><keyword>malware mitigation</keyword><keyword>mobile devices</keyword></keywords><dates><year>2015</year></dates><urls><pdf-urls><url>internal-pdf://7fb33a13fab8343640c59e6784163dfaa4e2.pdf</url></pdf-urls></urls><abstract>Malware on mobile handsets has always been a point of concern for its users. With the widespread adoption of smartphones and tablets and the emergence of centralized application markets it started to represent a significant threat. This situation has led to the development of defence methods for securing mobile devices coming from operating system developers, antivirus vendors and security researchers. In this paper we focus on the solutions proposed by security researchers which include both methods inherited from malware detection on personal computers and new methods specific to mobile device environment. This paper gives an overview of the history and development of mobile malware and provides a survey of the methods proposed for malware mitigation on mobile devices in the last years.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Somarriba, Oscar</author><author>Zurutuza, Urko</author><author>Uribeetxeberria, Roberto</author><author>Delosières, Laurent</author><author>Nadjm-Tehrani, Simin</author></authors></contributors><titles><title>Detection and Visualization of Android Malware Behavior</title><secondary-title>Journal of Electrical and Computer Engineering</secondary-title></titles><periodical><full-title>Journal of Electrical and Computer Engineering</full-title></periodical><volume>2016</volume><issue>i</issue><keywords/><dates><year>2016</year></dates><electronic-resource-num>10.1155/2016/8034967</electronic-resource-num><urls><pdf-urls><url>internal-pdf://7dfc303a7a8c459c2743371483cc3a9f8546.pdf</url></pdf-urls></urls><abstract>Malware analysts still need to manually inspect malware samples that are considered suspicious by heuristic rules. They dissect software pieces and look for malware evidence in the code. The increasing number of malicious applications targeting Android devices raises the demand for analyzing them to find where the malcode is triggered when user interacts with them. In this paper a framework to monitor and visualize Android applications’ anomalous function calls is described. Our approach includes platform-independent application instrumentation, introducing hooks in order to trace restricted API functions used at runtime of the application. These function calls are collected at a central server where the application behavior filtering and a visualization take place. This can help Android malware analysts in visually inspecting what the application under study does, easily identifying such malicious functions.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Lindorfer, Martina</author><author>Neumayr, Matthias</author><author>Caballero, Juan</author><author>Platzer, Christian</author></authors></contributors><titles><title>POSTER : Cross-Platform Malware : Write Once , Infect Everywhere</title><secondary-title>Proceedings of the 2013 ACM SIGSAC conference on Computer &amp; communications security - CCS '13</secondary-title></titles><periodical><full-title>Proceedings of the 2013 ACM SIGSAC conference on Computer &amp; communications security - CCS '13</full-title></periodical><pages>1425-1428</pages><keywords><keyword>cross-platform software</keyword><keyword>malware</keyword><keyword>vulnerabilities</keyword></keywords><dates><year>2013</year></dates><isbn>9781450324779</isbn><electronic-resource-num>10.1145/2508859.2512517</electronic-resource-num><urls><pdf-urls><url>internal-pdf://7c655f9e603df0998ffd4c2ec4280ef962c2.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2508859.2512517</url></web-urls></urls><abstract>In this ongoing work we perform the first systematic investigation of cross-platform (X-platform) malware. As a first step, this paper presents an exploration into existing X-platform malware families and X-platform vulnerabilities used to distribute them. Our exploration shows that X-platform malware uses a wealth of methods to achieve portability. It also shows that exploits for X-platform vulnerabilities are X-platform indeed and readily available in commercial exploit kits, making them an inexpensive distribution vector for X-platform malware.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Park, Yeongung</author><author>Lee, Chanhee</author><author>Kim, Jonghwa</author><author>Cho, Seong-Je</author><author>Choi, Jongmoo</author></authors></contributors><titles><title>An Android Security Extension to Protect Personal Information against Illegal Accesses and Privilege Escalation Attacks</title><secondary-title>Journal of Internet Services and Information Security</secondary-title></titles><periodical><full-title>Journal of Internet Services and Information Security</full-title></periodical><pages>29-42</pages><volume>2</volume><keywords><keyword>android</keyword><keyword>permission model</keyword><keyword>personal information</keyword><keyword>private</keyword><keyword>privilege escalation attack</keyword></keywords><dates><year>2012</year></dates><urls><pdf-urls><url>internal-pdf://7a24ce7e51c39fd11fdd8b03c5294819e216.pdf</url></pdf-urls><web-urls><url>http://isyou.info/jisis/vol2/no34/jisis-2012-vol2-no34-03.pdf</url></web-urls></urls><abstract>Recently, it is widespread for malware to collect sensitive information owned by third-party applications as well as to escalate its privilege to the system level (the highest level) on the Android platform. An attack of obtaining root-level privilege in an Android environment can form a serious threat to users from the viewpoint of breaking down the whole security system. This paper proposes a new scheme that effectively prevents privilege escalation attacks and protects users’ personal information in Android. Our proposed scheme can detect and respond to malware that illegally acquires rootlevel privilege using pWhitelist, a list of trusted programs with root-level permission. Moreover, the scheme does not permit even a privileged program to access users’ personal information based on the principle of least privilege. As a result, it protects personal information against illegal accesses by malicious applications even though they illegally obtain root-level permissions by exploiting vulnerabilities of trusted programs.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bartsch, Steffen</author><author>Berger, Bernhard J</author><author>Bodden, Eric</author><author>Brucker, Achim D</author><author>Heider, Jens</author><author>Kus, Mehmet</author><author>Maseberg, Sönke</author><author>Sohr, Karsten</author><author>Volkamer, Melanie</author></authors></contributors><titles><title>Zertifizierte Datensicherheit für Android-Anwendungen auf Basis statischer Programmanalysen</title><secondary-title>GI SICHERHEIT 2014, Sicherheit – Schutz und Zuverlässigkeit, Fachtagung, 19.-21. März 2014, Wien</secondary-title></titles><periodical><full-title>GI SICHERHEIT 2014, Sicherheit – Schutz und Zuverlässigkeit, Fachtagung, 19.-21. März 2014, Wien</full-title></periodical><pages>283-291</pages><keywords/><dates><year>2014</year></dates><isbn>9783885796220</isbn><urls><pdf-urls><url>internal-pdf://7a059eabf6060f287da846c63c6f4543b120.pdf</url></pdf-urls><web-urls><url>https://www.secuso.informatik.tu-darmstadt.de/fileadmin/user_upload/Group_SECUSO/Papers/Zertifizierte_Datensicherheit_fuer_Android-Anwendungen.pdf</url></web-urls></urls><abstract>Smartphones erfreuen sich einer stetig wachsenden Beliebtheit. Ein Grund hierfür ist die Vielzahl verschiedenster mobiler Anwendungen. Mit den Chancen, die sich hierdurch für den Benutzer, aber auch Organisationen bieten, sind Risiken verbunden, die beispielsweise zu einer Verletzung der Privatsphäre führen können. In diesem Beitrag diskutieren wir, wie statische Programmanalyse dabei helfen kann, Android-Anwendungen bzgl. der Sicherheit zu zertifizieren.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sun, Lichao</author></authors></contributors><titles><title>Significant Permission Identification for Android Malware Detection</title></titles><periodical/><keywords/><dates><year>2016</year></dates><isbn>9781509018772</isbn><urls><pdf-urls><url>internal-pdf://8cd2eced25d83ee2b580be3d1c8f4d85fe84.pdf</url></pdf-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Rasthofer, Siegfried</author><author>Asrar, Irfan</author><author>Huber, Stephan</author><author>Bodden, Eric</author></authors></contributors><titles><title>An Investigation of the Android/BadAccents Malware which Exploits a new Android Tapjacking Attack</title></titles><periodical/><keywords><keyword>AndroidMalware</keyword><keyword>Bank- ing Trojans</keyword><keyword>Botnet</keyword><keyword>Code Analysis</keyword><keyword>Threat Campaign</keyword><keyword>Vulnerability</keyword></keywords><dates><year>2005</year></dates><isbn>1581126204</isbn><urls><pdf-urls><url>internal-pdf://6d316ad8012ead190be6507a4730c97bfd3f.pdf</url></pdf-urls></urls><abstract>We report on a new threat campaign, underway in Korea, which infected around 20,000 Android users within two months. The campaign attacked mobile users with malicious applications spread via different channels, such as email attachments or SMS spam. A detailed investigation of the Android malware resulted in the identification of a new Android malware family Android/BadAccents. The family repre- sents current state-of-the-art inmobilemalware development for banking trojans. In this paper, we describe in detail the techniques this malware family uses and confront them with current state-of-the-art static and dynamic code-analysis techniques for Android applications. We highlight various challenges for automatic malware analysis frameworks that significantly hinder the fully automatic detection of malicious components in the mal- ware. Furthermore, the malware exploits a previously unknown tapjack- ing vulnerability in the Android operating system, which we describe in detail. As a result of this work, the vulnerability, affecting all Android versions, has been patched in the Android Open Source Project.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wang, Shanshan</author><author>Chen, Zhenxiang</author><author>Zhang, Lei</author><author>Yan, Qiben</author><author>Yang, Bo</author><author>Peng, Lizhi</author><author>Jia, Zhongtian</author></authors></contributors><titles><title>TrafficAV: An effective and explainable detection of mobile malware behavior using network traffic</title><secondary-title>2016 IEEE/ACM 24th International Symposium on Quality of Service, IWQoS 2016</secondary-title></titles><periodical><full-title>2016 IEEE/ACM 24th International Symposium on Quality of Service, IWQoS 2016</full-title></periodical><keywords/><dates><year>2016</year></dates><isbn>9781509026340</isbn><electronic-resource-num>10.1109/IWQoS.2016.7590446</electronic-resource-num><urls><pdf-urls><url>internal-pdf://07e28a930969025ea1eb2ffa6d1c7c408c89.pdf</url></pdf-urls></urls><abstract>Android has become the most popular mobile platform due to its openness and flexibility. Meanwhile, it has also become the main target of massive mobile malware. This phenomenon drives a pressing need for malware detection. In this paper, we propose TrafficAV, which is an effective and explainable detection of mobile malware behavior using network traffic. Network traffic generated by mobile app is mirrored from the wireless access point to the server for data analysis. All data analysis and malware detection are performed on the server side, which consumes minimum resources on mobile devices without affecting the user experience. Due to the difficulty in identifying disparate malicious behaviors of malware from the network traffic, TrafficAV performs a multi-level network traffic analysis, gathering as many features of network traffic as necessary. The proposed method combines network traffic analysis with machine learning algorithm (C4.5 decision tree) that is capable of identifying Android malware with high accuracy. In an evaluation with 8,312 benign apps and 5,560 malware samples, TCP flow detection model and HTTP detection model all perform well and achieve detection rates of 98.16% and 99.65%, respectively. In addition, for the benefit of user, TrafficAV not only displays the final detection results, but also analyzes the behind-the-curtain reason of malicious results. This allows users to further investigate each feature's contribution in the final result, and to grasp the insights behind the final decision. © 2016 IEEE.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Andow, Benjamin</author><author>Acharya, Akhil</author><author>Li, Dengfeng</author><author>Enck, William</author><author>Singh, Kapil</author><author>Xie, Tao</author></authors></contributors><titles><title>UiRef</title><secondary-title>Proceedings of the 10th ACM Conference on Security and Privacy in Wireless and Mobile Networks  - WiSec '17</secondary-title></titles><periodical><full-title>Proceedings of the 10th ACM Conference on Security and Privacy in Wireless and Mobile Networks  - WiSec '17</full-title></periodical><pages>23-34</pages><keywords/><dates><year>2017</year></dates><isbn>9781450350846</isbn><electronic-resource-num>10.1145/3098243.3098247</electronic-resource-num><urls><pdf-urls><url>internal-pdf://8d55c778671810e3e6d198a99d80a1563524.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=3098243.3098247</url></web-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Altaher, Altyeb</author><author>Barukab, Omar Mohammed</author></authors></contributors><titles><title>Intelligent Hybrid Approach for Android Malware Detection based on Permissions and API Calls</title></titles><periodical/><pages>60-67</pages><volume>8</volume><issue>6</issue><keywords><keyword>a market for android</keyword><keyword>also there</keyword><keyword>android malware detection</keyword><keyword>apps</keyword><keyword>are many other third-party</keyword><keyword>features selection</keyword><keyword>fuzzy inference system</keyword><keyword>google</keyword><keyword>particle swarm optimization</keyword><keyword>s play store is</keyword><keyword>stores for android apps</keyword><keyword>the</keyword></keywords><dates><year>2017</year></dates><urls><pdf-urls><url>internal-pdf://8b77a9774aab494713a6c41d1fb2fa39438a.pdf</url></pdf-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Rasthofer, Siegfried</author><author>Arzt, Steven</author><author>Lovat, Enrico</author><author>Bodden, Eric</author></authors></contributors><titles><title>D ROID F ORCE : Enforcing Complex , Data-Centric , System-Wide Policies in Android</title></titles><periodical/><keywords/><isbn>0123456789</isbn><urls><pdf-urls><url>internal-pdf://8b186ac0b894013e3c59e06c2f27b8facaa0.pdf</url></pdf-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Suarez-tangil, Guillermo</author><author>Conti, Mauro</author></authors></contributors><titles><title>2014-Detecting Targeted Smartphone Malware with Behavior-Triggering Stochastic Models.pdf</title></titles><periodical/><pages>1-19</pages><keywords><keyword>cloud analysis</keyword><keyword>smartphone security</keyword><keyword>targeted malware</keyword></keywords><urls><pdf-urls><url>internal-pdf://8ab9f2b31a3c4a9b86afccd579b0b73e81db.pdf</url></pdf-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bai, Guangdong</author><author>Gu, Liang</author><author>Feng, Tao</author><author>Guo, Yao</author><author>Chen, Xiangqun</author></authors></contributors><titles><title>Context-Aware Usage Control for Android Smart Phones as Extensions of PCs</title></titles><periodical/><pages>326-343</pages><keywords><keyword>access control</keyword><keyword>android</keyword><keyword>context-aware</keyword><keyword>mobile platform</keyword><keyword>security</keyword></keywords><dates><year>2010</year></dates><electronic-resource-num>10.1007/978-3-642-16161-2_19</electronic-resource-num><urls><pdf-urls><url>internal-pdf://8afbb92abba8330b87877b7749fed2a0f192 (1).pdf</url></pdf-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Rastogi, Vaibhav</author><author>Shao, Rui</author><author>Chen, Yan</author><author>Pan, Xiang</author><author>Zou, Shihong</author><author>Riley, Ryan</author></authors></contributors><titles><title> Are these Ads Safe: Detecting Hidden Attacks through the Mobile App-Web Interfaces </title><secondary-title>Ndss</secondary-title></titles><periodical><full-title>Ndss</full-title></periodical><pages>21-24</pages><issue>February</issue><keywords/><dates><year>2016</year></dates><isbn>189156241X</isbn><electronic-resource-num>10.1145/2872427.2883044</electronic-resource-num><urls><pdf-urls><url>internal-pdf://9ad897fe760e0304ea1fc7d3f79b6fdd377f.pdf</url></pdf-urls></urls><abstract>They find bad apps by clicking on &quot;boxes&quot; and checking whether the URL or target APK was malicious. They run on emulator (easy to defeat). The full comparison and limitations is in the annoyware paper.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Gasior, Wade</author><author>Yang, Li</author></authors></contributors><titles><title>Exploring covert channel in android platform</title><secondary-title>Proceedings of the 2012 ASE International Conference on Cyber Security, CyberSecurity 2012</secondary-title></titles><periodical><full-title>Proceedings of the 2012 ASE International Conference on Cyber Security, CyberSecurity 2012</full-title></periodical><pages>173-177</pages><keywords><keyword>Android</keyword><keyword>covert channel</keyword><keyword>mobile</keyword><keyword>security</keyword></keywords><dates><year>2013</year></dates><isbn>9780769550145</isbn><electronic-resource-num>10.1109/CyberSecurity.2012.29</electronic-resource-num><urls><pdf-urls><url>internal-pdf://7ff05a65dea9537cd2464d70675c4012dcbe (1).pdf</url></pdf-urls></urls><abstract>Network covert channels are used to exfiltrate information from a secured environment in a way that is extremely difficult to detect or prevent. These secret channels have been identified as an important security threat to governments and the private sector, and several research efforts have focused on the design, detection, and prevention of such channels in enterprise-type environments. Mobile devices have become a ubiquitous computing platform, and are storing or have access to an increasingly large amount of sensitive information. As such, these devices have become prime targets of attackers who desire access to this information. We explore the implementation of network covert channels on the Google Android mobile platform. Our work shows that covert communication channels can be successfully implemented on the Android platform to allow data to be leaked from these devices in a covert manner.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhang, Mu</author><author>Yin, Heng</author></authors></contributors><titles><title>Efficient, context-aware privacy leakage confinement for android applications without firmware modding</title><secondary-title>Asia ccs</secondary-title></titles><periodical><full-title>Asia ccs</full-title></periodical><pages>259-270</pages><keywords><keyword>android</keyword><keyword>bytecode rewriting</keyword><keyword>context-aware policy</keyword><keyword>privacy leakage</keyword></keywords><dates><year>2014</year></dates><isbn>9781450328005</isbn><electronic-resource-num>10.1145/2590296.2590312</electronic-resource-num><urls><pdf-urls><url>internal-pdf://08db239f6c06ae8c8edbaa70a48ef0562292.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2590296.2590312</url></web-urls></urls><abstract>As Android has become the most prevalent operating system in mobile devices, privacy concerns in the Android platform are increasing. A mechanism for efficient runtime enforcement of information-flow security policies in Android apps is desirable to confine privacy leakage. The prior works towards this problem require firmware modification (i.e., modding) and incur considerable runtime overhead. Besides, no effective mechanism is in place to distinguish malicious privacy leakage from those of legitimate uses. In this paper, we take a bytecode rewriting approach. Given an unknown Android app, we selectively insert instrumentation code into the app to keep track of private information and detect leakage at runtime. To distinguish legitimate and malicious leaks, we model the user's decisions with a context-aware policy enforcement mechanism. We have implemented a prototype called Capper and evaluated its efficacy on confining privacy-breaching apps. Our evaluation on 4723 real-world Android applications demonstrates that Capper can effectively track and mitigate privacy leaks. Moreover, after going through a series of optimizations, the instrumentation code only represents a small portion (4.48% on average) of the entire program. The runtime overhead introduced by Capper is also minimal, merely 1.5% for intensive data propagation.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Simon, Laurent</author><author>Xu, Wenduan</author><author>Anderson, Ross</author></authors></contributors><titles><title>Don’t Interrupt Me While I Type: Inferring Text Entered Through Gesture Typing on Android Keyboards</title><secondary-title>Proceedings on Privacy Enhancing Technologies</secondary-title></titles><periodical><full-title>Proceedings on Privacy Enhancing Technologies</full-title></periodical><pages>136-154</pages><volume>2016</volume><issue>3</issue><keywords><keyword>android</keyword><keyword>artifical neural network</keyword><keyword>gesture</keyword><keyword>gesture typing</keyword><keyword>google keyboard</keyword><keyword>interrupt</keyword><keyword>keyboard</keyword><keyword>mobile</keyword><keyword>nel</keyword><keyword>neural network</keyword><keyword>procfs</keyword><keyword>rec-</keyword><keyword>side chan-</keyword><keyword>smartphone</keyword><keyword>swiftkey</keyword><keyword>typing</keyword><keyword>virtual file</keyword><keyword>virtual file system</keyword></keywords><dates><year>2016</year></dates><electronic-resource-num>10.1515/popets-2016-0020</electronic-resource-num><urls><pdf-urls><url>internal-pdf://09f8832f9effc138036666f542132d92d78e.pdf</url></pdf-urls><web-urls><url>http://www.degruyter.com/view/j/popets.2016.2016.issue-3/popets-2016-0020/popets-2016-0020.xml</url></web-urls></urls><abstract>&lt;p&gt;We present a new side-channel attack against soft keyboards that support gesture typing on Android smartphones. An application without any special permissions can observe the number and timing of the screen hardware interrupts and system-wide software interrupts generated during user input, and analyze this information to make inferences about the text being entered by the user. System-wide information is usually considered less sensitive than app-specific information, but we provide concrete evidence that this may be mistaken. Our attack applies to all Android versions, including Android M where the SELinux policy is tightened.&lt;/p&gt;</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sun, Mingshen</author><author>Zheng, Min</author><author>Lui, John C. S.</author><author>Jiang, Xuxian</author></authors></contributors><titles><title>Design and implementation of an Android host-based intrusion prevention system</title><secondary-title>Proceedings of the 30th Annual Computer Security Applications Conference on - ACSAC '14</secondary-title></titles><periodical><full-title>Proceedings of the 30th Annual Computer Security Applications Conference on - ACSAC '14</full-title></periodical><pages>226-235</pages><keywords/><dates><year>2014</year></dates><isbn>9781450330053</isbn><electronic-resource-num>10.1145/2664243.2664245</electronic-resource-num><urls><pdf-urls><url>internal-pdf://8f42e55720b942e11fd1eda73f7c26ad7ef9.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2664243.2664245</url></web-urls></urls><abstract>Android has a dominating share in the mobile market and there is a significant rise of mobile malware targeting Android devices. Android malware accounted for 97% of all mobile threats in 2013 [26]. To protect smartphones and prevent privacy leakage, companies have implemented various host-based intrusion prevention systems (HIPS) on their Android devices. In this paper, we first analyze the implementations, strengths and weaknesses of three popular HIPS architectures. We demonstrate a severe loophole and weakness of an existing popular HIPS product in which hackers can readily exploit. Then we present a design and implementation of a secure and extensible HIPS platform---&quot;Patronus.&quot; Patronus not only provides intrusion prevention without the need to modify the Android system, it can also dynamically detect existing malware based on runtime information. We propose a two-phase dynamic detection algorithm for detecting running malware. Our experiments show that Patronus can prevent the intrusive behaviors efficiently and detect malware accurately with a very low performance overhead and power consumption.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zaki, Mohd</author><author>Shahib, Shahrin</author><author>Abdollah, Mohd Faizal</author><author>Selamat, Siti Rahayu</author><author>Huoy, Choo Yun</author></authors></contributors><titles><title>A Comparative Study on Feature Selection Method for N-gram Mobile Malware Detection</title></titles><periodical/><pages>1-7</pages><volume>19</volume><issue>5</issue><keywords><keyword>feature selection</keyword><keyword>linear svm</keyword><keyword>mobile mal-</keyword><keyword>mobile malware detection</keyword><keyword>n-gram</keyword><keyword>ware</keyword></keywords><dates><year>2017</year></dates><electronic-resource-num>10.6633/IJNS.201709.19(5).10</electronic-resource-num><urls><pdf-urls><url>internal-pdf://8e947d1af592215e16cfe68bde32d28934ef.pdf</url></pdf-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Shrestha, Babins</author><author>Mohamed, Manar</author><author>Borg, Anders</author><author>Saxena, Nitesh</author><author>Tamrakar, Sandeep</author></authors></contributors><titles><title>Curbing mobile malware based on user-transparent hand movements</title><secondary-title>2015 IEEE International Conference on Pervasive Computing and Communications, PerCom 2015</secondary-title></titles><periodical><full-title>2015 IEEE International Conference on Pervasive Computing and Communications, PerCom 2015</full-title></periodical><pages>221-229</pages><keywords/><dates><year>2015</year></dates><isbn>9781479980338</isbn><electronic-resource-num>10.1109/PERCOM.2015.7146532</electronic-resource-num><urls><pdf-urls><url>internal-pdf://8f8b9bb95a798a94aa4eab48389ddf2d0558.pdf</url></pdf-urls></urls><abstract>In this paper, we present a run-time defense to the malware that inspects the presence/absence of certain transparent human gestures exhibited naturally by users prior to accessing a desired resource. Specifically, we focus on the use of transparent gestures to prevent the misuse of three critical smartphone capabilities - the phone calling service, the camera resource and the NFC reading functionality. We show how the underlying natural hand movement gestures associated with the three services, calling, snapping and tapping, can be detected in a robust manner using multiple - motion, position and ambient - sensors and machine learning classifiers. To demonstrate the effectiveness of our approach, we collect data from multiple phone models and multiple users in real-life or near real-life scenarios emulating both benign settings as well as adversarial scenarios. Our results show that the three gestures can be detected with a high overall accuracy, and can be distinguished from one another and from other activities (benign or malicious), serving as a viable malware defense. In the future, we believe that transparent gestures associated with other smartphone services, such as sending SMS or email, can also be integrated with our system.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Apostolopoulos, Dimitris</author><author>Marinakis, Giannis</author><author>Ntantogian, Christoforos</author><author>Xenakis, Christos</author></authors></contributors><titles><title>Discovering authentication credentials in volatile memory of Android mobile devices</title><secondary-title>IFIP Advances in Information and Communication Technology</secondary-title></titles><periodical><full-title>IFIP Advances in Information and Communication Technology</full-title></periodical><pages>178-185</pages><volume>399</volume><keywords><keyword>Android</keyword><keyword>Android applications</keyword><keyword>credentials discovery</keyword><keyword>mobile security</keyword><keyword>volatile memory acquisition</keyword></keywords><dates><year>2013</year></dates><isbn>9783642374364</isbn><electronic-resource-num>10.1007/978-3-642-37437-1_15</electronic-resource-num><urls><pdf-urls><url>internal-pdf://8f9745c1d453906dce571652d45b23d1192c.pdf</url></pdf-urls></urls><abstract>This paper investigates whether authentication credentials in the vo- latile memory of Android mobile devices can be discovered using freely availa- ble tools. The experiments that we carried out for each application included two different sets: In the first set, our goal was to check if we could recover our own submitted credentials from the memory dump of the mobile device. In the second set of experiments, the goal was to find patterns that can indicate where the credentials are located in a memory dump of an Android device. The results revealed that the majority of the Android applications are vulnerable to creden- tials discovery even in case of applications that their security is critical, such as web banking and password manager applications.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Miramirkhani, Najmeh</author><author>Appini, Mahathi Priya</author><author>Nikiforakis, Nick</author><author>Polychronakis, Michalis</author></authors></contributors><titles><title>Spotless Sandboxes: Evading Malware Analysis Systems Using Wear-and-Tear Artifacts</title><secondary-title>Proceedings - IEEE Symposium on Security and Privacy</secondary-title></titles><periodical><full-title>Proceedings - IEEE Symposium on Security and Privacy</full-title></periodical><pages>1009-1024</pages><keywords><keyword>Bare-metal Host</keyword><keyword>Dynamic Analysis</keyword><keyword>Environment Aware Malware</keyword><keyword>Evasion</keyword><keyword>Malware Analysis</keyword><keyword>Sandbox</keyword><keyword>Virtualization</keyword></keywords><dates><year>2017</year></dates><isbn>9781509055326</isbn><electronic-resource-num>10.1109/SP.2017.42</electronic-resource-num><urls><pdf-urls><url>internal-pdf://8f4d0f8416f1e9765d558d4b773a3ae222dd.pdf</url></pdf-urls></urls><abstract>—Malware sandboxes, widely used by antivirus companies, mobile application marketplaces, threat detection appliances, and security researchers, face the challenge of environment-aware malware that alters its behavior once it de-tects that it is being executed on an analysis environment. Recent efforts attempt to deal with this problem mostly by ensuring that well-known properties of analysis environments are replaced with realistic values, and that any instrumentation artifacts remain hidden. For sandboxes implemented using virtual machines, this can be achieved by scrubbing vendor-specific drivers, processes, BIOS versions, and other VM-revealing indicators, while more sophisticated sandboxes move away from emulation-based and virtualization-based systems towards bare-metal hosts. We observe that as the fidelity and transparency of dynamic malware analysis systems improves, malware authors can resort to other system characteristics that are indicative of artificial environments. We present a novel class of sandbox evasion techniques that exploit the &quot; wear and tear &quot; that inevitably occurs on real systems as a result of normal use. By moving beyond how realistic a system looks like, to how realistic its past use looks like, malware can effectively evade even sandboxes that do not expose any instrumentation indicators, including bare-metal systems. We investigate the feasibility of this evasion strategy by conducting a large-scale study of wear-and-tear artifacts collected from real user devices and publicly available malware analysis services. The results of our evaluation are alarming: using simple decision trees derived from the analyzed data, malware can determine that a system is an artificial environment and not a real user device with an accuracy of 92.86%. As a step towards defending against wear-and-tear malware evasion, we develop statistical models that capture a system's age and degree of use, which can be used to aid sandbox operators in creating system images that exhibit a realistic wear-and-tear state.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Dou, Yanzhi</author><author>Zeng, Kexiong Curtis</author><author>Yang, Yaling</author><author>Yao, Danfeng Daphne</author></authors></contributors><titles><title>MadeCR : Correlation-based Malware Detection for Cognitive Radio</title><secondary-title>Ieee Infocom 2015</secondary-title></titles><periodical><full-title>Ieee Infocom 2015</full-title></periodical><pages>639-647</pages><keywords/><dates><year>2015</year></dates><isbn>9781479983810</isbn><electronic-resource-num>10.1109/INFOCOM.2015.7218432</electronic-resource-num><urls><pdf-urls><url>internal-pdf://8e7bb85ff6af36478c6f481f3706220f9e43.pdf</url></pdf-urls></urls><abstract>Cognitive Radio (CR) is an intelligent radio technology to boost spectrum utilization and is likely to be widely spread in the near future. However, its flexible software-oriented design may be exploited by an adversary to control CR devices to launch large scale attacks on a wide range of critical wireless infrastructures. To proactively mitigate the potentially serious threat, this paper presents MadeCR, a Correlation-based Malware detection system for CR. MadeCR exploits correlations among CR applications’ component actions to detect malicious behaviors. In addition, a significant contribution of the paper is a general experimentation method referred to as mutation testing to comprehensively evaluate the effectiveness of the anomaly detection method against a large number of artificial malware cases. Evaluation shows that MadeCR detects malicious behaviors within 1.10s at an accuracy of 94.9%</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Onwuzurike, Lucky</author><author>De Cristofaro, Emiliano</author></authors></contributors><titles><title>Danger is My Middle Name: Experimenting with SSL Vulnerabilities in Android Apps</title><secondary-title>Wisec</secondary-title></titles><periodical><full-title>Wisec</full-title></periodical><pages>1-39</pages><keywords><keyword>android security</keyword><keyword>information leakage</keyword><keyword>privacy</keyword></keywords><dates><year>2015</year></dates><isbn>978-1-4503-3623-9</isbn><electronic-resource-num>10.1145/2766498.2766522</electronic-resource-num><urls><pdf-urls><url>internal-pdf://14dc9351ec807fc6f31fd2744d799e8011f2.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1505.0589</url></web-urls></urls><abstract>This paper presents a measurement study of information leakage and SSL vulnerabilities in popular Android apps. We perform static and dynamic analysis on 100 apps, downloaded at least 10M times, that request full network access. Our experiments show that, although prior work has drawn a lot of attention to SSL implementations on mobile platforms, several popular apps (32/100) accept all certificates and all hostnames, and four actually transmit sensitive data unencrypted. We set up an experimental testbed simulating man-in-the-middle attacks and find that many apps (up to 91% when the adversary has a certificate installed on the victim's device) are vulnerable, allowing the attacker to access sensitive information, including credentials, files, personal details, and credit card numbers. Finally, we provide a few recommendations to app developers and highlight several open research problems.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Pieterse, Heloise</author><author>Olivier, Martin S.</author></authors></contributors><titles><title>Android botnets on the rise: Trends and characteristics</title><secondary-title>2012 Information Security for South Africa - Proceedings of the ISSA 2012 Conference</secondary-title></titles><periodical><full-title>2012 Information Security for South Africa - Proceedings of the ISSA 2012 Conference</full-title></periodical><keywords><keyword>Android</keyword><keyword>application</keyword><keyword>botnet</keyword><keyword>characteristics</keyword><keyword>malware</keyword><keyword>trends</keyword></keywords><dates><year>2012</year></dates><isbn>9781467321594</isbn><electronic-resource-num>10.1109/ISSA.2012.6320432</electronic-resource-num><urls><pdf-urls><url>internal-pdf://14fa30967d0cc75e2aa7b9aa4b0157f4d4a3.pdf</url></pdf-urls></urls><abstract>Smartphones are the latest technology trend of the 21st century. Today's social expectation of always staying connected and the need for an increase in productivity are the reasons for the increase in smartphone usage. One of the leaders of the smartphone evolution is Google's Android Operating System (OS). The openness of the design and the ease of customizing are the aspects that are placing Android ahead of the other smartphone OSs. Such popularity has not only led to an increase in Android usage but also to the rise of Android malware. Although such malware is not having a significant impact on the popularity of Android smartphones, it is however creating new possibilities for threats. One such threat is the impact of botnets on Android smartphones. Recently, malware has surfaced that revealed specific characteristics relating to traditional botnet activities. Malware such as Geinimi, Pjapps, DroidDream, and RootSmart all display traditional botnet functionalities. These malicious applications show that Android botnets is a reality. From a security perspective it is important to understand the underlying structure of an Android botnet. This paper evaluates Android malware with the purpose of identifying specific trends and characteristics relating to botnet behaviour. The botnet trends and characteristics are detected by a comprehensive literature study of well-known Android malware applications. The identified characteristics are then further explored in terms of the Android Botnet Development Model and the Android Botnet Discovery Process. The common identified trends and characteristics aid the understanding of Android botnet activities as well as the possible discovery of an Android bot. View full abstract»</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Jing, Yiming</author><author>Ahn, Gail-Joon</author><author>Doupé, Adam</author><author>Yi, Jeong Hyun</author></authors></contributors><titles><title>Checking Intent-based Communication in Android with Intent Space Analysis</title><secondary-title>Proceedings of the 11th ACM on Asia Conference on Computer and Communications Security - ASIA CCS '16</secondary-title></titles><periodical><full-title>Proceedings of the 11th ACM on Asia Conference on Computer and Communications Security - ASIA CCS '16</full-title></periodical><pages>735-746</pages><keywords/><dates><year>2016</year></dates><isbn>9781450342339</isbn><electronic-resource-num>10.1145/2897845.2897904</electronic-resource-num><urls><pdf-urls><url>internal-pdf://12dad8e143c2c34bba549b32a34f7922bbe9.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2897845.2897904</url></web-urls></urls><abstract>Intent-based communication is an inter-application commu-nication mechanism in Android. While its importance has been proven by plenty of security extensions that protect it with policy-driven mandatory access control, an overlooked problem is the verification of the security policies. Check-ing one security extension's policy is indeed complex. Fur-thermore, intent-based communication introduces even more complexities because it is mediated by multiple security ex-tensions that respectively enforce their own incompatible, distributed, and dynamic policies. This paper seeks a systematic approach to address the complexities involved in checking intent-based communica-tion. To this end, we propose intent space analysis. Intent space analysis formulates the intent forwarding functionali-ties of security extensions as transformations on a geometric intent space. We further introduce a policy checking frame-work called IntentScope that proactively and automatically aggregates distributed policies into a holistic and verifiable view. We evaluate our approach against customized An-droid OSs and commodity Android devices. In addition, we further conduct experiments with four security extensions to demonstrate how our approach helps identify potential vulnerabilities in each extension.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bos, Herbert</author><author>Monrose, Fabian</author><author>Blanc, Gregory</author></authors></contributors><titles><title>Research in attacks, intrusions, and defenses: 18th international symposium, RAID 2015 Kyoto, Japan, november 2-4, 2015 proceedings</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>382-404</pages><volume>9404</volume><keywords/><dates><year>2015</year></dates><isbn>9783319263618</isbn><electronic-resource-num>10.1007/978-3-319-26362-5</electronic-resource-num><urls><pdf-urls><url>internal-pdf://9f309e783a88e6ab951bd0fedf90910be92e.pdf</url></pdf-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Tang, Xiaoxiao</author><author>Liang, Yu</author><author>Ma, Xinjie</author><author>Lin, Yan</author><author>Gao, Debin</author></authors></contributors><titles><title>On the effectiveness of code-reuse-based android application obfuscation</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>333-349</pages><volume>10157 LNCS</volume><keywords><keyword>Android application</keyword><keyword>Code reuse</keyword><keyword>Java Native Interface</keyword><keyword>Obfuscation</keyword></keywords><dates><year>2017</year></dates><isbn>9783319531762</isbn><electronic-resource-num>10.1007/978-3-319-53177-9_18</electronic-resource-num><urls><pdf-urls><url>internal-pdf://9f186960a75c12e9112f3ae0cdc4021c108f.pdf</url></pdf-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhang, Yuan</author><author>Yang, Min</author><author>Xu, Bingquan</author><author>Yang, Zhemin</author><author>Gu, Guofei</author><author>Ning, Peng</author><author>Wang, X Sean</author><author>Zang, Binyu</author></authors></contributors><titles><title>Vetting undesirable behaviors in android apps with permission use analysis</title><secondary-title>Proceedings of the 2013 ACM SIGSAC conference on Computer {&amp;} communications security - CCS '13</secondary-title></titles><periodical><full-title>Proceedings of the 2013 ACM SIGSAC conference on Computer {&amp;} communications security - CCS '13</full-title></periodical><pages>611-622</pages><volume>9</volume><issue>11</issue><keywords><keyword>all or part of</keyword><keyword>analysis</keyword><keyword>android behavior representation</keyword><keyword>android security</keyword><keyword>behaviors</keyword><keyword>or</keyword><keyword>or hard copies of</keyword><keyword>permission</keyword><keyword>permission to make digital</keyword><keyword>permission use analysis</keyword><keyword>syscall</keyword><keyword>this work for personal</keyword><keyword>vetdroid</keyword><keyword>vetting undesirable</keyword></keywords><dates><year>2013</year></dates><isbn>9781450324779</isbn><electronic-resource-num>10.1145/2508859.2516689</electronic-resource-num><urls><pdf-urls><url>internal-pdf://14dc9d002854983e064ca3a2c08b40abba49.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2508859.2516689</url></web-urls></urls><abstract>Android platform adopts permissions to protect sensitive resources from untrusted apps. However, after permissions are granted by users at install time, apps could use these permissions (sensitive resources) with no further restrictions. Thus, recent years have witnessed the explosion of undesirable behaviors in Android apps. An important part in the defense is the accurate analysis of Android apps. However, traditional syscall-based analysis techniques are not well-suited for Android, because they could not capture critical interactions between the application and the Android system. This paper presents VetDroid, a dynamic analysis platform for reconstructing sensitive behaviors in Android apps from a novel permission use perspective. VetDroid features a systematic framework to effectively construct permission use behaviors, i.e., how applications use permissions to access (sensitive) system resources, and how these acquired permission-sensitive resources are further utilized by the application. With permission use behaviors, security analysts can easily examine the internal sensitive behaviors of an app. Using real-world Android malware, we show that VetDroid can clearly reconstruct fine-grained malicious behaviors to ease malware analysis. We further apply VetDroid to 1,249 top free apps in Google Play. VetDroid can assist in finding more information leaks than TaintDroid, a state-of-the-art technique. In addition, we show how we can use VetDroid to analyze fine-grained causes of information leaks that TaintDroid cannot reveal. Finally, we show that VetDroid can help identify subtle vulnerabilities in some (top free) applications otherwise hard to detect.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhou, Wu</author><author>Wang, Zhi</author><author>Zhou, Yajin</author><author>Jiang, Xuxian</author></authors></contributors><titles><title>DIVILAR: Diversifying Intermediate Language for Anti-repackaging on Android Platform</title><secondary-title>CODASPY '14 (4rd ACM conference on Data and Application Security and Privac)</secondary-title></titles><periodical><full-title>CODASPY '14 (4rd ACM conference on Data and Application Security and Privac)</full-title></periodical><pages>199-210</pages><keywords><keyword>android</keyword><keyword>anti-repackaging</keyword><keyword>virtual machine</keyword></keywords><dates><year>2014</year></dates><isbn>9781450322782</isbn><electronic-resource-num>10.1145/2557547.2557558</electronic-resource-num><urls><pdf-urls><url>internal-pdf://9f029f26a27587f0b32611077cb04000b1bb.pdf</url></pdf-urls></urls><abstract>App repackaging remains a serious threat to the emerging mobile app ecosystem. Previous solutions have mostly focused on the postmortem detection of repackaged apps by measuring similarity among apps. In this paper, we propose DIVILAR, a virtualization-based protection scheme to enable self-defense of Android apps against app repackaging. Specifically, it re-encodes an Android app in a diversified virtual instruction set and uses a specialized execute engine for these virtual instructions to run the protected app. However, this extra layer of execution may cause significant performance overhead, rendering the solution unacceptable for daily use. To address this challenge, we leverage a light-weight hooking mechanism to hook into Dalvik VM, the execution engine for Dalvik bytecode, and piggy-back the decoding of virtual instructions to that of Dalvik bytecode. By compositing virtual and Dalvik instruction execution, we can effectively eliminate this extra layer of execution and significantly reduce the performance overhead. We have implemented a prototype of DIVILAR. Our evaluation shows that DIVILAR is resilient against existing static and dynamic analysis, including these specific to VM-based protection. Further performance evaluation demonstrates its efficiency for daily use (an average of 16.2 and 8.9 increase to the start time and run time, respectively).</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Huang, Wei</author><author>Dong, Yao</author><author>Milanova, Ana</author><author>Dolby, Julian</author></authors></contributors><titles><title>Scalable and precise taint analysis for Android</title><secondary-title>Issta</secondary-title></titles><periodical><full-title>Issta</full-title></periodical><pages>106-117</pages><keywords><keyword>Android</keyword><keyword>CFL-reachability</keyword><keyword>Taint analysis</keyword><keyword>information flow</keyword></keywords><dates><year>2015</year></dates><isbn>9781450336208</isbn><electronic-resource-num>10.1145/2771783.2771803</electronic-resource-num><urls><pdf-urls><url>internal-pdf://9d8cb6e0a7a0bf18dec7578c24764fc377ae.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2771783.2771803</url></web-urls></urls><abstract>We propose a type-based taint analysis for Android. Con- cretely, we present DFlow, a context-sensitive information flow type system, and DroidInfer, the corresponding type in- ference analysis for detecting privacy leaks in Android apps. We present novel techniques for error reporting based on CFL-reachability, as well as novel techniques for handling of Android-specific features, including libraries, multiple entry points and callbacks, and inter-component communication. Empirical results show that our approach is scalable and precise. DroidInfer scales well in terms of time and memory and has false-positive rate of 15.7%. It detects privacy leaks in apps from the Google Play Store and in known malware.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Rapoport, Marianna</author><author>Suter, Philippe</author><author>Wittern, Erik</author><author>Lhotak, Ondrej</author><author>Dolby, Julian</author></authors></contributors><titles><title>Who you gonna call? analyzing web requests in android applications</title><secondary-title>IEEE International Working Conference on Mining Software Repositories</secondary-title></titles><periodical><full-title>IEEE International Working Conference on Mining Software Repositories</full-title></periodical><pages>80-90</pages><keywords><keyword>Dynamic Analysis</keyword><keyword>Mobile Applications</keyword><keyword>Static Analysis</keyword><keyword>Web Requests</keyword></keywords><dates><year>2017</year></dates><isbn>9781538615447</isbn><electronic-resource-num>10.1109/MSR.2017.11</electronic-resource-num><urls><pdf-urls><url>internal-pdf://30bcb70dd51ca7c4d275af3ed87e55644802.pdf</url></pdf-urls></urls><abstract>—Relying on ubiquitous Internet connectivity, applica-tions on mobile devices frequently perform web requests during their execution. They fetch data for users to interact with, invoke remote functionalities, or send user-generated content or meta-data. These requests collectively reveal common practices of mo-bile application development, like what external services are used and how, and they point to possible negative effects like security and privacy violations, or impacts on battery life. In this paper, we assess different ways to analyze what web requests Android applications make. We start by presenting dynamic data collected from running 20 randomly selected Android applications and observing their network activity. Next, we present a static analysis tool, Stringoid, that analyzes string concatenations in Android applications to estimate constructed URL strings. Using Stringoid, we extract URLs from 30, 000 Android applications, and compare the performance with a simpler constant extraction analysis. Finally, we present a discussion of the advantages and limitations of dynamic and static analyses when extracting URLs, as we compare the data extracted by Stringoid from the same 20 applications with the dynamically collected data.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Ye, Quanqi</author><author>Bai, Guangdong</author><author>Wang, Kailong</author><author>Dong, Jin Song</author></authors></contributors><titles><title>Formal Analysis of a Single Sign-On Protocol Implementation for Android</title><secondary-title>2015 20th International Conference on Engineering of Complex Computer Systems (ICECCS)</secondary-title></titles><periodical><full-title>2015 20th International Conference on Engineering of Complex Computer Systems (ICECCS)</full-title></periodical><pages>90-99</pages><keywords/><dates><year>2015</year></dates><isbn>978-1-4673-8581-7</isbn><electronic-resource-num>10.1109/ICECCS.2015.20</electronic-resource-num><urls><pdf-urls><url>internal-pdf://32d93a3719ac5e4fce14aafb878a4ff2ca60.pdf</url></pdf-urls><web-urls><url>https://pdfs.semanticscholar.org/d91a/32d93a3719ac5e4fce14aafb878a4ff2ca60.pdf%0Ahttp://ieeexplore.ieee.org/document/7384233/</url></web-urls></urls><abstract>—As the boom of social networking, Single Sign-On (SSO) services developed by major commercial service providers like Facebook, Google and Twitter, have been widely used by web-based service providers as an alternative authentication scheme. Despite rich research has focused on browser-based web applications, little has been conducted on the implementation of SSO on mobile platforms. However, we reveal that due to the fundamental difference of isolation mechanism in mobile OS and applications from the origin-based isolation in browsers, the SSO encounters a novel attack surface and adversarial models. We perform the first formal analysis on the implementation of the most widely used SSO service–Facebook Login. Our study takes as input the available implementation and dynamic execution traces of Facebook SDK for Android, from which we abstract the implementation-level protocol. The protocol is then modeled in typed Pi-calculus, and automatically checked against the mobile platform specific attack models in a protocol verifier Proverif. Our study has successfully identified a major vulnerability, which allows an attacker to steal authentication credentials from victims and log into their Facebook accounts.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Kraunelis, Joshua</author><author>Chen, Yinjie</author><author>Ling, Zhen</author><author>Fu, Xinwen</author><author>Zhao, Wei</author></authors></contributors><titles><title>On malware leveraging the Android accessibility framework</title><secondary-title>Lecture Notes of the Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering, LNICST</secondary-title></titles><periodical><full-title>Lecture Notes of the Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering, LNICST</full-title></periodical><pages>512-523</pages><volume>131</volume><keywords><keyword>Android</keyword><keyword>Attack</keyword><keyword>Malware</keyword></keywords><dates><year>2014</year></dates><isbn>9783319115689</isbn><electronic-resource-num>10.1007/978-3-319-11569-6_40</electronic-resource-num><urls><pdf-urls><url>internal-pdf://23d0c9af277e87b3e9c58757a6360cc20549.pdf</url></pdf-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Lai, Gu-Hsin</author><author>Lee, Yen-Hsien</author><author>Chu, Tsai-Hsin</author><author>Cheng, Tsang-Hsiang</author></authors></contributors><titles><title>A Structure Similarity-based Approach to Malicious Android App Detection</title><secondary-title>Pacis 2015 Proceedings</secondary-title></titles><periodical><full-title>Pacis 2015 Proceedings</full-title></periodical><keywords/><dates><year>2015</year></dates><urls><pdf-urls><url>internal-pdf://24b424412ba839171b160c37668fc3415853.pdf</url></pdf-urls></urls><abstract>The advance of computational power and storage device equipped the mobile devices to involve more and more peoples’ daily works, and store voluminous organization’s confidential documents as well as general user’s personal data. The extensibility feature of mobile device has attracted many app developers’ contributions; while it in turns becomes the attacking target of the computer hackers. The F-Secure has reported that the profit-motivated threats on mobile device have been increasing; that is, an infected mobile device might send out personal or organizations’ confidential data or send SMS messages to premium rate numbers without user’s consent. Generally, the Android app developer can publish their apps on either official stores (i.e., Google Play) or third-party stores or both. In the Android market, the accumulated number of applications and games has been over one million. However, due to the lack of checking and validating mechanism, attackers can also distribute their malicious apps via the online store platform quickly and easily. As a result, the needs for real-time malware detection and classification become critical for Android users and official market as the number of Android apps increases sharply. In this study, we proposed the structure similarity-based malicious app detection approach to address the need of malicious Android app detection. On the basis of source code analysis, we intend to identify the sensitive features in malicious apps; that is, the API calls and system commands that related to some malicious behaviors, to build their Class-Method-API hierarchies. A new-coming app can be detected as malicious or not by assessing the structure similarity between its hierarchy and that of each malicious app. We have collected 1,259 malwares from Android Malware Genome Project and 1,259 benign apps from Google Play market for the evaluation purpose. We intend to implement a k-fold cross-validation and adopt VirusTotal as our performance benchmark. Overall, the proposed approach is expected to effectively and efficiently detect Android malwares and is appropriate for mobile devices because the maintenance and similarity assessment of partial hierarchies cost less space and computation resources.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Cao, Yinzhi</author><author>Fratantonio, Yanick</author><author>Bianchi, Antonio</author><author>Egele, Manuel</author><author>Kruegel, Christopher</author><author>Vigna, Giovanni</author><author>Chen, Yan</author></authors></contributors><titles><title>EdgeMiner: Automatically Detecting Implicit Control Flow Transitions through the Android Framework-PPT</title><secondary-title>ISOC Network and Distributed System Security Symposium</secondary-title></titles><periodical><full-title>ISOC Network and Distributed System Security Symposium</full-title></periodical><pages>8-11</pages><issue>February</issue><keywords/><dates><year>2015</year></dates><isbn>1-891562-38-X</isbn><electronic-resource-num>10.14722/ndss.2015.23140</electronic-resource-num><urls><pdf-urls><url>internal-pdf://25df64bb1613d41a7761026a25c06867c5d6.pdf</url></pdf-urls><web-urls><url>http://www.internetsociety.org/doc/edgeminer-automatically-detecting-implicit-control-flow-transitions-through-android-framework</url></web-urls></urls><abstract>—A wealth of recent research proposes static data flow analysis for the security analysis of Android applications. One of the building blocks that these analysis systems rely upon is the computation of a precise control flow graph. The callback mechanism provided and orchestrated by the Android framework makes the correct generation of the control flow graph a challenging endeavor. From the analysis’ point of view, the invocation of a callback is an implicit control flow transition facilitated by the framework. Existing static analysis tools model callbacks through either manually curated lists or ad-hoc heuristics. This work demonstrates that both approaches are insufficient, and allow malicious applications to evade detection by state-of-the-art analysis systems. To address the challenge of implicit control flow transitions (i.e., callbacks) through the Android framework, we are the first to propose, implement, and evaluate a systematic treatment of this aspect. Our implementation, called EDGEMINER, statically analyzes the entire Android framework to automatically generate API summaries that describe implicit control flow transitions through the Android framework.We use EDGEMINER to analyze three major versions of the Android framework. EDGEMINER identified 19,647 callbacks in Android 4.2, suggesting that a manual treatment of this challenge is likely infeasible. Our evaluation demonstrates that the current insufficient treatment of callbacks in state-of-the-art analysis tools results in unnecessary imprecision. For example, FlowDroid misses a variety of leaks of privacy sensitive data from benign off-the-shelf Android applications because of its inaccurate handling of callbacks. Of course, malicious applications can also leverage this blind spot in current analysis systems to evade detection at will. To alleviate these drawbacks, we make our results publicly available and demonstrate how these results can easily be integrated into existing state-of-the-art analysis tools. Our work allows existing tools to comprehensively address the challenge of callbacks and identify previously undetected leakage of privacy sensitive data.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sartea, Riccardo</author><author>Farinelli, Alessandro</author></authors></contributors><titles><title>A Monte Carlo Tree Search approach to Active Malware Analysis</title></titles><periodical/><pages>3831-3837</pages><keywords><keyword>Agent-based and Multi-agent Systems: Noncooperativ</keyword><keyword>Machine Learning: Reinforcement Learning</keyword><keyword>Multidisciplinary Topics and Applications: AI&amp;Secu</keyword></keywords><dates><year>2016</year></dates><urls><pdf-urls><url>internal-pdf://16db2f1b55946527e43570791ded666d3a43.pdf</url></pdf-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Fratantonio, Yanick</author><author>Bianchi, Antonio</author><author>Barbara, U C Santa</author><author>Kruegel, Christopher</author><author>Vigna, Giovanni</author></authors></contributors><titles><title>CLAPP: Characterizing Loops in Android Applications</title><secondary-title>FSE '15 (the ACM SIGSOFT Symposium on the Foundations of Software Engineering)</secondary-title></titles><periodical><full-title>FSE '15 (the ACM SIGSOFT Symposium on the Foundations of Software Engineering)</full-title></periodical><pages>687-697</pages><keywords><keyword>android</keyword><keyword>loop analysis</keyword><keyword>static analysis</keyword></keywords><dates><year>2015</year></dates><isbn>9781450336758</isbn><electronic-resource-num>10.1145/2804345.2804355</electronic-resource-num><urls><pdf-urls><url>internal-pdf://20f53edbef3468a041a25c848c20d3bc02b7.pdf</url></pdf-urls></urls><abstract>When performing program analysis, loops are one of the most important aspects that needs to be taken into account. In the past, many approaches have been proposed to analyze loops to perform different tasks, ranging from compiler optimizations to Worst-Case Execution Time (WCET) analysis. While these approaches are powerful, they focus on tackling very specific categories of loops and known loop patterns, such as the ones for which the number of iterations can be statically determined. In this work, we developed a static analysis framework to characterize and analyze generic loops, without relying on techniques based on pattern matching. For this work, we focus on the Android platform, and we implemented a prototype, called Clapp, that we used to perform the first large-scale empirical study of the usage of loops in Android applications. In particular, we used our tool to analyze a total of 4,110,510 loops found in 11,823 Android applications. As part of our evaluation, we provide the detailed results of our empirical study, we show how our analysis was able to de- termine that the execution of 63.28%of the loops is bounded, and we discuss several interesting insights related to the per- formance issues and security aspects associated with loops</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Fedler, Rafael</author><author>Kulicke, Marcel</author><author>Schutte, Julian</author></authors></contributors><titles><title>An antivirus API for Android malware recognition</title><secondary-title>Proceedings of the 2013 8th International Conference on Malicious and Unwanted Software: &quot;The Americas&quot;, MALWARE 2013</secondary-title></titles><periodical><full-title>Proceedings of the 2013 8th International Conference on Malicious and Unwanted Software: &quot;The Americas&quot;, MALWARE 2013</full-title></periodical><pages>77-84</pages><issue>1</issue><keywords/><dates><year>2013</year></dates><isbn>9781479925339</isbn><electronic-resource-num>10.1109/MALWARE.2013.6703688</electronic-resource-num><urls><pdf-urls><url>internal-pdf://48cb837df8480dc62f94bd9ebfcd79a8aae5.pdf</url></pdf-urls></urls><abstract>On the Android platform, antivirus software suffers from significant deficiencies. Due to platform limitations, it can- not access or monitor an Android device’s file system, or dynamic behavior of installed apps. This includes the down- loading of malicious files after installation, and other file system alterations. That has grave consequences for device security, as any app – even without openly malicious code in its package file – can still download and execute malicious files without any danger of being detected by antivirus soft- ware. In this paper, we present a proposal for an antivirus interface to be added to the Android API. It allows for three primary operations: (1) on-demand file system scan- ning and traversal, (2) on-change file system monitoring, (3) a set of basic operations that allow for scanning of ar- bitrary file system objects without disclosing their contents. This interface can enable Android antivirus software to de- ploy techniques for malware recognition similar to those of desktop antivirus systems. The proposed measures comply with Android’s security architecture and user data privacy is maintained. Through our approach, antivirus software on the Android platform would reach a level of effective- ness significantly higher than currently, and comparable to that of desktop antivirus software.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sahami Shirazi, Alireza</author><author>Henze, Niels</author><author>Schmidt, Albrecht</author><author>Goldberg, Robin</author><author>Schmidt, Benjamin</author><author>Schmauder, Hansjörg</author></authors></contributors><titles><title>Insights into layout patterns of mobile user interfaces by an automatic analysis of Android apps</title></titles><periodical/><pages>275-284</pages><keywords/><dates><year>2013</year></dates><isbn>978-1-4503-2138-9</isbn><electronic-resource-num>10.1145/2494603.2480308</electronic-resource-num><urls><pdf-urls><url>internal-pdf://18e8d4976714e5af337972d26ab0dd5ba748.pdf</url></pdf-urls><web-urls><url>http://doi.acm.org/10.1145/2494603.2480308</url></web-urls></urls><abstract>Mobile phones recently evolved into smartphones that provide a wide range of services. One aspect that differentiates smartphones from their predecessor is the app model. Users can easily install third party applications from central mobile application stores. In this paper we present a process to gain insights into mobile user interfaces on a large scale. Using the developed process we automatically disassemble and analyze the 400 most popular free Android applications. The results suggest that the complexity of the user interface differs between application categories. Further, we analyze interface layouts to determine the most frequent interface elements and identify combinations of interface widgets. The most common combination that consists of three nested elements covers 5.43% of all interface elements. It is more frequent than progress bars and checkboxes. The ten most frequent patterns together cover 21.13% of all interface elements. They are all more frequent than common widget including radio buttons and spinner. We argue that the combinations identified not only provide insights about current mobile interfaces, but also enable the development of new optimized widgets.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Yang, Chao</author><author>Zhang, Jialong</author><author>Gu, Guofei</author></authors></contributors><titles><title>Understanding the Market-Level and Network-Level Behaviors of the Android Malware Ecosystem</title><secondary-title>Proceedings - International Conference on Distributed Computing Systems</secondary-title></titles><periodical><full-title>Proceedings - International Conference on Distributed Computing Systems</full-title></periodical><pages>2452-2457</pages><keywords/><dates><year>2017</year></dates><isbn>9781538617915</isbn><electronic-resource-num>10.1109/ICDCS.2017.297</electronic-resource-num><urls><pdf-urls><url>internal-pdf://41f2dd3c939cdc4ee1be4ea9395ba78eef07.pdf</url></pdf-urls></urls><abstract>paper 317, usenix security 2014</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Seo, Jaebaek</author><author>Kim, Daehyeok</author><author>Cho, Donghyun</author><author>Kim, Taesoo</author><author>Shin, Insik</author></authors></contributors><titles><title>FlexDroid: Enforcing In-App Privilege Separation in Android</title><secondary-title>Annual Network and Distributed System Security Symposium (NDSS)</secondary-title></titles><periodical><full-title>Annual Network and Distributed System Security Symposium (NDSS)</full-title></periodical><pages>21-24</pages><issue>February</issue><keywords/><dates><year>2016</year></dates><isbn>189156241X</isbn><electronic-resource-num>10.14722/ndss.2016.23485</electronic-resource-num><urls><pdf-urls><url>internal-pdf://51f403a8a5eef123090a961b7aefd836df07(1).pdf</url></pdf-urls></urls><abstract>—Mobile applications are increasingly integrating third-party libraries to provide various features, such as ad-vertising, analytics, social networking, and more. Unfortunately, such integration with third-party libraries comes with the cost of potential privacy violations of users, because Android always grants a full set of permissions to third-party libraries as their host applications. Unintended accesses to users' private data are underestimated threats to users' privacy, as complex and often obfuscated third-party libraries make it hard for application developers to estimate the correct behaviors of third-party libraries. More critically, a wide adoption of native code (JNI) and dynamic code executions such as Java reflection or dynamic code reloading, makes it even harder to apply state-of-the-art security analysis. In this work, we propose FLEXDROID, a new Android security model and isolation mechanism, that provides dy-namic, fine-grained access control for third-party libraries. With FLEXDROID, application developers not only can gain a full control of third-party libraries (e.g., which permissions to grant or not), but also can specify how to make them behave after detecting a privacy violation (e.g., providing a mock user's information or kill). To achieve such goals, we define a new notion of principals for third-party libraries, and develop a novel security mechanism, called inter-process stack inspection that is effective to JNI as well as dynamic code execution. Our usability study shows that developers can easily adopt FLEXDROID's policy to their existing applications. Finally, our evaluation shows that FLEXDROID can effectively restrict the permissions of third-party libraries with negligible overheads.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Nadji, Yacin</author><author>Giffin, Jonathon</author><author>Traynor, Patrick</author></authors></contributors><titles><title>Automated remote repair for mobile malware</title><secondary-title>Annual Computer Security Applications Conference</secondary-title></titles><periodical><full-title>Annual Computer Security Applications Conference</full-title></periodical><pages>413</pages><keywords/><dates><year>2011</year></dates><isbn>9781450306720</isbn><electronic-resource-num>10.1145/2076732.2076791</electronic-resource-num><urls><pdf-urls><url>internal-pdf://42d7c8eed6a0f377f490e025af342882514a (1).pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2076732.2076791</url></web-urls></urls><abstract>Mobile application markets currently serve as the main line of defense against malicious applications. While market- place revocations have successfully removed the few overtly malicious applications installed on mobile devices, the antic- ipated coming flood of mobile malware mandates the need for mechanisms that can respond faster than manual inter- vention. In this paper, we propose an infrastructure that automatically identifies and responds to malicious mobile applications based on their network behavior. We design and implement a prototype, Airmid, that uses cooperation between in-network sensors and smart devices to identify the provenance of malicious traffic. We then develop sam- ple malicious mobile applications exceeding the capabilities of malware recently discovered in the wild, demonstrate the ease with which they can evade current detection techniques, and then use Airmid to show a range of automated recovery responses ranging from on-device firewalling to application removal.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Paper, Conference</author></authors></contributors><titles><title>Preparing for Malware that Uses Covert Communication Channels : The Case of Tor- based Android Malware</title></titles><periodical/><pages>85-96</pages><issue>October</issue><keywords><keyword>android</keyword><keyword>anti-malware</keyword><keyword>detection</keyword><keyword>malware</keyword><keyword>mobile malware</keyword><keyword>privacy</keyword><keyword>tor network</keyword></keywords><dates><year>2015</year></dates><isbn>9781941968031</isbn><electronic-resource-num>10.13140/2.1.1298.5921</electronic-resource-num><urls><pdf-urls><url>internal-pdf://65aec02fd88396c83e1ef8b22efe3b9159a1.pdf</url></pdf-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sun, San-tsai</author><author>Cuadros, Andrea</author><author>Beznosov, Konstantin</author></authors></contributors><titles><title>Android Rooting: Methods, Detection, and Evasion</title><secondary-title>Proceedings of the 5th Annual ACM CCS Workshop on Security and Privacy in Smartphones and Mobile Devices (SPSM)</secondary-title></titles><periodical><full-title>Proceedings of the 5th Annual ACM CCS Workshop on Security and Privacy in Smartphones and Mobile Devices (SPSM)</full-title></periodical><pages>3-14</pages><keywords><keyword>android rooting</keyword><keyword>privileged malware</keyword></keywords><dates><year>2015</year></dates><isbn>9781450338196</isbn><electronic-resource-num>10.1145/2808117.2808126</electronic-resource-num><urls><pdf-urls><url>internal-pdf://33f6bed8735f77782d5c3a38de84968eb640.pdf</url></pdf-urls></urls><abstract>They analyze different rooting methods. From recover(using custom OTA interface) and exploit. &gt;= 4.3 am app cannot diretly call setuid: a su daemon is used. Apps check for root with different methods (file existance, permissions, processes). They suggest that there should be a reliable way to understand a device is rooted.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Malek, Sam</author><author>Bagheri, Hamid</author><author>Sadeghi, Alireza</author></authors></contributors><titles><title>Automated detection and mitigation of inter-application security vulnerabilities in Android (invited talk)</title><secondary-title>Proceedings of the 2nd International Workshop on Software Development Lifecycle for Mobile - DeMobile 2014</secondary-title></titles><periodical><full-title>Proceedings of the 2nd International Workshop on Software Development Lifecycle for Mobile - DeMobile 2014</full-title></periodical><pages>17-18</pages><keywords><keyword>android</keyword><keyword>mobile security</keyword><keyword>program analysis</keyword></keywords><dates><year>2014</year></dates><isbn>9781450332255</isbn><electronic-resource-num>10.1145/2661694.2661699</electronic-resource-num><urls><pdf-urls><url>internal-pdf://39a7b1b6f145620d85471b356f99459d1291 (1).pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2661694.2661699</url></web-urls></urls><abstract>Android is the most popular platform for mobile devices. It facilitates sharing data and services between applications by providing a rich inter-application communication system. While such sharing can be controlled by the Android permission system, enforcing permissions is not sufficient to prevent security violations, since permissions may be mismanaged, intentionally or unintentionally, which can compromise user privacy. In this paper, we provide an overview of a novel approach for compositional analysis of Android inter-application vulnerabilities, entitled COVERT. Our analysis is modular to enable incremental analysis of applications as they are installed on an Android device. It extracts security specifications from application packages, captures them in an analyzable formal specification language, and checks whether it is safe for a combination of applications - holding certain permissions and potentially interacting with each other - to install simultaneously. To our knowledge, our work is the first formally-precise analysis tool for automated compositional analysis of Android applications. </abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Kajiwara, Naoya</author><author>Matsumoto, Shinichi</author><author>Nishimoto, Yuuki</author><author>Hori, Yoshiaki</author><author>Sakurai, Kouichi</author></authors></contributors><titles><title>Detection of Privacy Sensitive Information Retrieval Using API Call Logging Mechanism within Android Framework</title><secondary-title>Journal of Networks</secondary-title></titles><periodical><full-title>Journal of Networks</full-title></periodical><pages>2905-2913</pages><volume>9</volume><issue>11</issue><keywords><keyword>android</keyword><keyword>malware</keyword><keyword>privacy</keyword><keyword>sandbox</keyword></keywords><dates><year>2014</year></dates><isbn>978-3-319-04282-4</isbn><electronic-resource-num>10.4304/jnw.9.11.2905-2913</electronic-resource-num><urls><pdf-urls><url>internal-pdf://33be2805d0d8f03cacb7a0ac9de3e23d3d0c.pdf</url></pdf-urls><web-urls><url>http://ojs.academypublisher.com/index.php/jnw/article/view/13567</url></web-urls></urls><abstract>In recent years, Android based smartphones have become popular. As a feature of a smart phone, much information for identifying a user and information linked to user’s privacy is saved in a terminal. For this feature, many malwares targeting privacy information are developed. Many security mechanisms are provided in Android for such malwares. However, it is difficult for users to judge the availability of application by understanding the potential threats in the application. In this paper, we focus on acquisition of information by using a remote procedure call when we invoke the API to acquire phone ID. We design a methodology to record invocation of the API by inserting Log.v methods. Proposal method is implemented within Android framework layer. For this reason, malicious application developers cannot circumvent log output by their malwares. We examined our method, and confirmed empirically the record of the invocation behavior of the API to acquire phone ID.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Louk, Maya</author><author>Lim, Hyotaek</author><author>Lee, HoonJae</author><author>Atiquzzaman, Mohammed</author></authors></contributors><titles><title>An Effective Framework of Behavior Detection- Advanced Static Analysis for Malware Detection</title><secondary-title>International Symposium on Communications and Information Technologies (ISCIT)</secondary-title></titles><periodical><full-title>International Symposium on Communications and Information Technologies (ISCIT)</full-title></periodical><pages>361-365</pages><keywords><keyword>advanced static analysis</keyword><keyword>detection</keyword><keyword>efficient behavior</keyword><keyword>framework</keyword><keyword>malware</keyword><keyword>sophisticated malware</keyword></keywords><dates><year>2014</year></dates><isbn>978-1-4799-4416-3</isbn><electronic-resource-num>10.1109/ISCIT.2014.7011932</electronic-resource-num><urls><pdf-urls><url>internal-pdf://41b99fbb48ed155116d3b1f30dbe1f34f43a (1).pdf</url></pdf-urls></urls><abstract>— The recent development of malwares is rapidly progressing and intruders are getting better at concealing malwares to deceive users while researchers are developing security systems. One of the methods which is commonly used is behavior detection. In this paper, a more efficient behavior detection method and the framework of intrusion malware security system is presented. In addition, the implementation of the prototype and the result of the discussion is presented under advanced static analysis which is added PE Header study. Our proposed framework will (1) contribute to improve the security system for malware detection, especially to detect sophisticated malware, (2) show the effectiveness of behavior detection to memory performance, and (3) how advanced static analysis matches the algorithm for malware detection.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Book">1</ref-type><contributors><authors><author>Machiry, Aravind</author><author>Tahiliani, Rohan</author><author>Naik, Mayur</author></authors></contributors><titles><title>Dynodroid: an input generation system for Android apps</title><secondary-title>Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering - ESEC/FSE 2013</secondary-title></titles><periodical><full-title>Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering - ESEC/FSE 2013</full-title></periodical><pages>224</pages><keywords><keyword>Android</keyword><keyword>GUI testing</keyword><keyword>testing event-driven programs</keyword></keywords><dates><year>2013</year></dates><isbn>9781450322379</isbn><electronic-resource-num>10.1145/2491411.2491450</electronic-resource-num><urls><pdf-urls><url>internal-pdf://62a2ac217e035e0cd9cb73d2de4fb6135af5(1).pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2491411.2491450</url></web-urls></urls><abstract>We present a system Dynodroid for generating relevant in- puts to unmodified Android apps. Dynodroid views an app as an event-driven program that interacts with its environ- ment by means of a sequence of events through the Android framework. By instrumenting the framework once and for all, Dynodroid monitors the reaction of an app upon each event in a lightweight manner, using it to guide the gener- ation of the next event to the app. Dynodroid also allows interleaving events from machines, which are better at gen- erating a large number of simple inputs, with events from humans, who are better at providing intelligent inputs. We evaluated Dynodroid on 50 open-source Android apps, and compared it with two prevalent approaches: users man- ually exercising apps, and Monkey, a popular fuzzing tool. Dynodroid, humans, and Monkey covered 55%, 60%, and 53%, respectively, of each app’s Java source code on average. Monkey took 20X more events on average than Dynodroid. Dynodroid also found 9 bugs in 7 of the 50 apps, and 6 bugs in 5 of the top 1,000 free apps on Google Play. Categories</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Jakobsson, Markus</author></authors></contributors><titles><title>Retroactive Detection of Malware With Applications to Mobile Platforms</title><secondary-title>HotSec</secondary-title></titles><periodical><full-title>HotSec</full-title></periodical><pages>1--13</pages><keywords/><dates><year>2010</year></dates><urls><pdf-urls><url>internal-pdf://66e9028b43a0a5bc9a47ba6bdf5b6ebb7356.pdf</url></pdf-urls></urls><abstract>We introduce a practical software-based attes-tation approach. Our new method enables detection of any active malware (e.g., malware that executes or is activated by interrupts) – even if the infection occurred before our security measure was loaded. It works independently of computing platform, and is eminently suited to address the threat of mobile malware, for which the current Anti-Virus paradigm is poorly suited. Our approach is based on memory-printing of client devices. Memory-printing is a novel and light-weight cryp-tographic construction whose core property is that it takes notably longer to compute a function if given less RAM than for which it was configured. This makes it impossible for a malware agent to remain active (e.g., in RAM) with-out being detected, when the function is configured to use all space that should be free after all active applications are swapped out. Our approach is based on inherent timing differences for random access of RAM, flash, and other storage; and the time to communicate with external devices. We do not rely on heuristics when arguing our scheme's security. Ac-cordingly, our approach represents a step towards greater rigor and security assurance.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Peng, Wei</author><author>Li, Feng</author><author>Zou, Xukai</author><author>Wu, Jie</author></authors></contributors><titles><title>Behavioral detection and containment of proximity malware in delay tolerant networks</title><secondary-title>Proceedings - 8th IEEE International Conference on Mobile Ad-hoc and Sensor Systems, MASS 2011</secondary-title></titles><periodical><full-title>Proceedings - 8th IEEE International Conference on Mobile Ad-hoc and Sensor Systems, MASS 2011</full-title></periodical><pages>411-420</pages><keywords><keyword>delay-tolerant networks (DTNs)</keyword><keyword>dogmatism δ</keyword><keyword>look-ahead λ</keyword><keyword>malware behav- ioral characterization</keyword><keyword>proximity malware</keyword><keyword>λ- robustness</keyword></keywords><dates><year>2011</year></dates><isbn>9780769544694</isbn><electronic-resource-num>10.1109/MASS.2011.48</electronic-resource-num><urls><pdf-urls><url>internal-pdf://62b305408213c5ab0b373f98030d8a418b85.pdf</url></pdf-urls></urls><abstract>With the universal presence of short-range con- nectivity technologies (e.g., Bluetooth and, more recently, Wi- Fi Direct) in the consumer electronics market, the delay- tolerant-network (DTN) model is becoming a viable alternative to the traditional infrastructural model. Proximity malware, which exploits the temporal dimension and distributed nature of DTNs in self-propagation, poses threats to users of new technologies. In this paper, we address the proximity malware detection and containment problem with explicit consideration for the unique characteristics of DTNs. We formulate the mal- ware detection process as a decision problem under a general behavioral malware characterization framework. We analyze the risk associated with the decision problem and design a simple yet effective malware containment strategy, look-ahead, which is distributed by nature and reflects an individual node’s intrinsic trade-off between staying connected (with other nodes) and staying safe (from malware). Furthermore, we consider the benefits of sharing assessments among directly connected nodes and address the challenges derived from the DTN model to such sharing in the presence of liars (i.e., malicious nodes sharing false assessments) and defectors (i.e., good nodes that have turned malicious due to malware infection). Real mobile network traces are used to verify our analysis.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Li, Xiaolei</author><author>Hu, Hong</author><author>Bai, Guangdong</author><author>Jia, Yaoqi</author><author>Liang, Zhenkai</author><author>Saxena, Prateek</author></authors></contributors><titles><title>DroidVault: A trusted data vault for android devices</title><secondary-title>Proceedings of the IEEE International Conference on Engineering of Complex Computer Systems, ICECCS</secondary-title></titles><periodical><full-title>Proceedings of the IEEE International Conference on Engineering of Complex Computer Systems, ICECCS</full-title></periodical><pages>29-38</pages><keywords><keyword>Mobile system security</keyword><keyword>Operating system security</keyword><keyword>Technologies for trustworthy computing</keyword></keywords><dates><year>2014</year></dates><isbn>9781479954827</isbn><electronic-resource-num>10.1109/ICECCS.2014.13</electronic-resource-num><urls><pdf-urls><url>internal-pdf://53e60bd9e9aa6ea16013dfa82690ab60118b.pdf</url></pdf-urls></urls><abstract>Mobile OSes and applications form a large, complex and vulnerability-prone software stack. In such an environment, security techniques to strongly protect sensitive data in mobile devices are important and challenging. To address such challenges, we introduce the concept of the trusted data vault, a small trusted engine that securely manages the storage and usage of sensitive data in an untrusted mobile device. In this paper, we design and build Droid Vault - the first realization of a trusted data vault on the Android platform. Droid Vault establishes a secure channel between data owners and data users while allowing data owners to enforce strong control over the sensitive data with a minimal trusted computing base (TCB). We prototype Droid Vault via the novel use of hardware security features of ARM processors, i.e., Trust Zone. Our evaluation demonstrates its functionality for processing sensitive data and its practicality for adoption in the real world.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Benton, Kevin</author><author>Camp, L. Jean</author><author>Garg, Vaibhav</author></authors></contributors><titles><title>Studying the effectiveness of android application permissions requests</title><secondary-title>2013 IEEE International Conference on Pervasive Computing and Communications Workshops, PerCom Workshops 2013</secondary-title></titles><periodical><full-title>2013 IEEE International Conference on Pervasive Computing and Communications Workshops, PerCom Workshops 2013</full-title></periodical><pages>291-296</pages><issue>March</issue><keywords/><dates><year>2013</year></dates><isbn>9781467350778</isbn><electronic-resource-num>10.1109/PerComW.2013.6529497</electronic-resource-num><urls><pdf-urls><url>internal-pdf://60f18f64d1646ca4d62a391783f11fd74ceb.pdf</url></pdf-urls></urls><abstract>Popular platforms including Android and Facebook have adopted a permissions-based model. Under this model applications (apps) are required to declare specific access to user information required for functionality. We conducted two user studies on Amazon's Mechanical Turk to test the efficacy of these permissions requests on the Android platform. We found permissions were ineffective, even with the addition of an additional text warning. Conversely, we found that an app's download count had a strong effect on app installations. In order to determine if it was a failure of our text-based warning, we ran a second experiment with a previously proven visual indicator.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Boukayoua, Faysal</author><author>Lapon, Jorn</author><author>De Decker, Bart</author><author>Naessens, Vincent</author></authors></contributors><titles><title>Secure storage on Android with context- aware access control</title><secondary-title>IFIP International Federation for Information Processing</secondary-title></titles><periodical><full-title>IFIP International Federation for Information Processing</full-title></periodical><pages>25-26</pages><issue>September</issue><keywords><keyword>an-</keyword><keyword>context-aware security</keyword><keyword>droid</keyword><keyword>interoperability</keyword><keyword>mobile devices</keyword><keyword>secure storage</keyword></keywords><dates><year>2014</year></dates><urls><pdf-urls><url>internal-pdf://081e7d06c702ae336d79ea11020a92a4b3a2 (1).pdf</url></pdf-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Teufl, Peter</author><author>Fitzek, Andreas</author><author>Hein, Daniel</author><author>Marsalek, Alexander</author><author>Oprisnik, Alexander</author><author>Zefferer, Thomas</author></authors></contributors><titles><title>Android encryption systems</title><secondary-title>2014 International Conference on Privacy and Security in Mobile Systems, PRISMS 2014 - Co-located with Global Wireless Summit</secondary-title></titles><periodical><full-title>2014 International Conference on Privacy and Security in Mobile Systems, PRISMS 2014 - Co-located with Global Wireless Summit</full-title></periodical><keywords/><dates><year>2014</year></dates><isbn>9781479946303</isbn><electronic-resource-num>10.1109/PRISMS.2014.6970599</electronic-resource-num><urls><pdf-urls><url>internal-pdf://52f4fbe1623d6d929fa0493cd16d8644e3bb.pdf</url></pdf-urls></urls><abstract>The high usability of smartphones and tablets is embraced by consumers as well as the corporate and public sector. However, especially in the non-consumer area the factor security plays a decisive role for the platform-selection process. All of the current companies within the mobile device sector added a wide range of security features to the initially consumer-oriented devices (Apple, Google, Microsoft), or have dealt with security as a core feature from the beginning (RIM, now Blackerry). One of the key security features for protecting data on the device or in device backups are encryption systems, which are available in the majority of current devices. However, even under the assumption that the systems are implemented correctly, there is a wide range of parameters, specific use cases, and weaknesses that need to be considered when deploying mobile devices in security-critical environments. As the second part in a series of papers (the first part was on iOS), this work analyzes the deployment of the Android platform and the usage of its encryption systems within a security-critical context. For this purpose, Android's different encryption systems are assessed and their susceptibility to different attacks is analyzed in detail. Based on these results a workflow is presented, which supports deployment of the Android platform and usage of its encryption systems within security-critical application scenarios.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Dash, Santanu Kumar</author><author>Suarez-Tangil, Guillermo</author><author>Khan, Salahuddin</author><author>Tam, Kimberly</author><author>Ahmadi, Mansour</author><author>Kinder, Johannes</author><author>Cavallaro, Lorenzo</author></authors></contributors><titles><title>DroidScribe: Classifying Android Malware Based on Runtime Behavior</title><secondary-title>Proceedings - 2016 IEEE Symposium on Security and Privacy Workshops, SPW 2016</secondary-title></titles><periodical><full-title>Proceedings - 2016 IEEE Symposium on Security and Privacy Workshops, SPW 2016</full-title></periodical><pages>252-261</pages><keywords/><dates><year>2016</year></dates><isbn>9781509008247</isbn><electronic-resource-num>10.1109/SPW.2016.25</electronic-resource-num><urls><pdf-urls><url>internal-pdf://084ca45fdd4b5897a6736817f330203fff6d.pdf</url></pdf-urls></urls><abstract>—The Android ecosystem has witnessed a surge in malware, which not only puts mobile devices at risk but also increases the burden on malware analysts assessing and catego-rizing threats. In this paper, we show how to use machine learning to automatically classify Android malware samples into families with high accuracy, while observing only their runtime behavior. We focus exclusively on dynamic analysis of runtime behavior to provide a clean point of comparison that is dual to static approaches. Specific challenges in the use of dynamic analysis on Android are the limited information gained from tracking low-level events and the imperfect coverage when testing apps, e.g., due to inactive command and control servers. We observe that on Android, pure system calls do not carry enough semantic content for classification and instead rely on lightweight virtual machine introspection to also reconstruct Android-level inter-process communication. To address the sparsity of data resulting from low coverage, we introduce a novel classification method that fuses Support Vector Machines with Conformal Prediction to generate high-accuracy prediction sets where the information is insufficient to pinpoint a single family.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Savola, Reijo M.</author><author>Kylanpaa, Markku</author></authors></contributors><titles><title>Security objectives, controls and metrics development for an Android smartphone application</title><secondary-title>2014 Information Security for South Africa - Proceedings of the ISSA 2014 Conference</secondary-title></titles><periodical><full-title>2014 Information Security for South Africa - Proceedings of the ISSA 2014 Conference</full-title></periodical><keywords><keyword>Android</keyword><keyword>risk analysis</keyword><keyword>security effectiveness</keyword><keyword>security metrics</keyword><keyword>security objectives</keyword></keywords><dates><year>2014</year></dates><isbn>9781479933846</isbn><electronic-resource-num>10.1109/ISSA.2014.6950501</electronic-resource-num><urls><pdf-urls><url>internal-pdf://77f9176a5ec724e3dec162796166963a823b (1).pdf</url></pdf-urls></urls><abstract>Security in Android smartphone platforms deployed in public safety and\nsecurity mobile networks is a remarkable challenge. We analyse the\nsecurity objectives and controls for these systems based on an\nindustrial risk analysis. The target system of the investigation is an\nAndroid platform utilized for public safety and security mobile network.\nWe analyse how a security decision making regarding this target system\ncan be supported by effective and efficient security metrics. In\naddition, we describe implementation details of security controls for\nauthorization and integrity objectives of a demonstration of the target\nsystem.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Jeong, Jihwan</author><author>Seo, Dongwon</author><author>Lee, Chanyoung</author><author>Kwon, Jonghoon</author><author>Lee, Heejo</author><author>Milburn, John</author></authors></contributors><titles><title>MysteryChecker: Unpredictable attestation to detect repackaged malicious applications in Android</title><secondary-title>Proceedings of the 9th IEEE International Conference on Malicious and Unwanted Software, MALCON 2014</secondary-title></titles><periodical><full-title>Proceedings of the 9th IEEE International Conference on Malicious and Unwanted Software, MALCON 2014</full-title></periodical><pages>50-57</pages><keywords><keyword>Repackaged Application Detection</keyword><keyword>Smartphone Security</keyword><keyword>Software-based Attestation</keyword></keywords><dates><year>2014</year></dates><isbn>9781479973293</isbn><electronic-resource-num>10.1109/MALWARE.2014.6999415</electronic-resource-num><urls><pdf-urls><url>internal-pdf://74fa3ef1c202f2439cc9721693804b7b624e.pdf</url></pdf-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Kanonov, Uri</author><author>Wool, Avishai</author></authors></contributors><titles><title>Secure Containers in Android</title><secondary-title>Proceedings of the 6th Workshop on Security and Privacy in Smartphones and Mobile Devices - SPSM'16</secondary-title></titles><periodical><full-title>Proceedings of the 6th Workshop on Security and Privacy in Smartphones and Mobile Devices - SPSM'16</full-title></periodical><pages>3-12</pages><keywords/><dates><year>2016</year></dates><isbn>9781450345644</isbn><electronic-resource-num>10.1145/2994459.2994470</electronic-resource-num><urls><pdf-urls><url>internal-pdf://75bb8db47a681f96dddec6c03bd3b0ba7a82.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2994459.2994470</url></web-urls></urls><abstract>Bring Your Own Device (BYOD) is a growing trend among enterprises, aiming to improve workers' mobility and pro-ductivity via their smartphones. The threats and dangers posed by the smartphones to the enterprise are also ever-growing. Such dangers can be mitigated by running the enterprise software inside a &quot; secure container &quot; on the smart-phone. In our work we present a systematic assessment of security critical areas in design and implementation of a se-cure container for Android using reverse engineering and attacker-inspired methods. We do this through a case-study of Samsung KNOX, a real-world product deployed on mil-lions of devices. Our research shows how KNOX security features work behind the scenes and lets us compare the vendor's public security claims against reality. Along the way we identified several design weaknesses and a few vul-nerabilities that were disclosed to Samsung.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bagheri, Hamid</author><author>Sadeghi, Alireza</author><author>Garcia, Joshua</author><author>Malek, Sam</author></authors></contributors><titles><title>COVERT: Compositional Analysis of Android Inter-App Permission Leakage</title><secondary-title>IEEE Transactions on Software Engineering</secondary-title></titles><periodical><full-title>IEEE Transactions on Software Engineering</full-title></periodical><pages>866-886</pages><volume>41</volume><issue>9</issue><keywords><keyword>Android</keyword><keyword>Formal Verification</keyword><keyword>Inter-App Vulnerabilities</keyword><keyword>Static Analysis</keyword></keywords><dates><year>2015</year></dates><isbn>0098-5589</isbn><electronic-resource-num>10.1109/TSE.2015.2419611</electronic-resource-num><urls><pdf-urls><url>internal-pdf://78c9f0a24279464bbca5b30234fa3e0cd47b.pdf</url></pdf-urls></urls><abstract>Android is the most popular platform for mobile devices. It facilitates sharing of data and services among applications using a rich inter-app communication system. While access to resources can be controlled by the Android permission system, enforcing permissions is not sufficient to prevent security violations, as permissions may be mismanaged, intentionally or unintentionally. Android's enforcement of the permissions is at the level of individual apps, allowing multiple malicious apps to collude and combine their permissions or to trick vulnerable apps to perform actions on their behalf that are beyond their individual privileges. In this paper, we present COVERT, a tool for compositional analysis of Android inter-app vulnerabilities. COVERT's analysis is modular to enable incremental analysis of applications as they are installed, updated, and removed. It statically analyzes the reverse engineered source code of each individual app, and extracts relevant security specifications in a format suitable for formal verification. Given a collection of specifications extracted in this way, a formal analysis engine (e.g., model checker) is then used to verify whether it is safe for a combination of applications-holding certain permissions and potentially interacting with each other-to be installed together. Our experience with using COVERT to examine over 500 real-world apps corroborates its ability to find inter-app vulnerabilities in bundles of some of the most popular apps on the market.\r\n</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Tian, Ke</author><author>Yao, Danfeng</author><author>Ryder, Barbara G.</author><author>Tan, Gang</author></authors></contributors><titles><title>Analysis of Code Heterogeneity for High-Precision Classification of Repackaged Malware</title><secondary-title>Proceedings - 2016 IEEE Symposium on Security and Privacy Workshops, SPW 2016</secondary-title></titles><periodical><full-title>Proceedings - 2016 IEEE Symposium on Security and Privacy Workshops, SPW 2016</full-title></periodical><pages>262-271</pages><keywords><keyword>Android Security</keyword><keyword>Code Heterogeneity</keyword><keyword>Malware Detectioin</keyword><keyword>Partition</keyword></keywords><dates><year>2016</year></dates><isbn>9781509008247</isbn><electronic-resource-num>10.1109/SPW.2016.33</electronic-resource-num><urls><pdf-urls><url>internal-pdf://77c6788357ed56e88c55ccc71bc6b10296d4.pdf</url></pdf-urls></urls><abstract>—During repackaging, malware writers statically in-ject malcode and modify the control flow to ensure its execution. Repackaged malware is difficult to detect by existing classification techniques, partly because of their behavioral similarities to be-nign apps. By exploring the app's internal different behaviors, we propose a new Android repackaged malware detection technique based on code heterogeneity analysis. Our solution strategically partitions the code structure of an app into multiple dependence-based regions (subsets of the code). Each region is independently classified on its behavioral features. We point out the security challenges and design choices for partitioning code structures at the class and method level graphs, and present a solution based on multiple dependence relations. We have performed experimental evaluation with over 7,542 Android apps. For repackaged malware, our partition-based detection reduces false negatives (i.e., missed detection) by 30-fold, when compared to the non-partition-based approach. Overall, our approach achieves a false negative rate of 0.35% and a false positive rate of 2.97%.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Szongott, Christian</author><author>Henne, Benjamin</author><author>Smith, Matthew</author></authors></contributors><titles><title>Evaluating the threat of epidemic mobile malware.pdf</title></titles><periodical/><keywords/><urls><pdf-urls><url>internal-pdf://0223d8918434e2d904754f42b1f85ec14f57 (1).pdf</url></pdf-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Saltaformaggio, Brendan</author><author>Bhatia, Rohit</author><author>Gu, Zhongshu</author><author>Zhang, Xiangyu</author><author>Xu, Dongyan</author></authors></contributors><titles><title>VCR : App-Agnostic Recovery of Photographic Evidence from Android Device Memory Images Categories and Subject Descriptors</title><secondary-title>Ccs</secondary-title></titles><periodical><full-title>Ccs</full-title></periodical><pages>146-157</pages><keywords><keyword>all or part of</keyword><keyword>android</keyword><keyword>classroom use is granted</keyword><keyword>copies are not made</keyword><keyword>digital forensics</keyword><keyword>memory forensics</keyword><keyword>or</keyword><keyword>or distributed</keyword><keyword>or hard copies of</keyword><keyword>permission to make digital</keyword><keyword>this work for personal</keyword><keyword>without fee provided that</keyword></keywords><dates><year>2015</year></dates><isbn>9781450338325</isbn><electronic-resource-num>10.1145/2810103.2813720</electronic-resource-num><urls><pdf-urls><url>internal-pdf://74b3f9190b61fb197609c024dd1f4f9215a3.pdf</url></pdf-urls></urls><abstract>The ubiquity of modern smartphones means that nearly ev-eryone has easy access to a camera at all times. In the event of a crime, the photographic evidence that these cam-eras leave in a smartphone's memory becomes vital pieces of digital evidence, and forensic investigators are tasked with recovering and analyzing this evidence. Unfortunately, few existing forensics tools are capable of systematically recov-ering and inspecting such in-memory photographic evidence produced by smartphone cameras. In this paper, we present VCR, a memory forensics technique which aims to fill this void by enabling the recovery of all photographic evidence produced by an Android device's cameras. By leveraging key aspects of the Android framework, VCR extends existing memory forensics techniques to improve vendor-customized Android memory image analysis. Based on this, VCR tar-gets application-generic artifacts in an input memory image which allow photographic evidence to be collected no matter which application produced it. Further, VCR builds upon the Android framework's existing image decoding logic to both automatically recover and render any located evidence. Our evaluation with commercially available smartphones shows that VCR is highly effective at recovering all forms of photo-graphic evidence produced by a variety of applications across several different Android platforms.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Prieto, Luis P.</author><author>Rodríguez-Triana, María Jesús</author><author>Kusmin, Marge</author><author>Laanpere, Mart</author></authors></contributors><titles><title>Smart school multimodal dataset and challenges</title><secondary-title>CEUR Workshop Proceedings</secondary-title></titles><periodical><full-title>CEUR Workshop Proceedings</full-title></periodical><pages>53-59</pages><volume>1828</volume><keywords><keyword>Multimodal learning analytics</keyword><keyword>Multimodal teaching analytics</keyword><keyword>STEM education</keyword><keyword>Sensors</keyword><keyword>Smart classroom</keyword><keyword>Smart school</keyword></keywords><dates><year>2017</year></dates><isbn>9781450321389</isbn><electronic-resource-num>10.1145/1235</electronic-resource-num><urls><pdf-urls><url>internal-pdf://333f4edb189ef62448799db90aef5e6785dd.pdf</url></pdf-urls></urls><abstract>The pervasive presence of interconnected objects enables new communication paradigms where devices can easily reach each other while interacting within their environment. The so-called Internet of Things (IoT) represents the integration of several computing and communications systems aiming at facilitating the interaction between these devices. Arduino is one of the most popular platforms used to prototype new IoT devices due to its open, flexible and easy-to-use archi- tecture. Ardunio Yun is a dual board microcontroller that supports a Linux distribution and it is currently one of the most versatile and powerful Arduino systems. This feature positions Arduino Yun as a popular platform for developers, but it also introduces unique infection vectors from the secu- rity viewpoint. In this work, we present a security analysis of Arduino Yun. We show that Arduino Yun is vulnerable to a number of attacks and we implement a proof of concept capable of exploiting some of them.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Shin, Won</author><author>Lee, Jin Lee</author><author>Park, Doo Ho</author><author>Chang, Chun Hyon</author></authors></contributors><titles><title>Design of authenticity evaluation metric for Android applications</title><secondary-title>2014 4th International Conference on Digital Information and Communication Technology and Its Applications, DICTAP 2014</secondary-title></titles><periodical><full-title>2014 4th International Conference on Digital Information and Communication Technology and Its Applications, DICTAP 2014</full-title></periodical><pages>275-278</pages><keywords><keyword>android</keyword><keyword>authenticity</keyword><keyword>least privilege</keyword><keyword>metric</keyword><keyword>permissions</keyword><keyword>security</keyword></keywords><dates><year>2014</year></dates><isbn>9781479937240</isbn><electronic-resource-num>10.1109/DICTAP.2014.6821695</electronic-resource-num><urls><pdf-urls><url>internal-pdf://91e582c10afc94c0af8bb06422a57e14b476.pdf</url></pdf-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Vegliach, Gil</author></authors></contributors><titles><title>Runtime verification meets Android security Background , what Android is</title></titles><periodical/><pages>1-7</pages><keywords/><urls><pdf-urls><url>internal-pdf://88a9879e48ecfc9ee1fdc59b39bd5154195b.pdf</url></pdf-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Smith, Ryan W.</author><author>Pridgen, Adam</author></authors></contributors><titles><title>STAAF: Scaling Android application analysis with a modular framework</title><secondary-title>Proceedings of the Annual Hawaii International Conference on System Sciences</secondary-title></titles><periodical><full-title>Proceedings of the Annual Hawaii International Conference on System Sciences</full-title></periodical><pages>5432-5440</pages><keywords/><dates><year>2011</year></dates><isbn>9780769545257</isbn><electronic-resource-num>10.1109/HICSS.2012.543</electronic-resource-num><urls><pdf-urls><url>internal-pdf://91eb540e3b46e79966d7c18858c66c687322.pdf</url></pdf-urls></urls><abstract>There has been no shortage of Android malware analysis reports recently, but thus far that trend has not been accompanied with an equivalent scale of released public Android application tools. To address this issue, we are presenting the Scalable Tailored Application Analysis Framework (STAAF). The goal of this framework is to allow a team of analysts to efficiently analyze a large number of Android applications and to promote collaborative analysis through shared processing and results. STAAF is designed to be scalable and extensible, and can quickly be customized to meet the current analysis needs. Our hope is that by releasing the framework, we will not only provide an efficient tool for automating and scaling analysis tasks, but we hope the work will encourage the sharing of research in the field.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Daian, Philip</author><author>Falcone, Yliès</author><author>Meredith, Patrick</author><author>Şerbǎnuţǎ, Traian Florin</author><author>Shiriashi, Shin’Ichi</author><author>Akihito, Akihito Iwai</author><author>Rosu, Grigore</author></authors></contributors><titles><title>RV-android: Efficient parametric android runtime verification, a brief tutorial</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>342-357</pages><volume>9333</volume><keywords/><dates><year>2015</year></dates><isbn>9783319238197</isbn><electronic-resource-num>10.1007/978-3-319-23820-3_24</electronic-resource-num><urls><pdf-urls><url>internal-pdf://125e321f9be1010cf4bb1ae1db800927e795(1).pdf</url></pdf-urls></urls><abstract>{©} Springer International Publishing Switzerland 2015.RV-Android is a new freely available open source runtime library for monitoring formal safety properties on Android. RV-Android uses the commercial RV-Monitor technology as its core monitoring library generation technology, allowing for the verification of safety properties during execution and operating entirely in userspace with no kernel or operating system modifications required. RV-Android improves on previous Android monitoring work by replacing the JavaMOP framework with RV-Monitor, a more advanced monitoring library generation tool with core algorithmic improvements that greatly improve resource consumption, efficiency, and battery life considerations. We demonstrate the developer usage of RV-Android with the standard Android build process, using instrumentation mechanisms effective on both Android binaries and source code. Our method allows for both property development and advanced application testing through runtime verification. We showcase the user frontend of RV-Monitor, which is available for public demo use and requires no knowledge of RV concepts. We explore the extra expressiveness the MOP paradigm provides over simply writing properties as aspects through two sample security properties, and show an example of a real security violation mitigated by RV-Android on-device. Lastly, we propose RV as an extension to the next-generation Android permissions system debuting in Android M.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wei, Xuetao</author><author>Neamtiu, Iulian</author><author>Faloutsos, Michalis</author></authors></contributors><titles><title>Whom does your android app talk to?</title><secondary-title>2015 IEEE Global Communications Conference, GLOBECOM 2015</secondary-title></titles><periodical><full-title>2015 IEEE Global Communications Conference, GLOBECOM 2015</full-title></periodical><keywords/><dates><year>2015</year></dates><isbn>9781479959525</isbn><electronic-resource-num>10.1109/GLOCOM.2014.7416952</electronic-resource-num><urls><pdf-urls><url>internal-pdf://91a7c2fb42fca879b4ce7dd2e2f0dc10a97e.pdf</url></pdf-urls></urls><abstract>Smartphone privacy and security work has focused mostly on malicious apps. We take a different angle by questioning whether good apps suffer from a lack of judgment and interact with &quot;bad&quot; websites. We use the term bad websites to refer to entities that engage in dangerous or annoying activities that range from distributing malware, to phishing and overly aggressive ad spamming. The focus of our work is this relatively neglected aspect of security: &quot;Whom does an app talk to?&quot; In this paper, we design and implement AURA, a framework for identifying the hosts that an app talks to and evaluating the risks this communication entails. AURA makes use of both static and dynamic analysis. We studied 13,500 popular free Android apps that connect to 254,022 URLs and 1,260 malicious Android apps that connect to 19,510 URLs. Our main contribution is showing that good apps pose security risks as they contact at least one website that: (a) distributes malware (8.8% of apps), (b) are in a blacklist (15% of apps) based on the classification by VirusTotal and Web of Trust. Our work can raise awareness that even good apps need to be carefully evaluated, especially as people become more concerned about smartphone security and privacy.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Acar, Yasemin</author><author>Backes, Michael</author><author>Bugiel, Sven</author><author>Fahl, Sascha</author><author>McDaniel, Patrick</author><author>Smith, Matthew</author></authors></contributors><titles><title>SoK: Lessons Learned from Android Security Research for Appified Software Platforms</title><secondary-title>Proceedings - 2016 IEEE Symposium on Security and Privacy, SP 2016</secondary-title></titles><periodical><full-title>Proceedings - 2016 IEEE Symposium on Security and Privacy, SP 2016</full-title></periodical><pages>433-451</pages><keywords/><dates><year>2016</year></dates><isbn>9781509008247</isbn><electronic-resource-num>10.1109/SP.2016.33</electronic-resource-num><urls><pdf-urls><url>internal-pdf://89e596cf9113335b136bb06af73d68786225.pdf</url></pdf-urls></urls><abstract>—Android security and privacy research has boomed in recent years, far outstripping investigations of other appified platforms. However, despite this attention, research efforts are fragmented and lack any coherent evaluation framework. We present a systematization of Android security and privacy re-search with a focus on the appification of software systems. To put Android security and privacy research into context, we compare the concept of appification with conventional operating system and software ecosystems. While appification has improved some issues (e.g., market access and usability), it has also introduced a whole range of new problems and aggravated some problems of the old ecosystems (e.g., coarse and unclear policy, poor software development practices). Some of our key findings are that contemporary research frequently stays on the beaten path instead of following unconventional and often promising new routes. Many security and privacy proposals focus entirely on the Android OS and do not take advantage of the unique features and actors of an appified ecosystem, which could be used to roll out new security mechanisms less disruptively. Our work highlights areas that have received the larger shares of attention, which attacker models were addressed, who is the target, and who has the capabilities and incentives to implement the countermeasures. We conclude with lessons learned from comparing the appified with the old world, shedding light on missed opportunities and proposing directions for future research.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Mylonas, Alexios</author><author>Theoharidou, Marianthi</author><author>Gritzalis, Dimitris</author></authors></contributors><titles><title>Assessing privacy risks in android: A user-centric approach</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>21-37</pages><volume>8418 LNCS</volume><keywords><keyword>Android</keyword><keyword>Attacks</keyword><keyword>Permission</keyword><keyword>Personal data</keyword><keyword>Privacy</keyword><keyword>Risk</keyword></keywords><dates><year>2014</year></dates><isbn>9783319070759</isbn><electronic-resource-num>10.1007/978-3-319-07076-6_2</electronic-resource-num><urls><pdf-urls><url>internal-pdf://538e7114310a8d784e63aded655ac0bc33a6.pdf</url></pdf-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Juzonis, Vaidas</author><author>Goranin, Nikolaj</author><author>Cenys, Antanas</author><author>Olifer, Dmitrij</author></authors></contributors><titles><title>Specialized Genetic Algorithm Based Simulation Tool Designed For Malware Evolution Forecasting</title><secondary-title>Annales UMCS, Informatica</secondary-title></titles><periodical><full-title>Annales UMCS, Informatica</full-title></periodical><pages>23-37</pages><volume>12</volume><issue>4</issue><keywords/><dates><year>2012</year></dates><electronic-resource-num>10.2478/v10065-012-0031-1</electronic-resource-num><urls><pdf-urls><url>internal-pdf://515b2697f9ab0a261539cc052d0ed5b40c7e (1).pdf</url></pdf-urls><web-urls><url>http://www.degruyter.com/view/j/umcsinfo.2012.12.issue-4/v10065-012-0031-1/v10065-012-0031-1.xml</url></web-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Pernul, Günther</author><author>Ryan, Peter Y A</author><author>Weippl, Edgar</author></authors></contributors><titles><title>Computer security -- ESORICS 2015: 20th european symposium on research in computer security, Vienna, Austria, September 21-25, 2015, proceedings, part II</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><volume>9327</volume><keywords/><dates><year>2015</year></dates><isbn>9783319241760</isbn><electronic-resource-num>10.1007/978-3-319-24177-7</electronic-resource-num><urls><pdf-urls><url>internal-pdf://564e20b863097423bf4ddac76885de52e7f3.pdf</url></pdf-urls></urls><abstract>Vulnerable Android applications are traditionally exploited via mali-cious apps. In this paper, we study an underexplored class of Android attacks which do not require the user to install malicious apps, but merely to visit a malicious website in an Android browser. We call them web-to-app injection (or W2AI) attacks, and distinguish between different categories of W2AI side-effects. To estimate their prevalence, we present an automated W2AIScanner to find and confirm W2AI vulnerabilities. Analyzing real apps from the official Google Play store – we found 286 confirmed vulnerabilities in 134 distinct appli-cations. Our findings suggest that these attacks are pervasive and developers do not adequately protect apps against them. Our tool employs a novel combination of static analysis and symbolic execution with dynamic testing. We show through experiments that this design significantly enhances the detection accuracy com-pared with an existing state-of-the-art analysis.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Cho, Junsung</author><author>Cho, Geumhwan</author><author>Kim, Hyoungshick</author></authors></contributors><titles><title>Keyboard or keylogger?: A security analysis of third-party keyboards on Android</title><secondary-title>2015 13th Annual Conference on Privacy, Security and Trust, PST 2015</secondary-title></titles><periodical><full-title>2015 13th Annual Conference on Privacy, Security and Trust, PST 2015</full-title></periodical><pages>173-176</pages><keywords/><dates><year>2015</year></dates><isbn>9781467378284</isbn><electronic-resource-num>10.1109/PST.2015.7232970</electronic-resource-num><urls><pdf-urls><url>internal-pdf://459c7ab96c08ebc1ea30216b83dfae1a9278.pdf</url></pdf-urls></urls><abstract>Use of third-party keyboards makes Android more flexible and customizable. However, we demonstrate their potential security risks by implementing a proof-of-concept keylogger that can effectively steal users' sensitive keystrokes with 81 popular websites (out of 100 tested websites). We also empirically analyzed the security behaviors of 139 keyboard applications that were available on Google Play. Our study results show that the majority of existing keyboard applications (84 out of 139) could be potentially misused as malicious keyloggers. To avoid such keylogging attacks, we discuss possible defense mechanisms.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Tam, Kimberly</author><author>Feizollah, Ali</author><author>Anuar, Nor Badrul</author><author>Salleh, Rosli</author><author>Cavallaro, Lorenzo</author></authors></contributors><titles><title>The Evolution of Android Malware and Android Analysis Techniques</title><secondary-title>ACM Computing Surveys</secondary-title></titles><periodical><full-title>ACM Computing Surveys</full-title></periodical><pages>1-41</pages><volume>49</volume><issue>4</issue><keywords/><dates><year>2017</year></dates><isbn>0360-0300</isbn><electronic-resource-num>10.1145/3017427</electronic-resource-num><urls><pdf-urls><url>internal-pdf://589c79ae3780a96fa1ab6b57dfd608e73a8f.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=3022634.3017427</url></web-urls></urls><abstract>With the integration of mobile devices into daily life, smartphones are privy to increasing amounts of sensitive information. Sophisticated mobile malware, particularly Android malware, acquire or utilize such data without user consent. It is therefore essential to devise effective techniques to analyze and detect these threats. This article presents a comprehensive survey on leading Android malware analysis and detection techniques, and their effectiveness against evolving malware. This article categorizes systems by methodology and date to evaluate progression and weaknesses. This article also discusses evaluations of industry solutions, malware statistics, and malware evasion techniques and concludes by supporting future research paths.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Shen, Feng</author><author>Vecchio, Justin Del</author><author>Mohaisen, Aziz</author><author>Ko, Steven Y.</author><author>Ziarek, Lukasz</author></authors></contributors><titles><title>Android Malware Detection Using Complex-Flows</title><secondary-title>2017 IEEE 37th International Conference on Distributed Computing Systems (ICDCS)</secondary-title></titles><periodical><full-title>2017 IEEE 37th International Conference on Distributed Computing Systems (ICDCS)</full-title></periodical><pages>2430-2437</pages><keywords/><dates><year>2017</year></dates><isbn>978-1-5386-1792-2</isbn><electronic-resource-num>10.1109/ICDCS.2017.190</electronic-resource-num><urls><pdf-urls><url>internal-pdf://469c6df82526d1c6d2eca5de95b8525e1c41.pdf</url></pdf-urls><web-urls><url>http://ieeexplore.ieee.org/document/7980206/</url></web-urls></urls></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Ntantogian, Christoforos</author><author>Apostolopoulos, Dimitris</author><author>Marinakis, Giannis</author><author>Xenakis, Christos</author></authors></contributors><titles><title>Evaluating the privacy of Android mobile applications under forensic analysis</title><secondary-title>Computers and Security</secondary-title></titles><periodical><full-title>Computers and Security</full-title></periodical><pages>66-76</pages><volume>42</volume><keywords><keyword>Android</keyword><keyword>Authentication credentials</keyword><keyword>Memory dump</keyword><keyword>Mobile applications</keyword><keyword>Mobile forensics</keyword><keyword>Privacy of mobile applications</keyword><keyword>Volatile memory</keyword></keywords><dates><year>2014</year></dates><isbn>2104142776</isbn><electronic-resource-num>10.1016/j.cose.2014.01.004</electronic-resource-num><urls><pdf-urls><url>internal-pdf://372a5b2217e1a783ae5bf717316a544ee76c (1).pdf</url></pdf-urls></urls><abstract>In this paper, we investigate and evaluate through experimental analysis the possibility of recovering authentication credentials of mobile applications from the volatile memory of Android mobile devices. Throughout the carried experiments and analysis, we have, exclusively, used open-source and free forensic tools. Overall, the contribution of this paper is threefold. First, it thoroughly, examines thirteen (13) mobile applications, which represent four common application categories that elaborate sensitive users' data, whether it is possible to recover authentication credentials from the physical memory of mobile devices, following thirty (30) different scenarios. Second, it explores in the considered applications, if we can discover patterns and expressions that indicate the exact position of authentication credentials in a memory dump. Third, it reveals a set of critical observations regarding the privacy of Android mobile applications and devices. ?? 2013 Elsevier B.V. All rights reserved.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wang, Ruowen</author><author>Carolina, North</author><author>Enck, William</author><author>Reeves, Douglas</author><author>Carolina, North</author><author>Zhang, Xinwen</author><author>Xu, Dingbang</author><author>Zhou, Wu</author><author>Azab, Ahmed M</author><author>Ning, Peng</author><author>Xu, Dingbang</author><author>Zhou, Wu</author><author>Azab, Ahmed M</author></authors></contributors><titles><title>EASEAndroid : Automatic Policy Analysis and Refinement for Security Enhanced Android via Large-Scale Semi-Supervised Learning</title><secondary-title>Usenix Sec</secondary-title></titles><periodical><full-title>Usenix Sec</full-title></periodical><pages>1-30</pages><keywords><keyword>Android</keyword><keyword>GUI testing</keyword><keyword>testing event-driven programs</keyword></keywords><dates><year>2015</year></dates><isbn>9781931971232</isbn><electronic-resource-num>10.1145/2491411.2491450</electronic-resource-num><urls><pdf-urls><url>internal-pdf://852f95e51a6b730df75e153d8446d6e8a90a.pdf</url></pdf-urls><web-urls><url>https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-wang-ruowen.pdf</url></web-urls></urls><abstract>We present a system Dynodroid for generating relevant in- puts to unmodified Android apps. Dynodroid views an app as an event-driven program that interacts with its environ- ment by means of a sequence of events through the Android framework. By instrumenting the framework once and for all, Dynodroid monitors the reaction of an app upon each event in a lightweight manner, using it to guide the gener- ation of the next event to the app. Dynodroid also allows interleaving events from machines, which are better at gen- erating a large number of simple inputs, with events from humans, who are better at providing intelligent inputs. We evaluated Dynodroid on 50 open-source Android apps, and compared it with two prevalent approaches: users man- ually exercising apps, and Monkey, a popular fuzzing tool. Dynodroid, humans, and Monkey covered 55%, 60%, and 53%, respectively, of each app’s Java source code on average. Monkey took 20X more events on average than Dynodroid. Dynodroid also found 9 bugs in 7 of the 50 apps, and 6 bugs in 5 of the top 1,000 free apps on Google Play. Categories</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Allix, Kevin</author><author>Bissyandé, Tegawendé F</author><author>Klein, Jacques</author><author>Le Traon, Yves</author></authors></contributors><titles><title>Are Your Training Datasets Yet Relevant?</title><secondary-title>Engineering Secure Software and Systems</secondary-title></titles><periodical><full-title>Engineering Secure Software and Systems</full-title></periodical><pages>51-67</pages><keywords><keyword>Android</keyword><keyword>Machine Learning</keyword><keyword>Malware Detection</keyword><keyword>Time</keyword></keywords><dates><year>2015</year></dates><isbn>978-3-319-15618-7; 978-3-319-15617-0</isbn><electronic-resource-num>10.1007/978-3-319-15618-7_5</electronic-resource-num><urls><pdf-urls><url>internal-pdf://428a29a00391bf9ba53e1454f557a4c30f9b.pdf</url></pdf-urls><web-urls><url>http://orbilu.uni.lu/handle/10993/20299</url></web-urls></urls><abstract>In this paper, we consider the relevance of timeline in the construction of datasets, to highlight its impact on the performance of a machine learning-based malware detection scheme. Typically, we show that simply picking a random set of known malware to train a malware detector, as it is done in many assessment scenarios from the literature, yields significantly biased results. In the process of assessing the extent of this impact through various experiments, we were also able to con- firm a number of intuitive assumptions about Android malware. For instance, we discuss the existence of Android malware lineages and how they could impact the performance of malware detection in the wild.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wolfe, Britton</author><author>Elish, Karim</author><author>Yao, Danfeng</author></authors></contributors><titles><title>High precision screening for android malware with dimensionality reduction</title><secondary-title>Proceedings - 2014 13th International Conference on Machine Learning and Applications, ICMLA 2014</secondary-title></titles><periodical><full-title>Proceedings - 2014 13th International Conference on Machine Learning and Applications, ICMLA 2014</full-title></periodical><pages>21-28</pages><keywords><keyword>android</keyword><keyword>dimensionality reduction</keyword><keyword>mobile security</keyword><keyword>principal components analysis</keyword></keywords><dates><year>2014</year></dates><isbn>9781479974153</isbn><electronic-resource-num>10.1109/ICMLA.2014.10</electronic-resource-num><urls><pdf-urls><url>internal-pdf://892a9cf926ade9651a6e0f40be4ced7cae83.pdf</url></pdf-urls></urls><abstract>We present a new method of classifying previ- ously unseen Android applications as malware or benign. The algorithm starts with a large set of features: the frequencies of all possible n-byte sequences in the application’s byte code. Principal components analysis is applied to that frequency matrix in order to reduce it to a low-dimensional representation, which is then fed into any of several classification algorithms.We utilize the implicitly restarted Lanczos bidiagonalization algorithm and exploit the sparsity of the n-gram frequency matrix in order to efficiently compute the low-dimensional representation. When trained upon that low-dimensional representation, several classi- fication algorithms achieve higher accuracy than previous work.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wei, Xuetao</author><author>Gomez, Lorenzo</author><author>Neamtiu, Iulian</author><author>Faloutsos, Michalis</author></authors></contributors><titles><title>Malicious Android applications in the enterprise: What do they do and how do we fix it?</title><secondary-title>Proceedings - 2012 IEEE 28th International Conference on Data Engineering Workshops, ICDEW 2012</secondary-title></titles><periodical><full-title>Proceedings - 2012 IEEE 28th International Conference on Data Engineering Workshops, ICDEW 2012</full-title></periodical><pages>251-254</pages><keywords/><dates><year>2012</year></dates><isbn>9780769547480</isbn><electronic-resource-num>10.1109/ICDEW.2012.81</electronic-resource-num><urls><pdf-urls><url>internal-pdf://725e4853095af6829163b8e445513dcae40d.pdf</url></pdf-urls></urls><abstract>Android applications are used in a variety of domains, including business,\nsocial, media, health, scientiﬁc, and even military. On one hand,\nenterprises can take advantage of the richness of Android applications\nto support their business needs. On the other hand, Android devices\ncontain rich sensitive data—e.g., GPS location, photos, calendar,\ncontacts, email, and ﬁles—which is critical to the enterprise and\nunauthorized access to this sensitive data can lead to serious security\nrisks. In this paper, we describe the nature and sources of sensitive\ndata, what malicious applications can do to the data, and possible\nenterprise purpose of this paper is to raise employees’ and enterprises’\nawareness and show that a suite of easy-to-implement measures can\nimprove both employee and enterprise security.</abstract></record><record><database name="My Collection_101to200.enl" path="My Collection_101to200.enl">My Collection_101to200.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Schmidt, Aubrey Derrick</author><author>Clausen, Jan Hendrik</author><author>Camtepe, Ahmet</author><author>Albayrak, Sahin</author></authors></contributors><titles><title>Detecting symbian OS malware through static function call analysis</title><secondary-title>2009 4th International Conference on Malicious and Unwanted Software, MALWARE 2009</secondary-title></titles><periodical><full-title>2009 4th International Conference on Malicious and Unwanted Software, MALWARE 2009</full-title></periodical><pages>15-22</pages><issue>March</issue><keywords/><dates><year>2009</year></dates><isbn>9781424457878</isbn><electronic-resource-num>10.1109/MALWARE.2009.5403024</electronic-resource-num><urls><pdf-urls><url>internal-pdf://845cb92b3fa1399f5ca3326b6c1c80c36502 (1).pdf</url></pdf-urls></urls><abstract>Smartphones become very critical part of our lives as they offer advanced capabilities with PC-like functionalities. They are getting widely deployed while not only being used for classical voice-centric communication. New smartphone malwares keep emerging where most of them still target Symbian OS. In the case of Symbian OS, application signing seemed to be an appropriate measure for slowing down malware appearance. Unfortunately, latest examples showed that signing can be bypassed resulting in new malware outbreak. In this paper, we present a novel approach to static malware detection in resource-limited mobile environments. This approach can be used to extend currently used third-party application signing mechanisms for increasing malware detection capabilities. In our work, we extract function calls from binaries in order to apply our clustering mechanism, called centroid. This method is capable of detecting unknown malwares. Our results are promising where the employed mechanism might find application at distribution channels, like online application stores. Additionally, it seems suitable for directly being used on smartphones for (pre-)checking installed applications.</abstract></record></records></xml>
