<?xml version="1.0" encoding="UTF-8"?><xml><records><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Alavi, Arash</author><author>Quach, Alan</author><author>Zhang, Hang</author><author>Marsh, Bryan</author><author>Haq, Farhan Ul</author><author>Qian, Zhiyun</author><author>Lu, Long</author><author>Gupta, Rajiv</author></authors></contributors><titles><title>Where is the Weakest Link ? A Study on Security Discrepancies between Android Apps and Their Website Counterparts</title></titles><periodical/><pages>1-12</pages><keywords/><urls><pdf-urls><url>internal-pdf://3160adc9e6ed4c3211481499ed4318c19581.pdf</url></pdf-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhang, Mu</author><author>Duan, Yue</author><author>Feng, Qian</author><author>Yin, Heng</author></authors></contributors><titles><title>Towards Automatic Generation of Security-Centric Descriptions for Android Apps</title><secondary-title>Ccs '15</secondary-title></titles><periodical><full-title>Ccs '15</full-title></periodical><pages>518-529</pages><keywords><keyword>android</keyword><keyword>malware prevention</keyword><keyword>natural language generation</keyword><keyword>program anal-</keyword><keyword>subgraph mining</keyword><keyword>textual description</keyword><keyword>ysis</keyword></keywords><dates><year>2015</year></dates><isbn>9781450338325</isbn><electronic-resource-num>10.1145/2810103.2813669</electronic-resource-num><urls><pdf-urls><url>internal-pdf://3566f8fe30b25a5be1e6487b9ddf4236f3ab.pdf</url></pdf-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Mulliner, Collin</author><author>Oberheide, Jon</author><author>Robertson, William</author><author>Kirda, Engin</author></authors></contributors><titles><title>PatchDroid: scalable third-party security patches for Android devices</title><secondary-title>Proceedings of the 29th Annual Computer Security Applications Conference - ACSAC</secondary-title></titles><periodical><full-title>Proceedings of the 29th Annual Computer Security Applications Conference - ACSAC</full-title></periodical><pages>259-268</pages><keywords/><dates><year>2013</year></dates><isbn>9781450320153</isbn><electronic-resource-num>10.1145/2523649.2523679</electronic-resource-num><urls><pdf-urls><url>internal-pdf://09442d962cd630233637a30c35d73c8f788b.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2523679%5Cnhttp://dl.acm.org/citation.cfm?doid=2523649.2523679</url></web-urls></urls><abstract>Android is currently the largest mobile platform with around 750 million devices worldwide. Unfortunately, more than 30% of all devices contain publicly known security vulnerabilities and, in practice, cannot be updated through normal mechanisms since they are not longer supported by the manufacturer and mobile operator. This failure of traditional patch distribution systems has resulted in the creation of a large population of vulnerable mobile devices. In this paper, we present PatchDroid, a system to distribute and apply third-party security patches for Android. Our system is designed for device-independent patch creation, and uses in-memory patching techniques to address vulnerabilities in both native andmanaged code. We created a fully usable prototype of PatchDroid, including a number of patches for well-known vulnerabilities in Android devices. We evaluated our system on different devices from multiple manufacturers and show that we can effectively patch security vulnerabilities on Android devices without impacting performance or usability. Therefore, PatchDroid represents a realistic path towards dramatically reducing the number of exploitable Android devices in the wild.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Titze, Dennis</author><author>Schütte, Julian</author></authors></contributors><titles><title>Apparecium: Revealing data flows in android applications</title><secondary-title>Proceedings - International Conference on Advanced Information Networking and Applications, AINA</secondary-title></titles><periodical><full-title>Proceedings - International Conference on Advanced Information Networking and Applications, AINA</full-title></periodical><pages>579-586</pages><volume>2015-April</volume><keywords><keyword>Android</keyword><keyword>Static Data Flow Analysis</keyword></keywords><dates><year>2015</year></dates><isbn>9781479979042</isbn><electronic-resource-num>10.1109/AINA.2015.239</electronic-resource-num><urls><pdf-urls><url>internal-pdf://9471e63fdbec7653b9350e3de20a8d5e05d2.pdf</url></pdf-urls></urls><abstract>With Android applications processing not only per-sonal but also business-critical data, efficient and pre-cise data flow analysis has become a major technique to detect apps handling critical data in unwanted ways. Although data flow analysis in general is a thoroughly researched topic, the event-driven lifecycle model of Android has its own challenges and practical appli-cation requires for reliable and efficient analysis tech-niques. In this paper we present Apparecium, a tool to reveal data flows in Android applications. Apparecium has conceptual differences to other techniques, and can be used to find arbitrary data flows inside Android applications. Details about the used techniques and the differences to existing data flow analysis tools are presented, as well as an evaluation against the data flow analysis framework FlowDroid.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Barrera, David</author><author>Clark, Jeremy</author><author>McCartney, Daniel</author></authors></contributors><titles><title>Understanding and improving app installation security mechanisms through empirical analysis of android</title><secondary-title>ACM workshop on Security and privacy in smartphones and mobile devices</secondary-title></titles><periodical><full-title>ACM workshop on Security and privacy in smartphones and mobile devices</full-title></periodical><pages>81-92</pages><keywords><keyword>android</keyword><keyword>digital signature</keyword><keyword>software installation</keyword></keywords><dates><year>2012</year></dates><isbn>9781450316668</isbn><electronic-resource-num>10.1145/2381934.2381949</electronic-resource-num><urls><pdf-urls><url>internal-pdf://b4fd9c7d52a60cb0b3e74aeb8adf6441e842.pdf</url></pdf-urls><web-urls><url>http://www.ccsl.carleton.ca/~dbarrera/files/spsm12-barrera.pdf</url></web-urls></urls><abstract>We provide a detailed analysis of two largely unexplored aspects of the security decisions made by the Android operating system during the app installation process: update integrity and UID assignment. To inform our analysis, we collect a dataset of Android application metadata and extract features from these binaries to gain a better understanding of how developers interact with the security mechanisms invoked during installation. Using the dataset, we find empirical evidence that Android's current signing architecture does not encourage best security practices. We also find that limitations of Android's UID sharing method force developers to write custom code rather than rely on OS-level mechanisms for secure data transfer between apps. As a result of our analysis, we recommend incrementally deployable improvements, including a novel UID sharing mechanism with applicability to signature-level permissions. We additionally discuss mitigation options for a security bug in Google's Play store, which allows apps to transparently obtain more privileges than those requested in the manifest.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Peles, Or</author><author>Hay, Roee</author></authors></contributors><titles><title>ONE CLASS TO RULE THEM ALL 0-DAY DESERIALIZATION Vulnerabilities In Android</title><secondary-title>9th USENIX Workshop on Offensive Technologies (WOOT '15)</secondary-title></titles><periodical><full-title>9th USENIX Workshop on Offensive Technologies (WOOT '15)</full-title></periodical><pages>1-12</pages><keywords/><dates><year>2015</year></dates><urls><pdf-urls><url>internal-pdf://b936fd4679a8938923b5cb09f2612da599cb.pdf</url></pdf-urls><web-urls><url>https://www.usenix.org/system/files/conference/woot15/woot15-paper-peles.pdf</url></web-urls></urls><abstract>We present previously unknown high severity vulnerabilities in Android. The first is in the Android Platform and Google Play Services. The Platform instance affects Android 4.3-5.1, M (Preview 1) or 55% of Android devices at the time of writing. This vulnerability allows for arbitrary code execution in the context of many apps and services and results in elevation of privileges. In this paper we also demonstrate a Proof-of-Concept exploit against the Google Nexus 5 device, that achieves code execution inside the highly privileged system_server process, and then either replaces an existing arbitrary application on the device with our own malware app or changes the device’s SELinux policy. For some other devices, we are also able to gain kernel code execution by loading an arbitrary kernel module. We had responsibly disclosed the vulnerability to Android Security Team which tagged it as CVE-2015-3825 (internally as ANDROID-21437603/21583894) and patched Android 4.4 / 5.x / M and Google Play Services. For the sake of completeness we also made a large scale experiment over 32,701 of Android applications, finding similar previously unknown deserialization vulnerabilities, identified by CVE-2015-2000/1/2/3/4/20, in 6 SDKs affecting multiple apps. We responsibly (privately) contacted the SDKs’ vendors or code maintainers so they would provide patches. Further analysis showed that many of the SDKs were vulnerable due to weak code generated by SWIG, an interoperability tool that connects C/C++ with variety of languages, when fed with some bad configuration given by the developer. We therefore worked closely with the SWIG team to make sure it would generate more robust code — patches are available.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Gao, Xing</author><author>Liu, Dachuan</author><author>Wang, Haining</author><author>Sun, Kun</author></authors></contributors><titles><title>PmDroid: Permission Supervision for Android Advertising</title><secondary-title>Proceedings of the IEEE Symposium on Reliable Distributed Systems</secondary-title></titles><periodical><full-title>Proceedings of the IEEE Symposium on Reliable Distributed Systems</full-title></periodical><pages>120-129</pages><volume>2016-Janua</volume><keywords><keyword>Ad Networks</keyword><keyword>Android</keyword><keyword>Permission</keyword><keyword>Privacy Protection</keyword></keywords><dates><year>2016</year></dates><isbn>9781467393027</isbn><electronic-resource-num>10.1109/SRDS.2015.41</electronic-resource-num><urls><pdf-urls><url>internal-pdf://af55da85726d7ab7ce77a171cea385ce012a.pdf</url></pdf-urls></urls><abstract>—It is well-known that Android mobile advertising networks may abuse their host applications' permission to collect private information. Since the advertising library and host app are running in the same process, the current Android permission mechanism cannot prevent an ad network from collecting private data that is out of an ad network's permission range. In this paper, we propose PmDroid to protect the data that is not under the scope of the ad network's permission set. PmDroid can block the data from being sent to advertising servers at the occurrence of permission violation in ad networks. Moreover, we utilize PmDroid to assess how serious the permission violation problem is in the ad networks. We first implement 53 sample apps using a single ad network library. We grant all permissions of Android 4.3 to these apps and record the data sent to the Internet. Then, we further analyze 430 published market apps. In total, there are 76 ad networks identified in our experiments. We compare the permission of data received by these ad networks with their official documents. Our experimental results indicate that the permission violation is a real problem in existing ad network markets.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Huang, Chao</author><author>Wang, Shuohong</author><author>Sun, Haiyang</author><author>Qi, Zhengwei</author></authors></contributors><titles><title>DefDroid: Securing Android with Fine-Grained Security Policy</title><secondary-title>Seke</secondary-title></titles><periodical><full-title>Seke</full-title></periodical><keywords><keyword>android</keyword><keyword>bytecode</keyword><keyword>permission restriction</keyword><keyword>repackage</keyword></keywords><dates><year>2015</year></dates><isbn>1891706373</isbn><electronic-resource-num>10.18293/SEKE2015-162</electronic-resource-num><urls><pdf-urls><url>internal-pdf://d4ef064dbb08306e4207a6a4116f06a278f1.pdf</url></pdf-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sarwar, Golam</author><author>Mehani, Olivier</author><author>Borely, Roksana</author><author>Kaafar, Mohamed Ali</author></authors></contributors><titles><title>On the Effectiveness of Dynamic Taint Analysis for Protecting Against Private Information Leaks on Android-based Devices</title><secondary-title>SECRYPT 2013, 10th International Conference on Security and Cryptography</secondary-title></titles><periodical><full-title>SECRYPT 2013, 10th International Conference on Security and Cryptography</full-title></periodical><pages>1-15</pages><keywords><keyword>android</keyword><keyword>anti-taint-analysis</keyword><keyword>anti-taintdroid</keyword><keyword>dynamic taint analysis</keyword><keyword>malware</keyword><keyword>privacy</keyword></keywords><dates><year>2013</year></dates><isbn>9789898565730</isbn><urls><pdf-urls><url>internal-pdf://adbceac52548023c6d1b540173f9ad056dbc.pdf</url></pdf-urls><web-urls><url>http://www.nicta.com.au/pub?id=6865</url></web-urls></urls><abstract>We investigate the limitations of using dynamic taint analysis for tracking privacy-sensitive information on Android-based mobile devices. Taint tracking keeps track of data as it propagates through variables, inter-process messages and ﬁles, by tagging them with taint marks. A popular taint-tracking system, TaintDroid, uses this approach in Android mobile applications to mark private information, such as device identiﬁers or user’s contacts details, and subsequently issue warnings when this information is misused (e.g., sent to an undesired third party). We present a collection of attacks on Android-based taint tracking. Speciﬁcally, we apply generic classes of anti-taint tracking methods to a mobile device environment to circumvent dynamic taint analysis. We have implemented the presented techniques in an Android application, ScrubDroid. We successfully tested our app with the TaintDroid implementations for Android OS versions 2.3 to 4.1.1, both using the emulator and with real devices. Finally, we have evaluated the success rate and time to complete of the presented attacks. We conclude that, although taint tracking may be a valuable tool for software developers, it will not eﬀectively protect sensitive data from the black-box code of a motivated attacker applying any of the presented anti-taint tracking methods.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Barrere, M.</author><author>Hurel, G.</author><author>Badonnel, R.</author><author>Festor, O.</author></authors></contributors><titles><title>Ovaldroid: An OVAL-based vulnerability assessment framework for Android</title><secondary-title>IFIP/IEEE International Symposium on Integrated Network Management</secondary-title></titles><periodical><full-title>IFIP/IEEE International Symposium on Integrated Network Management</full-title></periodical><pages>1074-1075</pages><keywords><keyword>Android platform</keyword><keyword>Androids</keyword><keyword>Databases</keyword><keyword>Humanoid robots</keyword><keyword>Mobile communication</keyword><keyword>Mobile handsets</keyword><keyword>OVAL based vulnerability assessment framework for</keyword><keyword>Ovaldroid</keyword><keyword>Prototypes</keyword><keyword>Security</keyword><keyword>distributed framework</keyword><keyword>hostile environments</keyword><keyword>mobile computing</keyword><keyword>mobile computing devices</keyword><keyword>operating systems (computers)</keyword><keyword>vulnerability management mechanisms</keyword></keywords><dates><year>2013</year></dates><isbn>9783901882500</isbn><urls><pdf-urls><url>internal-pdf://add90f5bd21eb3d19f5a18c67ff4a656bd11.pdf</url></pdf-urls></urls><abstract>Mobile computing devices and the services offered by them are utilized by millions of users on a daily basis. However, they operate in hostile environments getting exposed to a wide variety of threats. Accordingly, vulnerability management mechanisms are highly required. We present in this demo a novel approach for increasing the security of mobile devices by efficiently detecting vulnerable configurations. In that context, we propose Ovaldroid, an OVAL-based distributed framework for ensuring safe configurations within the Android platform and we present an implementation prototype developed to this end.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Falcone, Yliès</author><author>Currea, Sebastian</author><author>Jaber, Mohamad</author></authors></contributors><titles><title>Runtime verification and enforcement for android applications with RV-droid</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>88-95</pages><volume>7687 LNCS</volume><keywords/><dates><year>2013</year></dates><isbn>9783642356315</isbn><electronic-resource-num>10.1007/978-3-642-35632-2-11</electronic-resource-num><urls><pdf-urls><url>internal-pdf://e4cfc472ee55d19992c20b4c8382af08ec33.pdf</url></pdf-urls></urls><abstract>RV-Droid is an implemented framework dedicated to runtime verifi-cation (RV) and runtime enforcement (RE) of Android applications. RV-Droid consists of an Android application that interacts closely with a cloud. Running RV-Droid on their devices, users can select targeted Android applications from Google Play (or a dedicated repository) and a property. The cloud hosts third-party RV tools that are used to synthesize AspectJ aspects from the property. According to the chosen RV tool and the specification, some appropriate mon-itoring code, the original application and the instrumentation aspect are woven together. Weaving can occur either on the user's device or in the dedicated cloud. The woven application is then retrieved and executed on the user's device and the property is runtime verified. RV-Droid is generic and currently works with two existing runtime verification frameworks for (pure) Java programs: with Java-MOP and (partially) with RuleR. RV-Droid does not require any modification to the Android kernel and targeted applications can be retrieved off-the-shelf. We carried out several experiments that demonstrated the effectiveness of RV-Droid on monitoring (security) properties.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Rashidi, Bahman</author><author>Fung, Carol</author></authors></contributors><titles><title>A Survey of Android Security Threats and Defenses</title><secondary-title>Journal of Wireless Mobile Networks, Ubiquitous Computing, and Dependable Applications</secondary-title></titles><periodical><full-title>Journal of Wireless Mobile Networks, Ubiquitous Computing, and Dependable Applications</full-title></periodical><pages>3-35</pages><volume>6</volume><issue>3</issue><keywords><keyword>android</keyword><keyword>privacy</keyword><keyword>security</keyword><keyword>smartphone</keyword></keywords><dates><year>2015</year></dates><urls><pdf-urls><url>internal-pdf://50279538711e7e4872ac143b59a54ddf9bed.pdf</url></pdf-urls></urls><abstract>With billions of people using smartphones and the exponential growth of smartphone apps, it is pro-hibitive for app marketplaces, such as Google App Store, to thoroughly verify if an app is legitimate or malicious. As a result, mobile users are left to decide for themselves whether an app is safe to use. Even worse, recent studies have shown that over 70% of apps in markets request to collect data irrelevant to the main functions of the apps, which could cause leaking of private information or inefficient use of mobile resources. It is worth mentioning that since resource management mech-anism of mobile devices is different from PC machines, existing security solutions in PC malware area are not quite compatible with mobile devices. Therefore, academic researchers and commercial anti-malware companies have proposed many security mechanisms to address the security issues of the Android devices. Considering the mechanisms and techniques which are different in nature and used in proposed works, they can be classified into different categories. In this survey, we discuss the existing Android security threats and existing security enforcements solutions between 2010 − 2015 and try to classify works and review their functionalities. We review a few works of each class. The survey also reviews the strength and weak points of the solutions.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Allalouf, Miriam</author><author>Ben-Av, Radel</author><author>Gerdov, Alex</author></authors></contributors><titles><title>StoreDroid: Sensor-based data protection framework for Android</title><secondary-title>IWCMC 2014 - 10th International Wireless Communications and Mobile Computing Conference</secondary-title></titles><periodical><full-title>IWCMC 2014 - 10th International Wireless Communications and Mobile Computing Conference</full-title></periodical><pages>511-517</pages><keywords><keyword>Android</keyword><keyword>Data Security</keyword><keyword>Mobile Computing</keyword><keyword>Security-Enhanced Linux</keyword></keywords><dates><year>2014</year></dates><isbn>9781479909599</isbn><electronic-resource-num>10.1109/IWCMC.2014.6906409</electronic-resource-num><urls><pdf-urls><url>internal-pdf://a195193c5db91086559132748bda4522b28f.pdf</url></pdf-urls></urls><abstract>Android has become the most prevalent smartphone operating system. Despite its popularity, Android has a lot of flaws in security. In this research study we target a wide range of smartphone applications that share secret and local data with the service provider so that this data will not be leaked or accessed by other entities. The StoreDroid framework, described in this paper, addresses possible data violations that can occur in the current Android system by adding protection mechanisms in several layers as follows: (1) at the Linux level we use the security-enhanced Linux and security-enhanced Android plugins that prevent today's privileged escalation data access; (2) StoreDroidApp is a generic sensor-based access control mechanism where the sensors (such as biometric sensors and GPS) and the rules to access the data are defined by the service provider for better protection — we took advantage of the fact that Android systems are usually integrated with various hardware sensors in order to protect the user as well as the service provider; and (3) a secured message passing protocol to ensure that sensitive data will not be compromised by unwanted applications. The StoreDroid framework makes the following contributions: (1) the generic StoreDroidApp stub that is installed when the ROM is built narrows possible illegal data access for assigned application by the set of semantic and limiting sensor-based access rules, and (2) on top of the regular Linux used in Android, the customized security-enhanced Linux ensures that the sensor-based application will keep the data isolated and secured.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Guri, Mordechai</author><author>Poliak, Yuri</author><author>Shapira, Bracha</author><author>Elovici, Yuval</author></authors></contributors><titles><title>JoKER: Trusted Detection of Kernel Rootkits in Android Devices via JTAG Interface</title></titles><periodical/><keywords><keyword>Forensics</keyword><keyword>JTAG</keyword><keyword>Rootkits</keyword><keyword>Security</keyword><keyword>Trusted Detection</keyword><keyword>— Android</keyword></keywords><urls><pdf-urls><url>internal-pdf://ca69817a555c6dcc3221e9dbe7ce1733945d.pdf</url></pdf-urls><web-urls><url>http://ieeexplore.ieee.org/ielx7/7293439/7345233/07345266.pdf?tp=&amp;arnumber=7345266&amp;isnumber=7345233</url></web-urls></urls><abstract>— Smartphones and tablets have become prime targets for malware, due to the valuable private and corporate information they hold. While Anti-Virus (AV) program may successfully detect malicious applications (apps), they remain ineffective against low-level rootkits that evade detection mechanisms by masking their own presence. Furthermore, any detection mechanism run on the same physical device as the monitored OS can be compromised via application, kernel or boot-loader vulnerabilities. Consequentially, trusted detection of kernel rootkits in mobile devices is a challenging task in practice. In this paper we present 'JoKER' -a system which aims at detecting rootkits in the Android kernel by utilizing the hardware's Joint Test Action Group (JTAG) interface for trusted memory forensics. Our framework consists of components that extract areas of a kernel's memory and reconstruct it for further analysis. We present the overall architecture along with its implementation, and demonstrate that the system can successfully detect the presence of stealthy rootkits in the kernel. The results show that although JTAG's main purpose is system testing, it can also be used for malware detection where traditional methods fail.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Walnycky, Daniel</author><author>Baggili, Ibrahim</author><author>Marrington, Andrew</author><author>Moore, Jason</author><author>Breitinger, Frank</author></authors></contributors><titles><title>Network and device forensic analysis of Android social-messaging applications</title><secondary-title>Digital Investigation</secondary-title></titles><periodical><full-title>Digital Investigation</full-title></periodical><pages>S77-S84</pages><volume>14</volume><issue>S1</issue><keywords><keyword>Android forensics</keyword><keyword>Application security testing</keyword><keyword>Datapp</keyword><keyword>Instant messaging</keyword><keyword>Network forensics</keyword><keyword>Privacy of messaging applications</keyword></keywords><dates><year>2015</year></dates><isbn>1742-2876</isbn><electronic-resource-num>10.1016/j.diin.2015.05.009</electronic-resource-num><urls><pdf-urls><url>internal-pdf://c057da196c0f1d4442f6362c9b05f4aef139.pdf</url></pdf-urls></urls><abstract>Abstract In this research we forensically acquire and analyze the device-stored data and network traffic of 20 popular instant messaging applications for Android. We were able to reconstruct some or the entire message content from 16 of the 20 applications tested, which reflects poorly on the security and privacy measures employed by these applications but may be construed positively for evidence collection purposes by digital forensic practitioners. This work shows which features of these instant messaging applications leave evidentiary traces allowing for suspect data to be reconstructed or partially reconstructed, and whether network forensics or device forensics permits the reconstruction of that activity. We show that in most cases we were able to reconstruct or intercept data such as: passwords, screenshots taken by applications, pictures, videos, audio sent, messages sent, sketches, profile pictures and more.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Festor, Olivier</author><author>Festor, Olivier</author><author>Android, Increasing</author></authors></contributors><titles><title>Increasing Android Security using a Lightweight OVAL-based Vulnerability Assessment Framework To cite this version : Increasing Android Security using a Lightweight OVAL-based Vulnerability Assessment Framework</title></titles><periodical/><keywords/><dates><year>2012</year></dates><urls><pdf-urls><url>internal-pdf://c2b1f7b6ac62aedf1006d68e8e17ec245ca9.pdf</url></pdf-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Suarez-Tangil, Guillermo</author><author>Tapiador, Juan E.</author><author>Peris-Lopez, Pedro</author></authors></contributors><titles><title>Compartmentation policies for android apps: A combinatorial optimization approach</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>63-77</pages><volume>9408</volume><keywords><keyword>Collusion attacks</keyword><keyword>Malware</keyword><keyword>Permission based security</keyword><keyword>Risk assessment</keyword><keyword>Smartphone security</keyword></keywords><dates><year>2015</year></dates><isbn>9783319256443</isbn><electronic-resource-num>10.1007/978-3-319-25645-0_5</electronic-resource-num><urls><pdf-urls><url>internal-pdf://bea81f582a0cbead29ebc0c8e40d80367ea1.pdf</url></pdf-urls></urls><abstract>Intrusion prevention is the process of performing intrusion detection and attempting to stop detected possible incidents. Intrusion prevention systems (IPSs) focus primarily on identifying possible incidents, logging information about them, attempting to stop them, and reporting them to security administrators. In addition, organizations use IPSs for other purposes, such as identifying problems with security policies, documenting existing threats, and deterring individuals from violating security policies. IPSs have become a necessary addition to the security infrastructure of nearly every organization. IPSs typically record information related to observed events, notify security administrators of important observed events, and produce reports. Many IPSs can also respond to a detected threat by attempting to prevent it from succeeding. They use several response techniques, which involve the IPS stopping the attack itself, changing the security environment (reconfiguring a firewall), or changing the attack’s content. This chapter describes the characteristics of IPS technologies and provides recommendations for designing, implementing, configuring, securing, monitoring, and maintaining them. The types of IPS technologies are differentiated primarily by the types of events that they monitor and the ways in which they are deployed.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zheng, Min</author><author>Sun, Mingshen</author><author>Lui, John C.S.</author></authors></contributors><titles><title>DroidRay: a security evaluation system for customized android firmwares</title><secondary-title>ASIA CCS '14 (9th ACM SIGSAC symposium on Information, computer and communications security)</secondary-title></titles><periodical><full-title>ASIA CCS '14 (9th ACM SIGSAC symposium on Information, computer and communications security)</full-title></periodical><pages>471-482</pages><keywords/><dates><year>2014</year></dates><isbn>9781450328005</isbn><electronic-resource-num>10.1145/2590296.2590313</electronic-resource-num><urls><pdf-urls><url>internal-pdf://bbe07fb2d65ae83fd0a88e78bc0b0b72c37a.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2590296.2590313</url></web-urls></urls><abstract>Name: DroidRay</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Huang, Heqing</author><author>Chen, Kai</author><author>Ren, Chuangang</author><author>Liu, Peng</author><author>Zhu, Sencun</author><author>Wu, Dinghao</author></authors></contributors><titles><title>Towards Discovering and Understanding Unexpected Hazards in Tailoring Antivirus Software for Android</title><secondary-title>Proceeding of the</secondary-title></titles><periodical><full-title>Proceeding of the</full-title></periodical><pages>7-18</pages><keywords><keyword>all or part of</keyword><keyword>anti-malware</keyword><keyword>classroom use is granted</keyword><keyword>copies are not made</keyword><keyword>malware</keyword><keyword>mobile</keyword><keyword>or</keyword><keyword>or distributed</keyword><keyword>or hard copies of</keyword><keyword>permission to make digital</keyword><keyword>this work for personal</keyword><keyword>vulnerability measurement</keyword><keyword>without fee provided that</keyword></keywords><dates><year>2015</year></dates><isbn>9781450332453</isbn><electronic-resource-num>10.1145/2714576.2714589</electronic-resource-num><urls><pdf-urls><url>internal-pdf://bc513a1838131fee83d0043c99e3f5429152.pdf</url></pdf-urls></urls><abstract>In its latest comparison of Android Virus Detectors (AVDs), the independent lab AV-TEST reports that they have around 95% malware detection rate. This only indicates that current AVDs on Android have good malware signature databases. When the AVDs are deployed on the fast-evolving mobile system, their effectiveness should also be measured on their runtime behavior. Therefore, we perform a comprehensive analysis on the design of top 30 AVDs tailored for Android. Our new understanding of the AVDs’ design leads us to discover the hazards in adopting AVD solutions for Android, including hazards in malware scan (malScan) mechanisms and the engine update (engineUpdate). First, the malScan mechanisms of all the analyzed AVDs lack comprehensive and continuous scan coverage. To measure the seriousness of the identified hazards, we implement targeted evasions at certain time (e.g., end of the scan) and locations (certain folders) and find that the evasions can work even under the assumption that the AVDs are equipped with “complete” virus definition files. Second, we discover that, during the engineUpdate, the Android system surprisingly nullifies all types of protections of the AVDs and renders the system for a period of high risk. We confirmed the presence of this vulnerable program logic in all versions of Google Android source code and other vendor customized system images. Since AVDs have about 650–1070 million downloads on the Google store, we immediately reported these hazards to AVD vendors across 16 countries. Google also confirmed our discovered hazard in the engineUpdate procedure, so feature enhancements might be included in later versions. Our research sheds the light on the importance of taking the secure and preventive design strategies for AVD or other mission critical apps for fast-evolving mobile-systems</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Schütte, Julian</author><author>Fedler, Rafael</author><author>Titze, Dennis</author></authors></contributors><titles><title>ConDroid: Targeted dynamic analysis of android applications</title><secondary-title>Proceedings - International Conference on Advanced Information Networking and Applications, AINA</secondary-title></titles><periodical><full-title>Proceedings - International Conference on Advanced Information Networking and Applications, AINA</full-title></periodical><pages>571-578</pages><volume>2015-April</volume><keywords><keyword>Android</keyword><keyword>Automated Analysis</keyword><keyword>Partial Symbolic Execution</keyword></keywords><dates><year>2015</year></dates><isbn>9781479979042</isbn><electronic-resource-num>10.1109/AINA.2015.238</electronic-resource-num><urls><pdf-urls><url>internal-pdf://ff375d8a1d04b4733e5297ab461b590f86d8.pdf</url></pdf-urls></urls><abstract>Recent years have seen the development of a multitude of tools for the security analysis of Android applications. A major deficit of current fully automated security analyses, however, is their inability to drive execution to interesting parts, such as where code is dynamically loaded or certain data is decrypted. In fact, security-critical or downright offensive code may not be reached at all by such analyses when dynamically checked conditions are not met by the analysis environment. To tackle this unsolved problem, we propose a tool combining static call path analysis with byte code instrumentation and a heuristic partial symbolic execution, which aims at executing interesting calls paths. It can systematically locate potentially security-critical code sections and instrument applications such that execution of these sections can be observed in a dynamic analysis. Among other use cases, this can be leveraged to force applications into revealing dynamically loaded code, a simple yet effective way to circumvent detection by security analysis software such as the Google Play Store's Bouncer. We illustrate the functionality of our tool by means of a simple logic bomb example and a real-life security vulnerability which is present in hunderd of apps and can still be actively exploited at this time.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bastani, Osbert</author><author>Anand, Saswat</author><author>Aiken, Alex</author></authors></contributors><titles><title>Interactively Verifying Absence of Explicit Information Flows in Android Apps</title><secondary-title>SIGPLAN Not.</secondary-title></titles><periodical><full-title>SIGPLAN Not.</full-title></periodical><pages>299-315</pages><volume>50</volume><issue>10</issue><keywords><keyword>abductive inference</keyword><keyword>interactive verification</keyword><keyword>specifications from tests</keyword></keywords><dates><year>2015</year></dates><isbn>978-1-4503-3689-5</isbn><electronic-resource-num>10.1145/2858965.2814274</electronic-resource-num><urls><pdf-urls><url>internal-pdf://e835da3ac76793be4a2e8a3b740858f432da.pdf</url></pdf-urls><web-urls><url>http://doi.acm.org/10.1145/2858965.2814274</url></web-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Ren, Chuangang</author><author>Zhang, Yulong</author><author>Xue, Hui</author><author>Wei, Tao</author><author>Liu, Peng</author></authors></contributors><titles><title>Towards Discovering and Understanding Task Hijacking in Android</title><secondary-title>24th USENIX Security Symposium (USENIX Security 15)</secondary-title></titles><periodical><full-title>24th USENIX Security Symposium (USENIX Security 15)</full-title></periodical><pages>945-959</pages><keywords/><dates><year>2015</year></dates><isbn>978-1-931971-232</isbn><urls><pdf-urls><url>internal-pdf://f870da662d6224db7c45d300101b39a7e1b3.pdf</url></pdf-urls><web-urls><url>https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/ren-chuangang</url></web-urls></urls><abstract>The focus on task hajacking, the possibility to mess with other apps' activities. This can be used for phising/blocking. Activities are organized in tasks (tasks). An attacker has different ways to put its bad Acitivity inside a victim's task. This depends on how the victim spawns acitivities, but it is usually possible. For instance the attacker can set the task affinity field of the bad acitivty to the value of the package name of the victim's app (see 5.2.1). This can be used to both phising and blocking (e.g., uninstallation blocking)</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Xing, Luyi</author><author>Pan, Xiaorui</author><author>Wang, Rui</author><author>Yuan, Kan</author><author>Wang, Xiao Feng</author></authors></contributors><titles><title>Upgrading your Android, elevating my malware: Privilege escalation through mobile OS updating</title><secondary-title>Proceedings - IEEE Symposium on Security and Privacy</secondary-title></titles><periodical><full-title>Proceedings - IEEE Symposium on Security and Privacy</full-title></periodical><pages>393-408</pages><keywords><keyword>Android</keyword><keyword>OS update</keyword><keyword>Package Manager Service</keyword><keyword>Privilege Escalation</keyword></keywords><dates><year>2014</year></dates><isbn>9781479946860</isbn><electronic-resource-num>10.1109/SP.2014.32</electronic-resource-num><urls><pdf-urls><url>internal-pdf://f150b5fbbdce6d937eccc1ab05aeb77d0566.pdf</url></pdf-urls></urls><abstract>Android is a fast evolving system, with new updates coming out one after another. These updates often completely overhaul a running system, replacing and adding tens of thousands of files across Android's complex architecture, in the presence of critical user data and applications (apps for short). To avoid accidental damages to such data and existing apps, the upgrade process involves complicated program logic, whose security implications, however, are less known. In this paper, we report the first systematic study on the Android updating mechanism, focusing on its Package Management Service (PMS). Our research brought to light a new type of security-critical vulnerabilities, called Pileup flaws, through which a malicious app can strategically declare a set of privileges and attributes on a low-version operating system (OS) and wait until it is upgraded to escalate its privileges on the new system. Specifically, we found that by exploiting the Pileup vulnerabilities, the app can not only acquire a set of newly added system and signature permissions but also determine their settings (e.g., protection levels), and it can further substitute for new system apps, contaminate their data (e.g., cache, cookies of Android default browser) to steal sensitive user information or change security configurations, and prevent installation of critical system services. We systematically analyzed the source code of PMS using a program verification tool and confirmed the presence of those security flaws on all Android official versions and over 3000 customized versions. Our research also identified hundreds of exploit opportunities the adversary can leverage over thousands of devices across different device manufacturers, carriers and countries. To mitigate this threat without endangering user data and apps during an upgrade, we also developed a new detection service, called SecUP, which deploys a scanner on the user's device to capture the malicious apps designed to exploit Pileu- vulnerabilities, based upon the vulnerability-related information automatically collected from newly released Android OS images.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zarras, Apostolis</author><author>Papadogiannakis, Antonis</author><author>Gawlik, Robert</author><author>Holz, Thorsten</author></authors></contributors><titles><title>Automated generation of models for fast and precise detection of HTTP-based malware</title><secondary-title>2014 12th Annual Conference on Privacy, Security and Trust, PST 2014</secondary-title></titles><periodical><full-title>2014 12th Annual Conference on Privacy, Security and Trust, PST 2014</full-title></periodical><pages>249-256</pages><keywords/><dates><year>2014</year></dates><isbn>9781479935031</isbn><electronic-resource-num>10.1109/PST.2014.6890946</electronic-resource-num><urls><pdf-urls><url>internal-pdf://ed90d27178d6c75b17ef4e0aa8271437c952(1).pdf</url></pdf-urls></urls><abstract>Malicious software and especially botnets are among the most important security threats in the Internet. Thus, the accurate and timely detection of such threats is of great importance. Detecting machines infected with malware by identifying their malicious activities at the network level is an appealing approach, due to the ease of deployment. Nowadays, the most common communication channels used by attackers to control the infected machines are based on the HTTP protocol. To evade detection, HTTP-based malware adapt their behavior to the communication patterns of the benign HTTP clients, such as web browsers. This poses significant challenges to existing detection approaches like signature-based and behavioral-based detection systems. In this paper, we propose BOTHOUND: a novel approach to precisely detect HTTP-based malware at the network level. The key idea is that implementations of the HTTP protocol by different entities have small but perceivable differences. Building on this observation,BOTHOUND automatically generates models for malicious and benign requests and classifies at real time the HTTP traffic of a monitored network. Our evaluation results demonstrate that BOTHOUND outperforms prior work on identifying HTTP-based botnets, being able to detect a large variety of real-world HTTP-based malware, including advanced persistent threats used in targeted attacks, with a very low percentage of classification errors.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Peng, Sancheng</author><author>Yu, Shui</author><author>Yang, Aimin</author></authors></contributors><titles><title>Smartphone malware and its propagation modeling: A survey</title><secondary-title>IEEE Communications Surveys and Tutorials</secondary-title></titles><periodical><full-title>IEEE Communications Surveys and Tutorials</full-title></periodical><pages>925-941</pages><volume>16</volume><issue>2</issue><keywords><keyword>mobile malware</keyword><keyword>propagation modeling</keyword><keyword>simulator</keyword><keyword>smartphone</keyword></keywords><dates><year>2014</year></dates><isbn>1553-877X VO - 16</isbn><electronic-resource-num>10.1109/SURV.2013.070813.00214</electronic-resource-num><urls><pdf-urls><url>internal-pdf://f60fa5ef02bc91a5d2adbf7511a002c3e77a.pdf</url></pdf-urls></urls><abstract>Smartphones are pervasively used in society, and have been both the target and victim of malware writers. Motivated by the significant threat that presents to legitimate users, we survey the current smartphone malware status and their propagation models. The content of this paper is presented in two parts. In the first part, we review the short history of mobile malware evolution since 2004, and then list the classes of mobile malware and their infection vectors. At the end of the first part, we enumerate the possible damage caused by smartphone malware. In the second part, we focus on smartphone malware propagation modeling. In order to understand the propagation behavior of smartphone malware, we recall generic epidemic models as a foundation for further exploration. We then extensively survey the smartphone malware propagation models. At the end of this paper, we highlight issues of the current smartphone malware propagation models and discuss possible future trends based on our understanding of this topic.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Batyuk, Leonid</author><author>Herpich, Markus</author><author>Camtepe, Seyit Ahmet</author><author>Raddatz, Karsten</author><author>Schmidt, Aubrey-Derrick</author><author>Albayrak, Sahin</author></authors></contributors><titles><title>Using static analysis for automatic assessment and mitigation of unwanted and malicious activities within Android applications</title><secondary-title>2011 6th International Conference on Malicious and Unwanted Software</secondary-title></titles><periodical><full-title>2011 6th International Conference on Malicious and Unwanted Software</full-title></periodical><pages>66-72</pages><keywords><keyword>Android Market application</keyword><keyword>Androids</keyword><keyword>Detectors</keyword><keyword>Humanoid robots</keyword><keyword>Privacy</keyword><keyword>Security</keyword><keyword>Smart phones</keyword><keyword>Software</keyword><keyword>application security</keyword><keyword>binary application package refactoring</keyword><keyword>coarse-grained permission</keyword><keyword>data privacy</keyword><keyword>digital signature</keyword><keyword>digital signatures</keyword><keyword>mobile computing</keyword><keyword>operating systems (computers)</keyword><keyword>privacy threat mitigation</keyword><keyword>reverse-engineering package</keyword><keyword>security threat mitigation</keyword><keyword>smart phone</keyword><keyword>software maintenance</keyword><keyword>static analysis</keyword><keyword>user interfaces</keyword><keyword>user security preference</keyword></keywords><dates><year>2011</year></dates><isbn>978-1-4673-0034-6</isbn><electronic-resource-num>10.1109/MALWARE.2011.6112328</electronic-resource-num><urls><pdf-urls><url>internal-pdf://e9628a03ea65910def46eda050fb26f7eedf.pdf</url></pdf-urls><web-urls><url>http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=6112328%5Cnhttp://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6112328</url></web-urls></urls><abstract>In the last decade, smartphones have gained widespread usage. Since the advent of online application stores, hundreds of thousands of applications have become instantly available to millions of smart-phone users. Within the Android ecosystem, application security is governed by digital signatures and a list of coarse-grained permissions. However, this mechanism is not fine-grained enough to provide the user with a sufficient means of control of the applications' activities. Abuse of highly sensible private information such as phone numbers without users' notice is the result. We show that there is a high frequency of privacy leaks even among widely popular applications. Together with the fact that the majority of the users are not proficient in computer security, this presents a challenge to the engineers developing security solutions for the platform. Our contribution is twofold: first, we propose a service which is able to assess Android Market applications via static analysis and provide detailed, but readable reports to the user. Second, we describe a means to mitigate security and privacy threats by automated reverse-engineering and refactoring binary application packages according to the users' security preferences.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sahs, Justin</author><author>Khan, Latifur</author></authors></contributors><titles><title>A Machine Learning Approach to Android Malware Detection</title><secondary-title>2012 European Intelligence and Security Informatics Conference</secondary-title></titles><periodical><full-title>2012 European Intelligence and Security Informatics Conference</full-title></periodical><pages>141-147</pages><keywords/><dates><year>2012</year></dates><isbn>978-1-4673-2358-1</isbn><electronic-resource-num>10.1109/EISIC.2012.34</electronic-resource-num><urls><pdf-urls><url>internal-pdf://2be56e54df4b28a17908de17480d699e1409.pdf</url></pdf-urls><web-urls><url>http://ieeexplore.ieee.org/document/6298824/</url></web-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Arp, Daniel</author><author>Spreitzenbarth, Michael</author><author>Hübner, Malte</author><author>Gascon, Hugo</author><author>Rieck, Konrad</author></authors></contributors><titles><title>Drebin: Effective and Explainable Detection of Android Malware in Your Pocket</title><secondary-title>Proceedings 2014 Network and Distributed System Security Symposium</secondary-title></titles><periodical><full-title>Proceedings 2014 Network and Distributed System Security Symposium</full-title></periodical><keywords/><dates><year>2014</year></dates><isbn>1-891562-35-5</isbn><electronic-resource-num>10.14722/ndss.2014.23247</electronic-resource-num><urls><pdf-urls><url>internal-pdf://0d7e6fe17b7dddd646f016a2e8b65fd9b0c4.pdf</url></pdf-urls><web-urls><url>http://www.internetsociety.org/doc/drebin-effective-and-explainable-detection-android-malware-your-pocket</url></web-urls></urls><abstract>#Drebin. They do lightweight static analysis. Pretty fast (10 secs/app), and they explain their detection results. Detection: 94%. FP: 1%. Bunch of features: hardware components, requested permissions, app components, filtered intents, restricted API calls (for which permission is required, but the app doesn't. maybe it has a root exploit), used permissions, suspicious API calls, network addresses.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhang, Mu</author><author>Duan, Yue</author><author>Yin, Heng</author><author>Zhao, Zhiruo</author></authors></contributors><titles><title>Semantics-Aware Android Malware Classification Using Weighted Contextual API Dependency Graphs</title><secondary-title>Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security</secondary-title></titles><periodical><full-title>Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security</full-title></periodical><pages>1105-1116</pages><keywords><keyword>all or part of</keyword><keyword>android</keyword><keyword>anomaly detection</keyword><keyword>graph similar-</keyword><keyword>ity</keyword><keyword>malware classification</keyword><keyword>or</keyword><keyword>or hard copies of</keyword><keyword>permission to make digital</keyword><keyword>semantics-aware</keyword><keyword>signature detection</keyword><keyword>stat</keyword><keyword>static analysi</keyword><keyword>static analysis</keyword><keyword>this work for personal</keyword></keywords><dates><year>2014</year></dates><isbn>9781450329576</isbn><electronic-resource-num>10.1145/2660267.2660359</electronic-resource-num><urls><pdf-urls><url>internal-pdf://1f50b5811ee02a4ebfb0d62235e773bb3726.pdf</url></pdf-urls></urls><abstract>The drastic increase of Android malware has led to a strong interest in developing methods to automate the malware analysis process. Existing automated Android malware detection and classification methods fall into two general categories: 1) signature-based and 2) machine learning-based. Signature-based approaches can be easily evaded by bytecode-level transformation attacks. Prior learningbased works extract features from application syntax, rather than program semantics, and are also subject to evasion. In this paper, we propose a novel semantic-based approach that classifies Android malware via dependency graphs. To battle transformation attacks, we extract a weighted contextual API dependency graph as program semantics to construct feature sets. To fight against malware variants and zero-day malware, we introduce graph similarity metrics to uncover homogeneous application behaviors while tolerating minor implementation differences. We implement a prototype system, DroidSIFT, in 23 thousand lines of Java code. We evaluate our system using 2200 malware samples and 13500 benign samples. Experiments show that our signature detection can correctly label 93% of malware instances; our anomaly detector is capable of detecting zero-day malware with a low false negative rate (2%) and an acceptable false positive rate (5.15%) for a vetting purpose</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Backes, M</author><author>Gerling, S</author><author>Hammer, C</author><author>Maffei, M</author><author>von Styp-Rekowsky, P</author></authors></contributors><titles><title>AppGuard¨Cenforcing user requirements on android apps</title><secondary-title>Proc. Tacas</secondary-title></titles><periodical><full-title>Proc. Tacas</full-title></periodical><pages>543-548</pages><keywords/><dates><year>2013</year></dates><urls><pdf-urls><url>internal-pdf://021dcecf6f54c05d5ae50e6f400f033d3ae6.pdf</url></pdf-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wain, Kathy</author><author>Au, Yee</author><author>Zhou, Yi Fan</author><author>Huang, Zhen</author><author>Lie, David</author></authors></contributors><titles><title>PScout : Analyzing the Android Permission Specification</title><secondary-title>CCS '12 Proceedings of the 2012 ACM conference on Computer and communications security</secondary-title></titles><periodical><full-title>CCS '12 Proceedings of the 2012 ACM conference on Computer and communications security</full-title></periodical><pages>217-228</pages><keywords><keyword>android</keyword><keyword>permissions</keyword><keyword>smartphone</keyword></keywords><dates><year>2012</year></dates><isbn>9781450316514</isbn><electronic-resource-num>10.1145/2382196.2382222</electronic-resource-num><urls><pdf-urls><url>internal-pdf://0f83b2e8db183b6fdca9620815e5a3b5d3b8.pdf</url></pdf-urls><web-urls><url>http://www.eecg.toronto.edu/~lie/papers/PScout-CCS2012-web.pdf%5Cnhttp://dl.acm.org/citation.cfm?id=2382222</url></web-urls></urls><abstract>Modern smartphone operating systems (OSs) have been developed with a greater emphasis on security and protecting privacy. One of the mechanisms these systems use to protect users is a permission system, which requires developers to declare what sensitive resources their applications will use, has users agree with this request when they install the application and constrains the application to the requested resources during runtime. As these permission systems become more common, questions have risen about their design and implementation. In this paper, we perform an analysis of the permission system of the Android smartphone OS in an attempt to begin answering some of these questions. Because the documentation of Android's permission system is incomplete and because we wanted to be able to analyze several versions of Android, we developed PScout, a tool that extracts the permission specification from the Android OS source code using static analysis. PScout overcomes several challenges, such as scalability due to Android's 3.4 million line code base, accounting for permission enforcement across processes due to Android's use of IPC, and abstracting Android's diverse permission checking mechanisms into a single primitive for analysis. We use PScout to analyze 4 versions of Android spanning version 2.2 up to the recently released Android 4.0. Our main findings are that while Android has over 75 permissions, there is little redundancy in the permission specification. However, if applications could be constrained to only use documented APIs, then about 22% of the non-system permissions are actually unnecessary. Finally, we find that a trade-off exists between enabling least-privilege security with fine-grained permissions and maintaining stability of the permission specification as the Android OS evolves.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Crussell, Jonathan</author><author>Gibler, Clint</author><author>Chen, Hao</author></authors></contributors><titles><title>AnDarwin: Scalable Semantics-Based Detection of Similar Android Applications</title><secondary-title>Esorics</secondary-title></titles><periodical><full-title>Esorics</full-title></periodical><pages>182-199</pages><keywords/><dates><year>2013</year></dates><isbn>978-3-642-40202-9</isbn><electronic-resource-num>10.1007/978-3-642-40203-6_11</electronic-resource-num><urls><pdf-urls><url>internal-pdf://08db4997c3a90c0a1c228814cf337b0145b4.pdf</url></pdf-urls><web-urls><url>http://www.cs.ucdavis.edu/research/tech-reports/2012/CSE-2013-73.pdf</url></web-urls></urls><abstract>The popularity and utility of smartphones rely on their vibrant application markets; however, plagiarism threatens the long-term health of these markets. In this paper, we present a scalable approach to detecting similar Android apps based on semantic information. We implement our approach in a tool called AnDarwin and evaluate it on 265,359 apps collected from 17 markets including Google Play and numerous third-party markets. In contrast with earlier approaches, AnDarwin does not compare apps pairwise, thus greatly increasing its scalability. Additionally, AnDarwin does not rely on information other than the app code — such as the app’s market, signature, or description — thus greatly increasing its reliability. AnDarwin can automatically detect library code and remove it from the similarity analysis. We present two use cases for AnDarwin: finding similar apps by different developers (“clones”) and similar apps from the same developer (“rebranded”). In ten hours, AnDarwin detected at least 4,295 apps which have been the victims of cloning and 36,106 apps that are rebranded. By analyzing the clusters found by AnDarwin, we found 88 new variants of malware and identified 169 malicious apps based on differences in the requested permissions. In contrast to earlier approaches, AnDarwin can detect both full and partial app similarity. Additionally, AnDarwin can automatically detect similar code that is injected into many apps, which may indicate the spread of malware. Our evaluation demonstrates AnDarwin’s ability to accurately detect similar apps on a large scale.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Demme, John</author><author>Maycock, Matthew</author><author>Schmitz, Jared</author><author>Tang, Adrian</author><author>Waksman, Adam</author><author>Sethumadhavan, Simha</author><author>Stolfo, Salvatore</author></authors></contributors><titles><title>On the feasibility of online malware detection with performance counters</title><secondary-title>ACM SIGARCH Computer Architecture News</secondary-title></titles><periodical><full-title>ACM SIGARCH Computer Architecture News</full-title></periodical><pages>559</pages><volume>41</volume><issue>3</issue><keywords><keyword>afosr</keyword><keyword>by grants fa 99500910389</keyword><keyword>ccf</keyword><keyword>darpa</keyword><keyword>fa 865011c7190</keyword><keyword>fa 87501020253</keyword><keyword>machine learning</keyword><keyword>malware detection</keyword><keyword>performance counters</keyword><keyword>tc</keyword><keyword>this work was supported</keyword></keywords><dates><year>2013</year></dates><isbn>9781450320795</isbn><electronic-resource-num>10.1145/2508148.2485970</electronic-resource-num><urls><pdf-urls><url>internal-pdf://21aee6179e11114ef394f029719b503b406e.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2508148.2485970</url></web-urls></urls><abstract>The proliferation of computers in any domain is followed by the proliferation of malware in that domain. Systems, including the latest mobile platforms, are laden with viruses, rootkits, spyware, adware and other classes of malware. Despite the existence of anti-virus software, malware threats persist and are growing as there exist a myriad of ways to subvert anti-virus (AV) software. In fact, attackers today exploit bugs in the AV software to break into systems. In this paper, we examine the feasibility of building a malware detector in hardware using existing performance counters. We find that data from performance counters can be used to identify malware and that our detection techniques are robust to minor variations in malware programs. As a result, after examining a small set of variations within a family of malware on Android ARM and Intel Linux platforms, we can detect many variations within that family. Further, our proposed hardware modifications allow the malware detector to run securely beneath the system software, thus setting the stage for AV implementations that are simpler and less buggy than software AV. Combined, the robustness and security of hardware AV techniques have the potential to advance state-of-the-art online malware detection.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Dai, Shuaifu</author><author>Tongaonkar, Alok</author><author>Wang, Xiaoyin</author><author>Nucci, Antonio</author><author>Song, Dawn</author></authors></contributors><titles><title>NetworkProfiler: Towards automatic fingerprinting of Android apps</title><secondary-title>Proceedings - IEEE INFOCOM</secondary-title></titles><periodical><full-title>Proceedings - IEEE INFOCOM</full-title></periodical><pages>809-817</pages><keywords/><dates><year>2013</year></dates><isbn>9781467359467</isbn><electronic-resource-num>10.1109/INFCOM.2013.6566868</electronic-resource-num><urls><pdf-urls><url>internal-pdf://6fca78c6b373aba69a86c8dfb9beb73bfe16.pdf</url></pdf-urls></urls><abstract>Network operators need to have a clear visibility into the applications running in their network. This is critical for both security and network management. Recent years have seen an exponential growth in the number of smart phone apps which has complicated this task. Traditional methods of traffic classification are no longer sufficient as the majority of this smart phone app traffic is carried over HTTP/HTTPS. Keeping up with the new applications that come up everyday is very challenging and time-consuming. We present a novel technique for automatically generating network profiles for identifying Android apps in the HTTP traffic. A network profile consists of fingerprints, i.e., unique characteristics of network behavior, that can be used to identify an app. To profile an Android app, we run the app automatically in an emulator and collect the network traces. We have developed a novel UI fuzzing technique for running the app such that different execution paths are exercised, which is necessary to build a comprehensive network profile. We have also developed a light-weight technique, for extracting fingerprints, that is based on identifying invariants in the generated traces. We used our technique to generate network profiles for thousands of apps. Using our network profiles we were able to detect the presence of these apps in real-world network traffic logs from a cellular provider.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Armando, Alessandro</author><author>Merlo, Alessio</author><author>Migliardi, Mauro</author><author>Verderame, Luca</author></authors></contributors><titles><title>Would you mind forking this process? A denial of service attack on android (and some countermeasures)</title><secondary-title>IFIP Advances in Information and Communication Technology</secondary-title></titles><periodical><full-title>IFIP Advances in Information and Communication Technology</full-title></periodical><pages>13-24</pages><volume>376 AICT</volume><issue>June 2012</issue><keywords/><dates><year>2012</year></dates><isbn>9783642304354</isbn><electronic-resource-num>10.1007/978-3-642-30436-1_2</electronic-resource-num><urls><pdf-urls><url>internal-pdf://71177aaf3ca3f6636ac74ee36c82c844c96c (1).pdf</url></pdf-urls></urls><abstract>We present a previously undisclosed vulnerability of Android OS which can be exploited by mounting a Denial-of-Service attack that makes devices become totally unresponsive. We discuss the characteristics of the vulnerability – which affects all versions of Android – and propose two different fixes, each involving little patching implementing a few architectural countermeasures. We also provide experimental evidence of the effectiveness of the exploit as well as of the proposed countermeasures.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Tang, Adrian</author><author>Sethumadhavan, Simha</author><author>Stolfo, Salvatore J.</author></authors></contributors><titles><title>Unsupervised Anomaly-Based Malware Detection Using Hardware Features</title></titles><periodical/><pages>109-129</pages><keywords><keyword>hardware performance counter</keyword><keyword>malware detection</keyword></keywords><dates><year>2014</year></dates><electronic-resource-num>10.1007/978-3-319-11379-1_6</electronic-resource-num><urls><pdf-urls><url>internal-pdf://5a307a8d6ea0ba6f5f7e39a0199437c2cf48.pdf</url></pdf-urls><web-urls><url>http://link.springer.com/10.1007/978-3-319-11379-1_6</url></web-urls></urls><abstract>Recent works have shown promise in using microarchitec- tural execution patterns to detect malware programs. These detectors belong to a class of detectors known as signature- based detectors as they catch malware by comparing a pro- gram’s execution pattern (signature) to execution patterns of known malware programs. In this work, we propose a new class of detectors — anomaly-based hardware malware detectors — that do not require signatures for malware de- tection, and thus can catch a wider range of malware in- cluding potentially novel ones. We use unsupervised ma- chine learning to build profiles of normal program execution based on data from performance counters, and use these profiles to detect significant deviations in program behavior that occur as a result of malware exploitation. We show that real-world exploitation of popular programs such as IE and Adobe PDF Reader on aWindows/x86 platform can be detected with nearly perfect certainty. We also examine the limits and challenges in implementing this approach in face of a sophisticated adversary attempting to evade anomaly- based detection. The proposed detector is complementary to previously proposed signature-based detectors and can be used together to improve security. 1.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Ramanathan, R R</author><author>Dmitrienko, Alexandra</author></authors></contributors><titles><title>Privilege Escalation Attacks on Android</title><secondary-title>Nist Special Publication</secondary-title></titles><periodical><full-title>Nist Special Publication</full-title></periodical><pages>346-360-360</pages><volume>6531</volume><issue>August 2009</issue><keywords/><dates><year>2010</year></dates><isbn>9783642181771</isbn><accession-num>21282924</accession-num><electronic-resource-num>10.1007/978-3-642-18178-8</electronic-resource-num><urls><pdf-urls><url>internal-pdf://5da1c89bcf0a69dfca7e7f8df70f4e8879a6.pdf</url></pdf-urls><web-urls><url>http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.157.7599&amp;amp;rep=rep1&amp;amp;type=pdf</url></web-urls></urls><abstract>Android is a modern and popular software platform for smartphones. Among its predominant features is an advanced security model which is based on application-oriented mandatory access control and sandboxing. This allows developers and users to restrict the execution of an application to the privileges it has (mandatorily) assigned at installation time. The exploitation of vulnerabilities in program code is hence believed to be confined within the privilege boundaries of an applications sandbox. However, in this paper we show that a privilege escalation attack is possible. We show that a genuine application exploited at runtime or a malicious application can escalate granted permissions. Our results immediately imply that Androids security model cannot deal with a transitive permission usage attack and Androids sandbox model fails as a last resort against malware and sophisticated runtime attacks.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Faruki, Parvez</author><author>Bharmal, Ammar</author><author>Laxmi, Vijay</author><author>Ganmoor, Vijay</author><author>Gaur, Manoj Singh</author><author>Conti, Mauro</author><author>Rajarajan, Muttukrishnan</author></authors></contributors><titles><title>Android security: A survey of issues, malware penetration, and defenses</title><secondary-title>IEEE Communications Surveys and Tutorials</secondary-title></titles><periodical><full-title>IEEE Communications Surveys and Tutorials</full-title></periodical><pages>998-1022</pages><volume>17</volume><issue>2</issue><keywords><keyword>Android Malware</keyword><keyword>Behavioral Analysis</keyword><keyword>Dynamic Analysis</keyword><keyword>Obfuscation</keyword><keyword>Static Analysis</keyword><keyword>Stealth Malwar</keyword></keywords><dates><year>2015</year></dates><isbn>1553-877X</isbn><electronic-resource-num>10.1109/COMST.2014.2386139</electronic-resource-num><urls><pdf-urls><url>internal-pdf://5e2fb38c7d2f4e4e714baa19bd7f73c4fb25.pdf</url></pdf-urls></urls><abstract>Smartphones have become pervasive due to the availability of office applications, Internet, games, vehicle guidance using location-based services apart from conventional services such as voice calls, SMSes, and multimedia services. Android devices have gained huge market share due to the open architecture of Android and the popularity of its application programming interface (APIs) in the developer community. Increased popularity of the Android devices and associated monetary benefits attracted the malware developers, resulting in big rise of the Android malware apps between 2010 and 2014. Academic researchers and commercial antimalware companies have realized that the conventional signature-based and static analysis methods are vulnerable. In particular, the prevalent stealth techniques, such as encryption, code transformation, and environment-aware approaches, are capable of generating variants of known malware. This has led to the use of behavior-, anomaly-, and dynamic-analysis-based methods. Since a single approach may be ineffective against the advanced techniques, multiple complementary approaches can be used in tandem for effective malware detection. The existing reviews extensively cover the smartphone OS security. However, we believe that the security of Android, with particular focus on malware growth, study of antianalysis techniques, and existing detection methodologies, needs an extensive coverage. In this survey, we discuss the Android security enforcement mechanisms, threats to the existing security enforcements and related issues, malware growth timeline between 2010 and 2014, and stealth techniques employed by the malware authors, in addition to the existing detection methods. This review gives an insight into the strengths and shortcomings of the known research methodologies and provides a platform, to the researchers and practitioners, toward proposing the next-generation Android security, analysis, and malware detection techniques.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Rasthofer, Siegfried</author><author>Arzt, Steven</author><author>Miltenberger, Marc</author><author>Bodden, Eric</author></authors></contributors><titles><title>Harvesting Runtime Values in Android Applications that feature Anti-Analysis Techniques</title><secondary-title>NDSS 2016 (23rd Network and Distributed System Security Symposium)</secondary-title></titles><periodical><full-title>NDSS 2016 (23rd Network and Distributed System Security Symposium)</full-title></periodical><pages>21-24</pages><issue>February</issue><keywords/><dates><year>2016</year></dates><isbn>189156241X</isbn><electronic-resource-num>10.14722/ndss.2016.23066</electronic-resource-num><urls><pdf-urls><url>internal-pdf://04f86b5302345d18b99801829efc98c90874.pdf</url></pdf-urls></urls><abstract>They wrote a tool that, given a specific point in code would: 1) compute a backward (thin) slice, 2) write the code in a new APK, 3) execute it, 4) log the values at the sink. Tricky points: 1) in their slice, they need to exclude emulator checks, otherwise their own modified APK would never return the real values. 2) to do 1), they need to have a list of methods that could be used for emualtor checks. 3) they have a list of &quot;environment checks&quot; that they want to include in the code. I think that what they do is to check whether a &quot;check&quot; would contriubute something value-wise. If yes, then they add it in the slice. (this makes sense, but in the paper they mention they need to a 'complete' list for emulator checks). If multiple values are possible, they write a slice that is &quot;parametric&quot; to some newly-injected boolean variables. At this point, they try all combinations. Other choices: they ignore values from GUI stuff, because they say that it's mostly useless/not used for malware. Open questions: how is it possible that with this targeted approach, harvester only reaches 83% of the calls? Does this mean that they generate the slice and even their tool cannot reach the interesting callsite?</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Spreitzenbarth, Michael</author><author>Freiling, Felix C.</author><author>Echtler, Florian</author><author>Schreck, Thomas</author><author>Hoffmann, Johannes</author></authors></contributors><titles><title>Mobile-sandbox: Having a Deeper Look into Android Applications</title><secondary-title>Proceedings of the 28th Annual ACM Symposium on Applied Computing</secondary-title></titles><periodical><full-title>Proceedings of the 28th Annual ACM Symposium on Applied Computing</full-title></periodical><pages>1808-1815</pages><keywords><keyword>Android</keyword><keyword>Application analysis</keyword><keyword>Malware</keyword><keyword>application analysis</keyword><keyword>malware</keyword></keywords><dates><year>2013</year></dates><isbn>978-1-4503-1656-9</isbn><electronic-resource-num>10.1145/2480362.2480701</electronic-resource-num><urls><pdf-urls><url>internal-pdf://0791d27ee5cc569f0b593e91f2f011ba5679.pdf</url></pdf-urls><web-urls><url>http://doi.acm.org/10.1145/2480362.2480701</url></web-urls></urls><abstract>Smartphones in general and Android in particular are in- creasingly shifting into the focus of cybercriminals. For un- derstanding the threat to security and privacy it is important for security researchers to analyze malicious software writ- ten for these systems. The exploding number of Android malware calls for automation in the analysis. In this paper, we present Mobile-Sandbox, a system designed to automati- cally analyze Android applications in two novel ways: (1) it combines static and dynamic analysis, i.e., results of static analysis are used to guide dynamic analysis and extend cov- erage of executed code, and (2) it uses specific techniques to log calls to native (i.e., “non-Java”) APIs. We evaluated the system on more than 36,000 applications from Asian third- party mobile markets and found that 24% of all applications actually use native calls in their code.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Mariconti, Enrico</author><author>Onwuzurike, Lucky</author><author>Andriotis, Panagiotis</author><author>De Cristofaro, Emiliano</author><author>Ross, Gordon</author><author>Stringhini, Gianluca</author></authors></contributors><titles><title>MaMaDroid: Detecting Android Malware by Building Markov Chains of Behavioral Models</title><secondary-title>Ndss '17</secondary-title></titles><periodical><full-title>Ndss '17</full-title></periodical><keywords/><dates><year>2016</year></dates><isbn>1891562460</isbn><electronic-resource-num>10.14722/ndss.2017.23353</electronic-resource-num><urls><pdf-urls><url>internal-pdf://1612.04433.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1612.04433</url></web-urls></urls><abstract>The rise in popularity of the Android platform has resulted in an explosion of malware threats targeting it. As both Android malware and the operating system itself constantly evolve, it is very challenging to design robust malware mitigation techniques that can operate for long periods of time without the need for modifications or costly re-training. In this paper, we present MaMaDroid, an Android malware detection system that relies on app behavior. MaMaDroid builds a behavioral model, in the form of a Markov chain, from the sequence of abstracted API calls performed by an app, and uses it to extract features and perform classification. By abstracting calls to their packages or families, MaMaDroid maintains resilience to API changes and keeps the feature set size manageable. We evaluate its accuracy on a dataset of 8.5K benign and 35.5K malicious apps collected over a period of six years, showing that it not only effectively detects malware (with up to 99% F-measure), but also that the model built by the system keeps its detection capabilities for long periods of time (on average, 86% and 75% F-measure, respectively, one and two years after training). Finally, we compare against DroidAPIMiner, a state-of-the-art system that relies on the frequency of API calls performed by apps, showing that MaMaDroid significantly outperforms it.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Backes, Michael</author><author>Bugiel, Sven</author><author>Gerling, Sebastian</author><author>Styp-rekowsky, Philipp Von</author></authors></contributors><titles><title>Android Security Framework : Extensible Multi-Layered Access Control on Android</title><secondary-title>Computer Security Applications Conference</secondary-title></titles><periodical><full-title>Computer Security Applications Conference</full-title></periodical><pages>46-55</pages><keywords/><dates><year>2014</year></dates><isbn>1450330053</isbn><electronic-resource-num>http://dx.doi.org/10.1145/2664243.2664265</electronic-resource-num><urls><pdf-urls><url>internal-pdf://069343aebb2692fb05e9a982b5e226e4958c.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2664265%5Cnhttps://trust.cispa.saarland/~bugiel/publications/pdfs/bugiel14-acsac1.pdf</url></web-urls></urls><abstract>We introduce the Android Security Framework (ASF), a generic, extensible security framework for Android that enables the development and integration of a wide spectrum of security models in form of code-based security modules. The design of ASF reflects lessons learned from the literature on established security frameworks (such as Linux Security Modules or the BSD MAC Framework) and intertwines them with the particular requirements and challenges from the design of Android's software stack. ASF provides a novel security API that supports authors of Android security extensions in developing their modules. This overcomes the current unsatisfactory situation to provide security solutions as separate patches to the Android software stack or to embed them into Android's mainline codebase. This system security extensibility is of particular benefit for enterprise or government solutions that require deployment of advanced security models, not supported by vanilla Android. We present a prototypical implementation of ASF and demonstrate its effectiveness and efficiency by modularizing different security models from related work, such as dynamic permissions, inlined reference monitoring, and type enforcement.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Burguera, Iker</author><author>Zurutuza, Urko</author><author>Nadjm-Tehrani, Simin</author></authors></contributors><titles><title>Crowdroid: Behavior-Based Malware Detection System for Android</title><secondary-title>Proceedings of the 1st ACM workshop on Security and privacy in smartphones and mobile devices - SPSM '11</secondary-title></titles><periodical><full-title>Proceedings of the 1st ACM workshop on Security and privacy in smartphones and mobile devices - SPSM '11</full-title></periodical><pages>15</pages><keywords><keyword>anomaly detection</keyword><keyword>crowdsourcing</keyword><keyword>data</keyword><keyword>dynamic analysis</keyword><keyword>intrusion detection</keyword><keyword>malware detection</keyword><keyword>smartphone security</keyword></keywords><dates><year>2011</year></dates><isbn>9781450310000</isbn><electronic-resource-num>10.1145/2046614.2046619</electronic-resource-num><urls><pdf-urls><url>internal-pdf://490b39aad66424e7ce315d11f866057ef2c1.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2046619%5Cnhttp://dl.acm.org/citation.cfm?doid=2046614.2046619</url></web-urls></urls><abstract>The sharp increase in the number of smartphones on the market, with the Android platform posed to becoming a market leader makes the need for malware analysis on this platform an urgent issue. In this paper we capitalize on earlier approaches for dynamic analysis of application behavior as a means for detecting malware in the Android platform. The detector is embedded in a overall framework for collection of traces from an unlimited number of real users based on crowdsourcing. Our framework has been demonstrated by analyzing the data collected in the central server using two types of data sets: those from artificial malware created for test purposes, and those from real malware found in the wild. The method is shown to be an effective means of isolating the malware and alerting the users of a downloaded malware. This shows the potential for avoiding the spreading of a detected malware to a larger community.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Almgren, Magnus</author><author>Gulisano, Vincenzo</author><author>Maggi, Federico</author></authors></contributors><titles><title>Detection of intrusions and malware, and vulnerability assessment: 12th International conference, DIMVA 2015 Milan, Italy, july 9???10, 2015 proceedings</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>282-303</pages><volume>9148</volume><keywords/><dates><year>2015</year></dates><isbn>9783319205496</isbn><electronic-resource-num>10.1007/978-3-319-20550-2</electronic-resource-num><urls><pdf-urls><url>internal-pdf://54358bb8a5732a7a1819a08f2b6b9eb3616e.pdf</url></pdf-urls></urls><abstract>This book constitutes the refereed proceedings of the 12th International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment, DIMVA 2015, held in Milan, Italy, in July 2015. The 17 revised full papers presented were carefully reviewed and selected from 75 submissions. The papers are organized in topical sections on attacks, attack detection, binary analysis and mobile malware protection, social networks and large-scale attacks, Web and mobile security, and provenance and data sharing.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Crussell, Jonathan</author><author>Gibler, Clint</author><author>Chen, Hao</author></authors></contributors><titles><title>Attack of the clones: Detecting cloned applications on Android markets</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>37-54</pages><volume>7459 LNCS</volume><keywords/><dates><year>2012</year></dates><isbn>9783642331664</isbn><electronic-resource-num>10.1007/978-3-642-33167-1_3</electronic-resource-num><urls><pdf-urls><url>internal-pdf://746d108e983626c3405ad1775bbcc3933c6d.pdf</url></pdf-urls></urls><abstract>We present DNADroid, a tool that detects Android application copying, or “cloning”, by robustly computing the similarity between two applications. DNADroid achieves this by comparing program dependency graphs between methods in candidate applications. Using DNADroid, we found at least 141 applications that have been the victims of cloning, some as many as seven times. DNADroid has a very low false positive rate — we manually confirmed that all the applications detected are indeed clones by either visual or behavioral similarity. We present several case studies that give insight into why applications are cloned, including localization and redirecting ad revenue. We describe a case of malware being added to an application and show how DNADroid was able to detect two variants of the same malware. Lastly, we offer examples of an open source cracking tool being used in the wild.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Andriatsimandefitra, Radoniaina</author><author>Saliou, Thomas</author><author>Tong, Valerie Viet Triem</author></authors></contributors><titles><title>Information Flow Policies vs Malware</title><secondary-title>2013 9Th International Conference on Information Assurance and Security (Ias)</secondary-title></titles><periodical><full-title>2013 9Th International Conference on Information Assurance and Security (Ias)</full-title></periodical><pages>19-24</pages><keywords/><dates><year>2013</year></dates><isbn>978-1-4799-2990-0</isbn><urls><pdf-urls><url>internal-pdf://048774f3e6caa5637d460529b778dc5d1663.pdf</url></pdf-urls></urls><abstract>Application markets offer more than 700'000 applications: music, movies,
games or small tools. It appears more and more difficult to propose an
automatic and systematic method to analyse all of these applications.
Google Bouncer {[}1] tries to keep malicious applications out of Google
Play by analysing uploaded applications to find known mal ware and
malicious behaviours. However, Google Bouncer suffers from the same
drawbacks of usual scan methods: it is inefficient to detect unknown
malicious behaviour and it may be costly. In this paper we propose
another method to efficiently detect malicious actions of applications.
Our proposal consists in a new scheme of submitting applications to
market place and installing applications on the device. More precisely,
applications are uploaded with a companion information flow policy. A
companion policy exactly describes where data used by the application
can flow. The policies are studied for acceptance by reviewers. Accepted
policies are certified by the market and are made publicly available.
When a user acquires an application, he has to retrieve the certified
version of its companion flow policy. The companion policy of the
application is composed with the current flow policy enforced in the
system. The application is then monitored and each time the monitor
detects an information flow not allowed in the composed flow policy it
raises an alert or blocks the information flow. This way, only
applications respecting an official policy accepted by the market can
efficiently run.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Aafer, Yousra</author><author>Du, Wenliang</author><author>Yin, Heng</author></authors></contributors><titles><title>DroidAPIMiner: Mining API-Level Features for Robust Malware Detection in Android</title><secondary-title>Security and Privacy in Communication Networks</secondary-title></titles><periodical><full-title>Security and Privacy in Communication Networks</full-title></periodical><pages>86-103</pages><volume>127</volume><keywords><keyword>Android</keyword><keyword>classification</keyword><keyword>malware</keyword><keyword>static detection</keyword></keywords><dates><year>2013</year></dates><isbn>978-3-319-04282-4</isbn><electronic-resource-num>10.1007/978-3-319-04283-1_6</electronic-resource-num><urls><pdf-urls><url>internal-pdf://324c99e97c511477637f3cfe16c7f06ce382.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1007/978-3-319-04283-1_6</url></web-urls></urls><abstract>#DroidAPIMiner. They do machine learning (SVM, KNN, etc) to do malware classification based on the permissions and API that are called (they take the top N permissions and APIs that are used only in the malicious apps). It seems to work well.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Narayan, Akshay</author><author>Saxena, P</author></authors></contributors><titles><title>The Curse of 140 Characters: Evaluating the Efficacy of SMS Spam Detection on Android</title><secondary-title>ACM workshop on Security and privacy in smartphones and mobile devices</secondary-title></titles><periodical><full-title>ACM workshop on Security and privacy in smartphones and mobile devices</full-title></periodical><pages>33-42</pages><keywords><keyword>an-</keyword><keyword>message tagging</keyword><keyword>naive bayes</keyword><keyword>spam filtering</keyword><keyword>svm</keyword></keywords><dates><year>2013</year></dates><isbn>9781450324915</isbn><electronic-resource-num>10.1145/2516760.2516772</electronic-resource-num><urls><pdf-urls><url>internal-pdf://5930094d0c6504fc839c9b34279249a931f7.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2516772</url></web-urls></urls><abstract>Many applications are available on Android market place for SMS spam filtering. In this paper, we conduct a detailed study of the methods used in spam filtering in these applications by reverse engineering them. Our study has three parts. First, we perform empirical tests to valuate accuracy and precision of these apps. Second, we test if we can use email spam classifiers on short text messages effectively. Empirical test results show that these email spam classifiers do not yield optimal accuracy (like they do on emails) when used with SMS data. Finally, in this work we develop a two-level stacked classifier for short text messages and demonstrate the improvement in accuracy over traditional Bayesian email spam filters. Our experimental results show that spam filtering precision and accuracy of nearly 98% (which is comparable with those of email classifiers) can be obtained using the stacked classifier we develop.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Allix, Kevin</author><author>Jerome, Quentin</author><author>Bissyande, Tegawende F.</author><author>Klein, Jacques</author><author>State, Radu</author><author>Traon, Yves Le</author></authors></contributors><titles><title>A forensic analysis of android malware - How is malware written and how it could be detected?</title><secondary-title>Proceedings - International Computer Software and Applications Conference</secondary-title></titles><periodical><full-title>Proceedings - International Computer Software and Applications Conference</full-title></periodical><pages>384-393</pages><keywords><keyword>Android Security</keyword><keyword>Digital Forensics</keyword><keyword>Malware Analysis</keyword><keyword>Malware development</keyword></keywords><dates><year>2014</year></dates><isbn>978-1-4799-3575-8</isbn><electronic-resource-num>10.1109/COMPSAC.2014.61</electronic-resource-num><urls><pdf-urls><url>internal-pdf://30518d7a778f13b18bf1c65f993a7490b9b2.pdf</url></pdf-urls></urls><abstract>We consider in this paper the analysis of a large set of malware and benign applications from the Android ecosystem. Although a large body of research work has dealt with Android malware over the last years, none has addressed it from a forensic point of view. After collecting over 500,000 applications from user markets and research repositories, we perform an analysis that yields precious insights on the writing process of Android malware. This study also explores some strange artifacts in the datasets, and the divergent capabilities of state-of-the-art antivirus to recognize/define malware. We further highlight some major weak usage and misunderstanding of Android security by the criminal community and show some patterns in their operational flow. Finally, using insights from this analysis, we build a naive malware detection scheme that could complement existing anti virus software.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Feng, Yu</author><author>Anand, Saswat</author><author>Dillig, Isil</author><author>Aiken, Alex</author></authors></contributors><titles><title>Apposcopy : Semantics-Based Detection of Android Malware Through Static Analysis</title><secondary-title>Fse</secondary-title></titles><periodical><full-title>Fse</full-title></periodical><pages>16-22</pages><keywords><keyword>android</keyword><keyword>inter-component call graph</keyword><keyword>taint analysis</keyword></keywords><dates><year>2014</year></dates><isbn>9781450330565</isbn><electronic-resource-num>10.1145/2635868.2635869</electronic-resource-num><urls><pdf-urls><url>internal-pdf://305a0d2773d1132d9539e42d1f1337f1600a.pdf</url></pdf-urls></urls><abstract>We present Apposcopy, a new semantics-based approach for identifying a prevalent class of Android malware that steals private user information. Apposcopy incorporates (i) a high- level language for specifying signatures that describe seman- tic characteristics of malware families and (ii) a static anal- ysis for deciding if a given application matches a malware signature. The signature matching algorithm of Apposcopy uses a combination of static taint analysis and a new form of program representation called Inter-Component Call Graph to efficiently detect Android applications that have certain control- and data-flow properties. We have evaluated Ap- poscopy on a corpus of real-world Android applications and show that it can effectively and reliably pinpoint malicious applications that belong to certain malware families.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Rastogi, V</author><author>Chen, Y</author><author>Jiang, X</author></authors></contributors><titles><title>DroidChameleon: Evaluating Android Anti-malware against Transformation Attacks</title><secondary-title>NORTHWESTERN University</secondary-title></titles><periodical><full-title>NORTHWESTERN University</full-title></periodical><pages>329-334</pages><issue>March</issue><keywords><keyword>android</keyword><keyword>anti-malware</keyword><keyword>malware</keyword><keyword>mobile</keyword></keywords><dates><year>2013</year></dates><isbn>9781450317672</isbn><electronic-resource-num>10.1145/2484313.2484355</electronic-resource-num><urls><pdf-urls><url>internal-pdf://55bce9af88ee1ed0d96921cada2d549aa195.pdf</url></pdf-urls><web-urls><url>https://www.eecs.northwestern.edu/docs/techreports/2013_TR/NU-EECS-13-01.pdf</url></web-urls></urls><abstract>Mobile malware threats (e.g., on Android) have recently become a real concern. In this paper, we evaluate the state-of-the-art com-mercial mobile anti-malware products for Android and test how resistant they are against various common obfuscation techniques (even with known malware). Such an evaluation is important for not only measuring the available defense against mobile malware threats but also proposing effective, next-generation solutions. We developed DroidChameleon, a systematic framework with various transformation techniques, and used it for our study. Our results on ten popular commercial anti-malware applications for Android are worrisome: none of these tools is resistant against common mal-ware transformation techniques. Moreover, the transformations are simple in most cases and anti-malware tools make little effort to provide transformation-resilient detection. Finally, in the light of our results, we propose possible remedies for improving the cur-rent state of malware detection on mobile devices.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Eze, Chika</author><author>Nurse, Jason R C</author><author>Happa, Jassim</author></authors></contributors><titles><title>Using Visualizations to Enhance Users ’ Understanding of App Activities on Android Devices</title></titles><periodical/><pages>39-57</pages><volume>1</volume><issue>0</issue><keywords><keyword>android</keyword><keyword>app per-</keyword><keyword>data visualization</keyword><keyword>decision-making</keyword><keyword>human aspects</keyword><keyword>information leakage</keyword><keyword>missions</keyword><keyword>privacy</keyword><keyword>resources</keyword><keyword>smartphone security</keyword><keyword>visual analytics</keyword></keywords><dates><year>2016</year></dates><urls><pdf-urls><url>internal-pdf://32143cff4798af55be8ccefd2fb5a4304440.pdf</url></pdf-urls></urls><abstract>© 2016, Innovative Information Science and Technology Research Group. All rights reserved.The ever-increasing number of third-party applications developed for Android devices has resulted in a growing interest in the secondary activities that these applications perform and how they affect a user’s privacy. Unfortunately, users continue to install these applications without any concrete knowledge of the breadth of these activities; hence, they have little insight into the sensitive information and resources accessed by these applications. In this paper, we explore users’ perception and reaction when presented with a visual analysis of Android applications activities and their security implications. This study uses interactive visual schemas to communicate the effect of applications activities in order to support users with more understandable information about the risks they face from such applications. Through findings from a user-based experiment, we demonstrate that when visuals diagrams about application activities are presented to users, they became more aware and sensitive to the privacy-intrusiveness of certain applications. This awareness and sensitivity stems from the fact that some of these applications were accessing a significant number of resources and sensitive information, and transferring data out of the devices, even when they arguably had little reason to do so.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zheng, Min</author><author>Sun, Mingshen</author><author>Lui, John C.S.</author></authors></contributors><titles><title>DroidTrace: A ptrace based Android dynamic analysis system with forward execution capability</title><secondary-title>IWCMC 2014 - 10th International Wireless Communications and Mobile Computing Conference</secondary-title></titles><periodical><full-title>IWCMC 2014 - 10th International Wireless Communications and Mobile Computing Conference</full-title></periodical><pages>128-133</pages><keywords/><dates><year>2014</year></dates><isbn>9781479909599</isbn><electronic-resource-num>10.1109/IWCMC.2014.6906344</electronic-resource-num><urls><pdf-urls><url>internal-pdf://18498b42e464b81e3d81b8d32237aea4a234.pdf</url></pdf-urls></urls><abstract>Dynamic analysis using ptrace. They focus on getting dyamically loaded code. To trigger it, they rebuild the apk to add code that trigger UI event (e.g., after a clicklistener they add a call to click()), also for condition guarding dynamic code loading sites, they do multipath exploration. They analyze 50k benign and 294 malware samples. 16K have dynamic code loading. In some cases they need manual handling (e.g. loging screen) to trigger the loading behaviors. They measure and dive syscalls in 4 categories: file, network, IPC, root exploits.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Suarez-tangil, Guillermo</author><author>Tapiador, Juan E</author><author>Peris-lopez, Pedro</author></authors></contributors><titles><title>Dendroid : A Text Mining Approach to Analyzing and Classifying Code Structures in Android Malware Families</title></titles><periodical/><keywords><keyword>android os</keyword><keyword>information retrieval</keyword><keyword>malware analysis</keyword><keyword>mining</keyword><keyword>smartphones</keyword><keyword>software similarity and classification</keyword><keyword>text</keyword></keywords><dates><year>2013</year></dates><urls><pdf-urls><url>internal-pdf://59ed8c33f11542501d2ff4928c9c7aa76f5f.pdf</url></pdf-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Lin, Ying Dar</author><author>Lai, Yuan Cheng</author><author>Chen, Chien Hung</author><author>Tsai, Hao Chuan</author></authors></contributors><titles><title>Identifying android malicious repackaged applications by thread-grained system call sequences</title><secondary-title>Computers and Security</secondary-title></titles><periodical><full-title>Computers and Security</full-title></periodical><pages>340-350</pages><volume>39</volume><issue>PART B</issue><keywords><keyword>Android</keyword><keyword>Dynamic analysis</keyword><keyword>Longest common substring</keyword><keyword>Malicious repackaged applications</keyword><keyword>System call</keyword></keywords><dates><year>2013</year></dates><publisher>Elsevier Ltd</publisher><isbn>0167-4048</isbn><accession-num>329007400017</accession-num><electronic-resource-num>10.1016/j.cose.2013.08.010</electronic-resource-num><urls><pdf-urls><url>internal-pdf://5864585b1d996cc0605a879465eb71b0c794.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.cose.2013.08.010</url></web-urls></urls><abstract>Android security has become highly desirable since adversaries can easily repackage malicious codes into various benign applications and spread these malicious repackaged applications (MRAs). Most MRA detection mechanisms on Android focus on detecting a specific family of MRAs or requiring the original benign application to compare with the malicious ones. This work proposes a new mechanism, SCSdroid (System Call Sequence Droid), which adopts the thread-grained system call sequences activated by applications. The concept is that even if MRAs can be camouflaged as benign applications, their malicious behavior would still appear in the system call sequences. SCSdroid extracts the truly malicious common subsequences from the system call sequences of MRAs belonging to the same family. Therefore, these extracted common subsequences can be used to identify any evaluated application without requiring the original benign application. Experimental results show that SCSdroid falsely detected only two applications among 100 evaluated benign applications, and falsely detected only one application among 49 evaluated malicious applications. As a result, SCSdroid achieved up to 95.97% detection accuracy, i.e., 143 correct detections among 149 applications. ?? 2012 Elsevier B.V. All rights reserved.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Nazar, Assem</author><author>Seeger, Mark M.</author><author>Baier, Harald</author></authors></contributors><titles><title>Rooting android - Extending the ADB by an auto-connecting WiFi-accessible service</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>189-204</pages><volume>7161 LNCS</volume><keywords><keyword>ADB</keyword><keyword>Android</keyword><keyword>Bottom-Up</keyword><keyword>Mobile Operating System</keyword><keyword>Rooting</keyword></keywords><dates><year>2012</year></dates><isbn>9783642296147</isbn><electronic-resource-num>10.1007/978-3-642-29615-4_14</electronic-resource-num><urls><pdf-urls><url>internal-pdf://852713fe5fc0a68e3d54c62a5138eeb3f56e.pdf</url></pdf-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Pan, Xiaorui</author><author>Wang, Xueqiang</author><author>Duan, Yue</author><author>Wang, Xiaofeng</author><author>Yin, Heng</author></authors></contributors><titles><title>Dark Hazard : Learning-based , Large-scale Discovery of Hidden Sensitive Operations in Android Apps</title><secondary-title>Proceedings of Network and Distributed System Security Symposium (NDSS)</secondary-title></titles><periodical><full-title>Proceedings of Network and Distributed System Security Symposium (NDSS)</full-title></periodical><issue>March</issue><keywords/><dates><year>2017</year></dates><isbn>1891562460</isbn><electronic-resource-num>10.14722/ndss.2017.23265</electronic-resource-num><urls><pdf-urls><url>internal-pdf://18703bb7edc1584a3560556e1357c7d2968c.pdf</url></pdf-urls></urls><abstract>Hidden sensitive operations (HSO) such as stealing privacy user data upon receiving an SMS message are increasingly utilized by mobile malware and other potentially-harmful apps (PHAs) to evade detection. Identification of such behaviors is hard, due to the challenge in triggering them during an app’s runtime. Current static approaches rely on the trigger conditions or hidden behaviors known beforehand and therefore cannot capture previously unknown HSO activities. Also these techniques tend to be computationally intensive and therefore less suitable for analyzing a large number of apps. As a result, our understanding of real-world HSO today is still limited, not to mention effective means to mitigate this threat. In this paper, we present HSOMINER, an innovative machine- learning based program analysis technique that enables a large- scale discovery of unknown HSO activities. Our approach lever- ages a set of program features that characterize an HSO branch1 and can be relatively easy to extract from an app. These features summarize a set of unique observations about an HSO condition, its paths and the relations between them, and are designed to be general for finding hidden suspicious behaviors. Particularly, we found that a trigger condition is less likely to relate to the path of its branch through data flows or shared resources, compared with a legitimate branch. Also, the behaviors exhibited by the two paths of an HSO branch tend to be conspicuously different (innocent on one side and sinister on the other). Most importantly, even though these individual features are not sufficiently accurate for capturing HSO on their own, collectively they are shown to be highly effective in identifying such behaviors. This differentiating power is harnessed by HSOMINER to classify Android apps, which achieves a high precision (&gt;98%) and coverage (&gt;94%), and is also efficient as discovered in our experiments. The new tool was further used in a measurement study involving 338,354 real- world apps, the largest one ever conducted on suspicious hidden operations. Our research brought to light the pervasiveness of HSO activities, which are present in 18.7% of the apps we analyzed, surprising trigger conditions (e.g., click on a certain region of a view) and behaviors (e.g., hiding operations in a dynamically generated receiver), which help better understand the problem and contribute to more effective defense against this new threat to the mobile platform.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Arzt, Steven</author><author>Falzon, Kevin</author><author>Follner, Andreas</author><author>Rasthofer, Siegfried</author></authors></contributors><titles><title>How useful are existing monitoring languages for securing Android apps ?</title><secondary-title>Software Engineering (Workshops)</secondary-title></titles><periodical><full-title>Software Engineering (Workshops)</full-title></periodical><pages>107-122</pages><keywords/><dates><year>2013</year></dates><isbn>9783885796091</isbn><urls><pdf-urls><url>internal-pdf://187954d4069fb10b1adcc46c7879abfb6630 (1).pdf</url></pdf-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhang, Zhongwen</author><author>Liu, Peng</author><author>Xiang, Ji</author><author>Jing, Jiwu</author><author>Lei, Lingguang</author></authors></contributors><titles><title>How Your Phone Camera Can Be Used to Stealthily Spy on You : Transplantation Attacks against Android Camera Service</title><secondary-title>Codaspy `15</secondary-title></titles><periodical><full-title>Codaspy `15</full-title></periodical><pages>99-110</pages><keywords><keyword>android</keyword><keyword>android cam-</keyword><keyword>spy on users</keyword><keyword>transportation attack</keyword></keywords><dates><year>2015</year></dates><isbn>9781450331913</isbn><electronic-resource-num>10.1145/2699026.2699103</electronic-resource-num><urls><pdf-urls><url>internal-pdf://952016b50cb79657e78b9daa5817fcb01ba8 (1).pdf</url></pdf-urls></urls><abstract>Based on the observations that spy-on-user attacks by call- ing Android APIs will be detected out by Android API auditing, we studied the possibility of a “transplantation attack”, through which a malicious app can take privacy- harming pictures to spy on users without the Android API auditing being aware of it. Usually, to take a picture, apps need to call APIs of Android Camera Service which runs in mediaserver process. Transplantation attack is to transplant the picture taking code from mediaserver process to a mali- cious app process, and the malicious app can call this code to take a picture in its own address space without any IPC. As a result, the API auditing can be evaded. Our experiments confirm that transplantation attack indeed exists. Also, the transplantation attack makes the spy-on-user attack much more stealthy. The evaluation result shows that nearly a half of 69 smartphones (manufactured by 8 vendors) test- ed let the transplantation attack discovered by us succeed. Moreover, the attack can evade 7 Antivirus detectors, and Android Device Administration which is a set of APIs that can be used to carry out mobile device management in en- terprise environments. The transplantation attack inspires us to uncover a subtle design/implementation deficiency of the Android security.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Fernandes, Earlence</author><author>Crispo, Bruno</author><author>Conti, Mauro</author></authors></contributors><titles><title>FM 99.9, radio virus: Exploiting FM radio broadcasts for malware deployment</title><secondary-title>IEEE Transactions on Information Forensics and Security</secondary-title></titles><periodical><full-title>IEEE Transactions on Information Forensics and Security</full-title></periodical><pages>1027-1037</pages><volume>8</volume><issue>6</issue><keywords><keyword>Android security</keyword><keyword>FM radio</keyword><keyword>novel attack vectors</keyword><keyword>smartphone security</keyword></keywords><dates><year>2013</year></dates><isbn>1556-6013</isbn><electronic-resource-num>10.1109/TIFS.2013.2259818</electronic-resource-num><urls><pdf-urls><url>internal-pdf://97178eec7d85f048ee201981164bcfc6c624.pdf</url></pdf-urls></urls><abstract>Many modern smartphones and car radios are shipped with embedded FM radio receiver chips. The number of devices with similar chips could grow very significantly if the U.S. Congress decides to make their inclusion mandatory in any portable device as suggested by organizations such as the RIAA. While the main goal of embedding these chips is to provide access to traditional FM radio stations, a side effect is the availability of a data channel, the FM Radio Data System (RDS), which connects all these devices. Different from other existing IP-based data channels among portable devices, this new one is open, broadcast in nature, and so far completely ignored by security providers. This paper illustrates for the first time how to exploit the FM RDS protocol as an attack vector to deploy malware that, when executed, gains full control of the victim's device. We show how this attack vector allows the adversary to deploy malware on different platforms. Furthermore, we have shown the infection is undetected on devices running the Android OS, since malware detection solutions are limited in their ability due to some features of the Android security model. We support our claims by implementing an attack using RDS on different devices available on the market (smartphones, car radios, and tablets) running three different versions of Android OS. We also provide suggestions on how to limit the threat posed by this new attack vector and explain what are the design choices that make Android vulnerable. However, there are no straightforward solutions. Therefore, we also wish to draw the attention of the security community towards these attacks and initiate more research into countermeasures.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Li, Haoyu</author><author>Ma, Di</author><author>Saxena, Nitesh</author><author>Shrestha, Babins</author><author>Zhu, Yan</author></authors></contributors><titles><title>Tap-Wave-Rub: Lightweight Malware Prevention for Smartphones Using Intuitive Human Gestures</title><secondary-title>ACM Conference on Security and Privacy in Wireless and Mobile Networks WISEC'13</secondary-title></titles><periodical><full-title>ACM Conference on Security and Privacy in Wireless and Mobile Networks WISEC'13</full-title></periodical><pages>25-30</pages><keywords><keyword>context recognition</keyword><keyword>malware</keyword><keyword>mobile devices</keyword><keyword>nfc</keyword><keyword>sensors</keyword></keywords><dates><year>2013</year></dates><isbn>978-1-4503-1998-0</isbn><electronic-resource-num>10.1145/2462096.2462101</electronic-resource-num><urls><pdf-urls><url>internal-pdf://504438dc0a779cfe7ef4ee63c995a4d454dc.pdf</url></pdf-urls><web-urls><url>http://doi.acm.org/10.1145/2462096.2462101%5Cnhttp://dl.acm.org/ft_gateway.cfm?id=2462101&amp;type=pdf</url></web-urls></urls><abstract>We introduce a lightweight permission enforcement approach - Tap-Wave-Rub (TWR) - for smartphone malware prevention. TWR is based on simple human gestures (implicit or explicit) that are very quick and intuitive but less likely to be exhibited in users' daily activities. Presence or absence of such gestures, prior to accessing an application, can effectively inform the OS whether the access request is benign or malicious. In this paper, we focus on the design of an accelerometer-based phone tapping detection mechanism. This implicit tapping detection mechanism is geared to prevent malicious access to NFC services, where a user is usually required to tap her phone with another device. We present a variety of novel experiments to evaluate the proposed mechanism. Our results suggest that our approach could be very effective for malware prevention, with quite low false positives and false negatives, while imposing no additional burden on the users. As part of the TWR framework, we also briefly explore explicit gestures (finger tapping, rubbing or hand waving based on proximity sensor), which could be used to protect services which do not have a unique implicit gesture associated with them.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Lin, Ying Dar</author><author>Lai, Yuan Cheng</author><author>Chen, Chien Hung</author><author>Tsai, Hao Chuan</author></authors></contributors><titles><title>Identifying android malicious repackaged applications by thread-grained system call sequences</title><secondary-title>Computers and Security</secondary-title></titles><periodical><full-title>Computers and Security</full-title></periodical><pages>340-350</pages><volume>39</volume><issue>PART B</issue><keywords><keyword>Android</keyword><keyword>Dynamic analysis</keyword><keyword>Longest common substring</keyword><keyword>Malicious repackaged applications</keyword><keyword>System call</keyword></keywords><dates><year>2013</year></dates><publisher>Elsevier Ltd</publisher><isbn>0167-4048</isbn><accession-num>329007400017</accession-num><electronic-resource-num>10.1016/j.cose.2013.08.010</electronic-resource-num><urls><pdf-urls><url>internal-pdf://5864585b1d996cc0605a879465eb71b0c794.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.cose.2013.08.010</url></web-urls></urls><abstract>Android security has become highly desirable since adversaries can easily repackage malicious codes into various benign applications and spread these malicious repackaged applications (MRAs). Most MRA detection mechanisms on Android focus on detecting a specific family of MRAs or requiring the original benign application to compare with the malicious ones. This work proposes a new mechanism, SCSdroid (System Call Sequence Droid), which adopts the thread-grained system call sequences activated by applications. The concept is that even if MRAs can be camouflaged as benign applications, their malicious behavior would still appear in the system call sequences. SCSdroid extracts the truly malicious common subsequences from the system call sequences of MRAs belonging to the same family. Therefore, these extracted common subsequences can be used to identify any evaluated application without requiring the original benign application. Experimental results show that SCSdroid falsely detected only two applications among 100 evaluated benign applications, and falsely detected only one application among 49 evaluated malicious applications. As a result, SCSdroid achieved up to 95.97% detection accuracy, i.e., 143 correct detections among 149 applications. ?? 2012 Elsevier B.V. All rights reserved.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Srinivasan, Avinash</author><author>Wu, Jie</author><author>Shi, Justin</author></authors></contributors><titles><title>Android-Stego : A Novel Service Provider Imperceptible MMS Steganography Technique Robust to Message Loss Categories and Subject Descriptors</title></titles><periodical/><keywords><keyword>android</keyword><keyword>information hiding</keyword><keyword>mms</keyword><keyword>multimedia messaging service</keyword><keyword>security</keyword><keyword>steganography</keyword></keywords><urls><pdf-urls><url>internal-pdf://82695d0cb9bdf270c43d645964545cc20e35.pdf</url></pdf-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Seo, Seung Hyun</author><author>Yim, Kangbin</author><author>You, Ilsun</author></authors></contributors><titles><title>Mobile malware threats and defenses for homeland security</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>516-524</pages><volume>7465 LNCS</volume><keywords/><dates><year>2012</year></dates><isbn>9783642324970</isbn><electronic-resource-num>10.1007/978-3-642-32498-7_39</electronic-resource-num><urls><pdf-urls><url>internal-pdf://167966c1c5f0c81917750af053482ddfdca8.pdf</url></pdf-urls></urls><abstract>As the population of mobile users grows rapidly, mobile malware targeting smartphones are becoming a new threat to homeland security. So far, many kinds of malicious malwares including monetizing, stealing credentials or rooting have emerged. The latest mobile malwares are especially posing a serious threat to homeland security, because they can zombify phones to be controlled by their command and conquer servers. In this paper, we survey the threats and malicious behaviors of current mobile malwares. Then, we study the defense mechanisms of mobile malware and introduce a cooperative system for mobile security in South Korea. We also discuss the possible future of mobile malware and attack techniques.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Delosières, Laurent</author><author>García, David</author></authors></contributors><titles><title>Infrastructure for detecting Android malware</title><secondary-title>Lecture Notes in Electrical Engineering</secondary-title></titles><periodical><full-title>Lecture Notes in Electrical Engineering</full-title></periodical><pages>389-398</pages><volume>264 LNEE</volume><keywords><keyword>android</keyword><keyword>detection</keyword><keyword>infrastructure</keyword><keyword>malware</keyword></keywords><dates><year>2014</year></dates><isbn>9783319016030</isbn><electronic-resource-num>10.1007/978-3-319-01604-7_38</electronic-resource-num><urls><pdf-urls><url>internal-pdf://84977f009f316a46e4621df2a8184b188c3c.pdf</url></pdf-urls></urls><abstract>Data imbalance is known to significantly hinder the generalization performance of supervised learning algorithms. A common strategy to overcome this challenge is synthetic oversampling, where synthetic minority class examples are generated to balance the distribution between the examples of the majority and minority classes. We present a novel adaptive oversampling algorithm, Virtual, that combines the benefits of oversampling and active learning. Unlike traditional resampling methods which require preprocessing of the data, Virtual generates synthetic examples for the minority class during the training process, therefore it removes the need for an extra preprocessing stage. In the context of learning with Support Vector Machines, we demonstrate that Virtual outperforms competitive oversampling techniques both in terms of generalization performance and computational complexity. © 2013 Springer International Publishing.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Mohsen, Fadi</author><author>Shehab, Mohamed</author></authors></contributors><titles><title>Android Keylogging Threat</title><secondary-title>Proceedings of the 9th IEEE International Conference on Collaborative Computing: Networking, Applications and Worksharing</secondary-title></titles><periodical><full-title>Proceedings of the 9th IEEE International Conference on Collaborative Computing: Networking, Applications and Worksharing</full-title></periodical><pages>545-552</pages><keywords><keyword>Android (operating system)</keyword><keyword>Android keylogging threat</keyword><keyword>Android platform</keyword><keyword>Android soft keyboards</keyword><keyword>Android standard keyboard</keyword><keyword>Androids</keyword><keyword>Humanoid robots</keyword><keyword>KeyboardView class</keyword><keyword>Keyboards</keyword><keyword>Malware</keyword><keyword>Mobile communication</keyword><keyword>Smart phones</keyword><keyword>Software</keyword><keyword>keyboard logging</keyword><keyword>mobile apps</keyword><keyword>mobile computing</keyword><keyword>mobile security</keyword><keyword>security of data</keyword><keyword>security risks</keyword><keyword>third-party keyboards</keyword></keywords><dates><year>2013</year></dates><isbn>978-1-936968-92-3</isbn><electronic-resource-num>10.4108/icst.collaboratecom.2013.254209</electronic-resource-num><urls><pdf-urls><url>internal-pdf://2582862f7a9573cda33699173b15813437e8 (1).pdf</url></pdf-urls><web-urls><url>http://eudl.eu/doi/10.4108/icst.collaboratecom.2013.254209</url></web-urls></urls><abstract>The openness of Android platform has attracted users, developers and attackers. Android offers bunch of capabilities and flexibilities, for instance, developers can write their own keyboard service-similar to Android soft keyboards-using the KeyboardView class. This class is available since api level 3.0 and can be part of the layout of an activity. Users prefer to download and install third-party keyboards that offer better experience and capabilities. However, there are security risks related to users installing and using these custom keyboards. Attackers can build or take advantage of existing third-party keyboards to create keyloggers to spy on smartphones users. Third-party keyboard once activated would substitute the Android standard keyboard, so all keys events pass this app. As results, many attacks can be launched identified by the permissions granted to these apps. The objective of this paper is to present these attacks, analyze their causes, and provide possible solutions.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Martinelli, Fabio</author><author>Saracino, Andrea</author><author>Sgandurra, Daniele</author></authors></contributors><titles><title>Classifying android malware through subgraph mining</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>268-283</pages><volume>8247 LNCS</volume><keywords><keyword>Android</keyword><keyword>Classification</keyword><keyword>Intrusion detection system</keyword><keyword>Malware</keyword><keyword>Mobile security</keyword></keywords><dates><year>2014</year></dates><isbn>9783642545672</isbn><electronic-resource-num>10.1007/978-3-642-54568-9_17</electronic-resource-num><urls><pdf-urls><url>internal-pdf://1481735c98c7e26b281f9d59b59ebdb23e83.pdf</url></pdf-urls></urls><abstract>Current smartphones are based upon the concept of apps, which are lightweight applications that are distributed through on-line marketplaces, such as Google Play (for Android devices). Unfortunately, this market-centric model is affected by several major security and trust issues, due to the fact that anyone can easily create, and deploy through the market, a malicious app that could potentially lead to a massive malware spread. In this paper, we propose a framework to classify Android malware based upon the concept of common patterns of actions executed by malicious applications. The basic idea is to extract, from known malware, a subset of frequent subgraphs of system calls that are executed by most of the malware. This set of subgraphs constitutes a database of known malicious features. Then, when a new application is downloaded from a market, it is first run in a sandbox to monitor its behavior. This will result in an execution trace that may contain some of the subgraphs previously found in malware. The resulting vector of the found subgraphs is given to a classifier that returns its decision in terms of a likely malware or not. Preliminary tests executed both on known good apps and malware confirm the effectiveness and quality of our proposal. © 2014 Springer-Verlag Berlin Heidelberg.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Mazurczyk, Wojciech</author><author>Caviglione, Luca</author></authors></contributors><titles><title>Information Hiding as a Challenge for Malware Detection</title><secondary-title>IEEE Security and Privacy</secondary-title></titles><periodical><full-title>IEEE Security and Privacy</full-title></periodical><pages>89-93</pages><volume>13</volume><issue>2</issue><keywords><keyword>cyberattacks</keyword><keyword>cybersecurity</keyword><keyword>information hiding</keyword><keyword>malware</keyword><keyword>security</keyword><keyword>steganography</keyword></keywords><dates><year>2015</year></dates><isbn>1540-7993 VO - 13</isbn><electronic-resource-num>10.1109/MSP.2015.33</electronic-resource-num><urls><pdf-urls><url>internal-pdf://9078516fed82f77b2db203a2338e86c5b8fe.pdf</url></pdf-urls></urls><abstract>Malware increasingly uses information-hiding techniques to hide its existence and communication attempts. Having a better understanding of this technique could help mitigate and prevent cyberattacks.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Mitchell, M</author><author>Tian, G</author><author>Wang, Z</author></authors></contributors><titles><title>Systematic audit of third-party Android phones</title><secondary-title>CODASPY 2014 - Proceedings of the 4th ACM Conference on Data and Application Security and Privacy</secondary-title></titles><periodical><full-title>CODASPY 2014 - Proceedings of the 4th ACM Conference on Data and Application Security and Privacy</full-title></periodical><pages>175-186</pages><keywords><keyword>android</keyword><keyword>bindi ff</keyword><keyword>dexdi ff</keyword><keyword>security audit</keyword><keyword>static analysis</keyword></keywords><dates><year>2014</year></dates><isbn>9781450322782</isbn><electronic-resource-num>10.1145/2557547.2557557</electronic-resource-num><urls><pdf-urls><url>internal-pdf://8524398ef704e0994767bf59a6173de2ab58.pdf</url></pdf-urls><web-urls><url>http://www.scopus.com/inward/record.url?eid=2-s2.0-84899025406&amp;partnerID=40&amp;md5=3008d7d3931e14f4d6bd97ffc3500432</url></web-urls></urls><abstract>Android has become the leading smartphone platform with hundreds of devices from various manufacturers available on the market today. All these phones closely resemble each other with similar hardware and software features. Manufacturers must therefore customize the official Android system to differentiate their devices. Unfortunately, such heavily customization by third-party manufacturers often leads to serious vulnerabilities that do not exist in the official Android system. In this paper, we propose a comparative approach to systematically audit software in third-party phones by comparing them side-by-side to the official system. Specifically, we first retrieve pre-loaded apps and libraries from the phone and build a matching base system from the Android open source project repository. We then compare corresponding apps and libraries for potential vulnerabilities. To facilitate this process, we have designed and implemented DexDiff, a system that can pinpoint fine structural differences between two Android binaries and also present the changes in their surrounding contexts. Our experiments show that DexDiff is efficient and scalable. For example, it spends less than two and half minutes to process two 16.5MB (in total) files. DexDiff is also able to reveal a new vulnerability and details of the invasive CIQ mobile intelligence software. Copyright is held by the owner/author(s).</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Lalande, Jean Francois</author><author>Wendzel, Steffen</author></authors></contributors><titles><title>Hiding privacy leaks in android applications using low-attention raising covert channels</title><secondary-title>Proceedings - 2013 International Conference on Availability, Reliability and Security, ARES 2013</secondary-title></titles><periodical><full-title>Proceedings - 2013 International Conference on Availability, Reliability and Security, ARES 2013</full-title></periodical><pages>701-710</pages><keywords><keyword>Android</keyword><keyword>Covert Channels</keyword><keyword>Information Hiding</keyword><keyword>Privacy</keyword><keyword>Smartphone Security</keyword></keywords><dates><year>2013</year></dates><isbn>9780769550084</isbn><electronic-resource-num>10.1109/ARES.2013.92</electronic-resource-num><urls><pdf-urls><url>internal-pdf://2280265f9515ee1d0b8c54a17aed7270213e (1).pdf</url></pdf-urls></urls><abstract>Covert channels enable a policy-breaking communication not foreseen by a system’s design. Recently, covert channels in Android were presented and it was shown that these channels can be used by malware to leak confidential information (e.g., contacts) between applications and to the Internet. Performance aspects as well as means to counter these covert channels were evaluated. In this paper, we present novel covert channel techniques linked to a minimized footprint to achieve a high covertness. Therefore, we developed a malware that slowly leaks collected private information and sends it synchronously based on four covert channel techniques. We show that some of our covert channels do not require any extra permission and escape well know detection techniques like TaintDroid. Experimental results confirm that the obtained throughput is correlated to the user interaction and show that these new covert channels have a low energy consumption – both aspects contribute to the stealthiness of the channels. Finally, we discuss concepts for novel means capable to counter our covert channels and we also discuss the adaption of network covert channel features to Android-based covert channels.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Yu, Shui</author><author>Gu, Guofei</author><author>Barnawi, Ahmed</author><author>Guo, Song</author><author>Stojmenovic, Ivan</author></authors></contributors><titles><title>Malware propagation in large-scale networks</title><secondary-title>IEEE Transactions on Knowledge and Data Engineering</secondary-title></titles><periodical><full-title>IEEE Transactions on Knowledge and Data Engineering</full-title></periodical><pages>170-179</pages><volume>27</volume><issue>1</issue><keywords><keyword>Malware</keyword><keyword>Modelling</keyword><keyword>Power law</keyword><keyword>Propagation</keyword></keywords><dates><year>2015</year></dates><isbn>1041-4347 VO  - 27</isbn><electronic-resource-num>10.1109/TKDE.2014.2320725</electronic-resource-num><urls><pdf-urls><url>internal-pdf://968804d13b84a3950b76fc4f5f3768b471eb.pdf</url></pdf-urls></urls><abstract>Malware is pervasive in networks, and poses a critical threat to network security. However, we have very limited understanding of malware behavior in networks to date. In this paper, we investigate how malware propagates in networks from a global perspective. We formulate the problem, and establish a rigorous two layer epidemic model for malware propagation from network to network. Based on the proposed model, our analysis indicates that the distribution of a given malware follows exponential distribution, power law distribution with a short exponential tail, and power law distribution at its early, late and final stages, respectively. Extensive experiments have been performed through two real-world global scale malware data sets, and the results confirm our theoretical findings.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Mirzaei, Nariman</author><author>Garcia, Joshua</author><author>Bagheri, Hamid</author><author>Sadeghi, Alireza</author><author>Malek, Sam</author></authors></contributors><titles><title>Reducing combinatorics in GUI testing of android applications</title><secondary-title>Proceedings of the 38th International Conference on Software Engineering - ICSE '16</secondary-title></titles><periodical><full-title>Proceedings of the 38th International Conference on Software Engineering - ICSE '16</full-title></periodical><pages>559-570</pages><keywords><keyword>android</keyword><keyword>input generation</keyword><keyword>software testing</keyword></keywords><dates><year>2016</year></dates><isbn>9781450339001</isbn><electronic-resource-num>10.1145/2884781.2884853</electronic-resource-num><urls><pdf-urls><url>internal-pdf://990476affb1bc1b8a06116085f0170be107e.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2884781.2884853</url></web-urls></urls><abstract>The rising popularity of Android and the GUI-driven nature of its apps have motivated the need for applicable automated GUI testing techniques. Although exhaustive testing of all possible combinations is the ideal upper bound in combinatorial testing, it is often infeasible, due to the combinatorial explosion of test cases. This paper presents TrimDroid, a framework for GUI testing of Android apps that uses a novel strategy to generate tests in a combinatorial, yet scalable, fashion. It is backed with automated program analysis and formally rigorous test generation engines. TrimDroid relies on program analysis to extract formal specifications. These specifications express the app's behavior (i.e., control flow between the various app screens) as well as the GUI elements and their dependencies. The dependencies among the GUI elements comprising the app are used to reduce the number of combinations with the help of a solver. Our experiments have corroborated TrimDroid's ability to achieve a comparable coverage as that possible under exhaustive GUI testing using significantly fewer test cases.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Fung, Carol</author></authors></contributors><titles><title>XDroid : An Android Permission Control Using Hidden Markov Chain and Online Learning</title></titles><periodical/><keywords/><dates><year>2016</year></dates><urls><pdf-urls><url>internal-pdf://8061017b3e99a890f8719177df5c91e92dd4.pdf</url></pdf-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Dixon, Bryan</author><author>Mishra, Shivakant</author></authors></contributors><titles><title>On rootkit and malware detection in smartphones</title><secondary-title>Proceedings of the International Conference on Dependable Systems and Networks</secondary-title></titles><periodical><full-title>Proceedings of the International Conference on Dependable Systems and Networks</full-title></periodical><pages>162-163</pages><keywords/><dates><year>2010</year></dates><isbn>9781424477302</isbn><accession-num>26393812</accession-num><electronic-resource-num>10.1109/DSNW.2010.5542600</electronic-resource-num><urls><pdf-urls><url>internal-pdf://13324047be35d939df84c834951cc9dd6a23.pdf</url></pdf-urls></urls><abstract>In this paper, we propose an adversary model to facilitate forensic investigations of mobile devices (e.g. Android, iOS and Windows smartphones) that can be readily adapted to the latest mobile device technologies. This is essential given the ongoing and rapidly changing nature of mobile device technologies. An integral principle and significant constraint upon forensic practitioners is that of forensic soundness. Our adversary model specifically considers and integrates the constraints of forensic soundness on the adversary, in our case, a forensic practitioner. One construction of the adversary model is an evidence collection and analysis methodology for Android devices. Using the methodology with six popular cloud apps, we were successful in extracting various information of forensic interest in both the external and internal storage of the mobile device.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Scaife, Nolen</author><author>Carter, Henry</author><author>Traynor, Patrick</author><author>Butler, Kevin R.B.</author></authors></contributors><titles><title>CryptoLock (and Drop It): Stopping Ransomware Attacks on User Data</title><secondary-title>Proceedings - International Conference on Distributed Computing Systems</secondary-title></titles><periodical><full-title>Proceedings - International Conference on Distributed Computing Systems</full-title></periodical><pages>303-312</pages><volume>2016-Augus</volume><keywords><keyword>behavioral analysis</keyword><keyword>data protection</keyword><keyword>intrusion detection</keyword><keyword>malware</keyword><keyword>ransomware</keyword></keywords><dates><year>2016</year></dates><isbn>9781509014828</isbn><electronic-resource-num>10.1109/ICDCS.2016.46</electronic-resource-num><urls><pdf-urls><url>internal-pdf://07536529.pdf</url></pdf-urls></urls><abstract>—Ransomware is a growing threat that encrypts a user's files and holds the decryption key until a ransom is paid by the victim. This type of malware is responsible for tens of millions of dollars in extortion annually. Worse still, developing new variants is trivial, facilitating the evasion of many antivirus and intrusion detection systems. In this work, we present CryptoDrop, an early-warning detection system that alerts a user during suspicious file activity. Using a set of behavior indicators, CryptoDrop can halt a process that appears to be tampering with a large amount of the user's data. Furthermore, by combining a set of indicators common to ransomware, the system can be parameterized for rapid detection with low false positives. Our experimental analysis of CryptoDrop stops ransomware from executing with a median loss of only 10 files (out of nearly 5,100 available files). Our results show that careful analysis of ransomware behavior can produce an effective detection system that significantly mitigates the amount of victim data loss.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Carter, Patrick</author><author>Mulliner, Collin</author><author>Lindorfer, Martina</author><author>Robertson, William</author><author>Kirda, Engin</author></authors></contributors><titles><title>Curiousdroid: Automated user interface interaction for android application analysis sandboxes</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>231-249</pages><volume>9603 LNCS</volume><keywords><keyword>Android</keyword><keyword>Dynamic analysis</keyword><keyword>User interface analysis</keyword></keywords><dates><year>2017</year></dates><isbn>9783662549698</isbn><electronic-resource-num>10.1007/978-3-662-54970-4_13</electronic-resource-num><urls><pdf-urls><url>internal-pdf://07727469d91623ec57d01629548ed1ba3cdb.pdf</url></pdf-urls></urls><abstract>Mobile computing has experienced enormous growth in mar- ket share and computational power in recent years. As a result, mobile malware is becoming more sophisticated and more prevalent, leading to research into dynamic sandboxes as a widespread approach for detect- ing malicious applications. However, the event-driven nature of Android applications renders critical the capability to automatically generate de- terministic and intelligent user interactions to drive analysis subjects and improve code coverage. In this paper, we present CuriousDroid, an automated system for exercising Android application user interfaces in an intelligent, user-like manner. CuriousDroid operates by decomposing application user interfaces on-the-fly and creating a context-based model for interactions that is tailored to the current user layout.We integrated CuriousDroid with Andrubis, a well-known Android sandbox, and con- ducted a large-scale evaluation of 38,872 applications taken from different data sets. Our evaluation demonstrates significant improvements in both end-to-end sample classification as well as increases in the raw number of elicited behaviors at runtime.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sylve, Joe</author><author>Case, Andrew</author><author>Marziale, Lodovico</author><author>Richard, Golden G.</author></authors></contributors><titles><title>Acquisition and analysis of volatile memory from android devices</title><secondary-title>Digital Investigation</secondary-title></titles><periodical><full-title>Digital Investigation</full-title></periodical><pages>175-184</pages><volume>8</volume><issue>3-4</issue><keywords><keyword>Android</keyword><keyword>Linux</keyword><keyword>Memory analysis</keyword><keyword>Memory forensics</keyword><keyword>Mobile device forensics</keyword></keywords><dates><year>2012</year></dates><publisher>Elsevier Ltd</publisher><isbn>1742-2876</isbn><electronic-resource-num>10.1016/j.diin.2011.10.003</electronic-resource-num><urls><pdf-urls><url>internal-pdf://06159413e1bb65ef218b4c78664d84a9b3c3.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.diin.2011.10.003</url></web-urls></urls><abstract>The Android operating system for mobile phones, which is still relatively new, is rapidly gaining market share, with dozens of smartphones and tablets either released or set to be released. In this paper, we present the first methodology and toolset for acquisition and deep analysis of volatile physical memory from Android devices. The paper discusses some of the challenges in performing Android memory acquisition, discusses our new kernel module for dumping memory, named dmd, and specifically addresses the difficulties in developing device-independent acquisition tools. Our acquisition tool supports dumping memory to either the SD on the phone or via the network. We also present analysis of kernel structures using newly developed Volatility functionality. The results of this work illustrate the potential that deep memory analysis offers to digital forensics investigators. © 2011 Elsevier Ltd. All rights reserved.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Deloach, Jordan</author><author>Caragea, Doina</author></authors></contributors><titles><title>Android Malware Detection with Weak Ground Truth Data</title><secondary-title>Proceedings of the 31th Conference on Artificial Intelligence (AAAI 2017)</secondary-title></titles><periodical><full-title>Proceedings of the 31th Conference on Artificial Intelligence (AAAI 2017)</full-title></periodical><pages>4915-4916</pages><keywords><keyword>Student Abstracts</keyword></keywords><dates><year>2017</year></dates><isbn>9781467390057</isbn><urls><pdf-urls><url>internal-pdf://a4ada0e4d052dd8a3d4c84dc07b50e572810.pdf</url></pdf-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Ahmed Rumee, Sarker T.</author><author>Liu, Donggang</author></authors></contributors><titles><title>Droid test: Testing android applications for leakage of private information</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>341-353</pages><volume>7807</volume><keywords/><dates><year>2015</year></dates><isbn>9783319276588</isbn><electronic-resource-num>10.1007/978-3-319-27659-5_24</electronic-resource-num><urls><pdf-urls><url>internal-pdf://a4b67cb7d9ff5f961666acecac9178076330 (1).pdf</url></pdf-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bianchi, Antonio</author><author>Corbetta, Jacopo</author><author>Invernizzi, Luca</author><author>Fratantonio, Yanick</author><author>Kruegel, Christopher</author><author>Vigna, Giovanni</author></authors></contributors><titles><title>What the app is that? Deception and countermeasures in the android user interface</title><secondary-title>Proceedings - IEEE Symposium on Security and Privacy</secondary-title></titles><periodical><full-title>Proceedings - IEEE Symposium on Security and Privacy</full-title></periodical><pages>931-948</pages><volume>2015-July</volume><keywords><keyword>mobile-security</keyword><keyword>static-analysis</keyword><keyword>usable-security</keyword></keywords><dates><year>2015</year></dates><isbn>9781467369497</isbn><electronic-resource-num>10.1109/SP.2015.62</electronic-resource-num><urls><pdf-urls><url>internal-pdf://07163069.pdf</url></pdf-urls></urls><abstract>Mobile applications are part of the everyday lives of billions of people, who often trust them with sensitive information. These users identify the currently focused app solely by its visual appearance, since the GUIs of the most popular mobile OSes do not show any trusted indication of the app origin. In this paper, we analyze in detail the many ways in which Android users can be confused into misidentifying an app, thus, for instance, being deceived into giving sensitive information to a malicious app. Our analysis of the Android platform APIs, assisted by an automated state-exploration tool, led us to identify and categorize a variety of attack vectors (some previously known, others novel, such as a non-escapable fullscreen overlay) that allow a malicious app to surreptitiously replace or mimic the GUI of other apps and mount phishing and click-jacking attacks. Limitations in the system GUI make these attacks significantly harder to notice than on a desktop machine, leaving users completely defenseless against them. To mitigate GUI attacks, we have developed a two-layer defense. To detectmalicious apps at themarket level, we developed a tool that uses static analysis to identify code that could launch GUI confusion attacks. We show how this tool detects apps that might launch GUI attacks, such as ransomware programs. Since these attacks are meant to confuse humans, we have also designed and implemented an on-device defense that addresses the underlying issue of the lack of a security indicator in the Android GUI. We add such an indicator to the system navigation bar; this indicator securely informs users about the origin of the app with which they are interacting (e.g., the PayPal app is backed by “PayPal, Inc.”). We demonstrate the effectiveness of our attacks and the proposed on-device defense with a user study involving 308 human subjects, whose ability to detect the attacks increased significantly when using a system equipped with our defense.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Octeau, Damien</author><author>Luchaup, Daniel</author><author>Jha, Somesh</author><author>McDaniel, Patrick</author></authors></contributors><titles><title>Composite Constant Propagation and its Application to Android Program Analysis</title><secondary-title>IEEE Transactions on Software Engineering</secondary-title></titles><periodical><full-title>IEEE Transactions on Software Engineering</full-title></periodical><pages>999-1014</pages><volume>42</volume><issue>11</issue><keywords><keyword>Android application analysis</keyword><keyword>Composite constant</keyword><keyword>ICC</keyword><keyword>constant propagation</keyword><keyword>inter-component communication</keyword></keywords><dates><year>2016</year></dates><isbn>9781479919345</isbn><electronic-resource-num>10.1109/TSE.2016.2550446</electronic-resource-num><urls><pdf-urls><url>internal-pdf://0594770549162b77c37bb4749d419736c48d.pdf</url></pdf-urls></urls><abstract>Many program analyses require statically inferring the possible values of composite types. However, current approaches either do not account for correlations between object fields or do so in an ad hoc manner. In this paper, we introduce the problem of composite constant propagation. We develop the first generic solver that infers all possible values of complex objects in an interprocedural, flow and context-sensitive manner, taking field correlations into account. Composite constant propagation problems are specified using COAL, a declarative language. We apply our COAL solver to the problem of inferring Android Inter-Component Communication (ICC) values, which is required to understand how the components of Android applications interact. Using COAL, we model ICC objects in Android more thoroughly than the state-of-the-art. We compute ICC values for 460 applications from the Play store. The ICC values we infer are substantially more precise than previous work. The analysis is efficient, taking slightly over two minutes per application on average. While this work can be used as the basis for many whole-program analyses of Android applications, the COAL solver can also be used to infer the values of composite objects in many other contexts.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Linares-Vásquez, Mario</author><author>Bavota, Gabriele</author><author>Bernal-Cárdenas, Carlos</author><author>Di Penta, Massimiliano</author><author>Oliveto, Rocco</author><author>Poshyvanyk, Denys</author></authors></contributors><titles><title>API change and fault proneness: a threat to the success of Android apps</title><secondary-title>Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering - ESEC/FSE 2013</secondary-title></titles><periodical><full-title>Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering - ESEC/FSE 2013</full-title></periodical><pages>477</pages><keywords><keyword>API changes</keyword><keyword>Android</keyword><keyword>Empirical Studies</keyword><keyword>Mining Software Repositories</keyword></keywords><dates><year>2013</year></dates><isbn>9781450322379</isbn><electronic-resource-num>10.1145/2491411.2491428</electronic-resource-num><urls><pdf-urls><url>internal-pdf://5468603667ec2c16e6a01aec2a1bb2b6b3e8.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2491411.2491428%5Cnhttp://dl.acm.org/citation.cfm?doid=2491411.2491428</url></web-urls></urls><abstract>During the recent years, themarket of mobile software appli- cations (apps) has maintained an impressive upward trajec- tory. Many small and large software development companies invest considerable resources to target available opportuni- ties. As of today, the markets for such devices feature over 850K+ apps for Android and 900K+ for iOS. Availability, cost, functionality, and usability are just some factors that determine the success or lack of success for a given app. Among the other factors, reliability is an important criteria: users easily get frustrated by repeated failures, crashes, and other bugs; hence, abandoning some apps in favor of others. This paper reports a study analyzing how the fault- and change-proneness of APIs used by 7,097 (free) Android apps relates to applications’ lack of success, estimated from user ratings. Results of this study provide important insights into a crucial issue: making heavy use of fault- and change-prone APIs can negatively impact the success of these apps.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Park, Yeongung</author><author>Lee, Choonghyun</author><author>Lee, Chanhee</author><author>Park, Minkyu</author></authors></contributors><titles><title>RGBDroid : A Novel Response-Based Approach to Android Privilege Escalation Attacks</title><secondary-title>In Proceedings of the 5th USENIX conference on Large-Scale Exploits and Emergent Threats, LEET</secondary-title></titles><periodical><full-title>In Proceedings of the 5th USENIX conference on Large-Scale Exploits and Emergent Threats, LEET</full-title></periodical><pages>1 - 9</pages><volume>12</volume><keywords/><dates><year>2012</year></dates><urls><pdf-urls><url>internal-pdf://a1be09f708fd13ebfd96b9d7ee19624ac4f2.pdf</url></pdf-urls></urls><abstract>Recent malware often collects sensitive information from third-party applications with an illegally escalated privilege to the system level (the highest level) on the Android platform. An attack to obtain root-level privilege in an Android environment can pose a serious threat to users because it breaks down the whole security system. RGBDroid (Rooting Good-Bye on Droid) is an extension to the Android smartphone platform that effectively detects and responds to the attacks associated with escalation or abuse of privileges. Considering the Android security model, which dictates that users are not allowed to get root-level privilege and that root-level privilege should be restrictively used, RGBDroid can find out whether an application illegally acquires root-level privilege, and does not permit an illegal root-level process to access protected resources according to the principle of least privilege. RGBDroid protects the Android system against malicious applications even when malware obtains root-level privilege by exploiting vulnerabilities of the Android platform. This paper shows that i) a system can still be safely protected even after the system security is breached by privilege escalation attacks, and ii) our proposed response technique has comparative advantage over conventional prevention techniques in terms of operational overhead which can lead to significant deterioration of overall system performance. RGBDroid has been implemented on an embedded board and verified experimentally.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Tse, Daniel W K</author><author>Liu, X</author><author>Kong, Hong</author><author>Nusaputra, Christopher</author><author>Kong, Hong</author><author>Hu, B</author><author>Kong, Hong</author><author>Wang, Y</author><author>Kong, Hong</author><author>Xing, M W</author><author>Kong, Hong</author></authors></contributors><titles><title>Strategies in improving android security</title><secondary-title>26</secondary-title></titles><periodical><full-title>26</full-title></periodical><keywords><keyword>android architecture</keyword><keyword>mobile security</keyword><keyword>mobile security awareness</keyword><keyword>security threat</keyword></keywords><dates><year>2013</year></dates><urls><pdf-urls><url>internal-pdf://a2c082f111061a9704c226237bccc4a80243.pdf</url></pdf-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Apvrille, Axelle</author><author>Apvrille, Ludovic</author></authors></contributors><titles><title>SherlockDroid: a research assistant to spot unknown malware in Android marketplaces</title><secondary-title>Journal of Computer Virology and Hacking Techniques</secondary-title></titles><periodical><full-title>Journal of Computer Virology and Hacking Techniques</full-title></periodical><pages>235-245</pages><volume>11</volume><issue>4</issue><keywords><keyword>Android</keyword><keyword>Classification</keyword><keyword>Malware</keyword><keyword>Security</keyword><keyword>Static analysis</keyword></keywords><dates><year>2015</year></dates><isbn>2274-2042</isbn><electronic-resource-num>10.1007/s11416-015-0245-z</electronic-resource-num><urls><pdf-urls><url>internal-pdf://96425410721bd1762ee859dd60477e2ccea0.pdf</url></pdf-urls></urls><abstract>With over 1,400,000 Android applications in Google Play alone, and dozens of different marketplaces, Android malware unfortunately have no difficulty to sneak in and silently spread. Known malware and their variants are nowadays quite well detected by anti-virus scanners. Nevertheless, the fundamentally new and unknown malware remain an issue. To assist research teams in the discovery of such new malware, we built an infrastructure, named SherlockDroid, whose goal is to filter out the mass of applications and only keep those which are the most likely to be malicious for future inspection by Anti-virus teams. SherlockDroid consists of marketplace crawlers, code-level property extractors and a classification tool named Alligator which decides whether the sample looks malicious or not, based on some prior learning. In our tests, we extracted properties and classified over 480K applications. During two crawling campaigns in July 2014 and October 2014, SherlockDroid crawled over 120K applications with the detection of one new malware, Android/Odpa.A!tr.spy, and two new riskware. With previous findings, this increases SherlockDroid and Alligator’s “Hall of Shame” to 8 malware and potentially unwanted applications.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Kang, Boo Joong</author><author>Yerima, Suleiman Y.</author><author>McLaughlin, Kieran</author><author>Sezer, Sakir</author></authors></contributors><titles><title>N-opcode analysis for android malware classification and categorization</title><secondary-title>2016 International Conference on Cyber Security and Protection of Digital Services, Cyber Security 2016</secondary-title></titles><periodical><full-title>2016 International Conference on Cyber Security and Protection of Digital Services, Cyber Security 2016</full-title></periodical><pages>13-14</pages><keywords><keyword>Android malware</keyword><keyword>Dalvik bytecode</keyword><keyword>malware categorization</keyword><keyword>malware classification</keyword><keyword>n-gram</keyword><keyword>n-opcode</keyword></keywords><dates><year>2016</year></dates><isbn>9781509007097</isbn><electronic-resource-num>10.1109/CyberSecPODS.2016.7502343</electronic-resource-num><urls><pdf-urls><url>internal-pdf://35763647ba8ff541ba35d74bf54d8dc8d102.pdf</url></pdf-urls></urls><abstract>Malware detection is a growing problem particularly on the Android mobile platform due to its increasing popularity and accessibility to numerous third party app markets. This has also been made worse by the increasingly sophisticated detection avoidance techniques employed by emerging malware families. This calls for more effective techniques for detection and classification of Android malware. Hence, in this paper we present an n-opcode analysis based approach that utilizes machine learning to classify and categorize Android malware. This approach enables automated feature discovery that eliminates the need for applying expert or domain knowledge to define the needed features. Our experiments on 2520 samples that were performed using up to 10-gram opcode features showed that an f-measure of 98% is achievable using this approach.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Lim, Kyeonghwan</author><author>Jeong, Younsik</author><author>Cho, Seong-je</author><author>Park, Minkyu</author><author>Han, Sangchul</author></authors></contributors><titles><title>An Android Application Protection Scheme against Dynamic Reverse Engineering Attacks.</title><secondary-title>JoWUA</secondary-title></titles><periodical><full-title>JoWUA</full-title></periodical><pages>40-52</pages><volume>7</volume><issue>3</issue><keywords><keyword>android</keyword><keyword>application protection</keyword><keyword>evasion attack</keyword><keyword>reverse engineering</keyword><keyword>rooting</keyword></keywords><dates><year>2016</year></dates><urls><pdf-urls><url>internal-pdf://a59c7df3bbbcff08bee07dfe54b4d5017cfd.pdf</url></pdf-urls><web-urls><url>http://dblp.uni-trier.de/db/journals/jowua/jowua7.html#LimJCPH16</url></web-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Mart, Alejandro</author><author>Calleja, Alejandro</author></authors></contributors><titles><title>ADROIT : Android malware detection using meta-information</title></titles><periodical/><keywords/><urls><pdf-urls><url>internal-pdf://a90d564bc33a6fc1bfb16bfae12655efd28c.pdf</url></pdf-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sakamoto, Syunya</author><author>Okuda, Kenji</author><author>Nakatsuka, Ryo</author><author>Yamauchi, Toshihiro</author></authors></contributors><titles><title>DroidTrack: Tracking information diffusion and preventing information leakage on android</title><secondary-title>Lecture Notes in Electrical Engineering</secondary-title></titles><periodical><full-title>Lecture Notes in Electrical Engineering</full-title></periodical><pages>243-251</pages><volume>240 LNEE</volume><keywords><keyword>API control</keyword><keyword>Android</keyword><keyword>Malware</keyword><keyword>Preventing information leakage</keyword></keywords><dates><year>2013</year></dates><isbn>9789400767379</isbn><electronic-resource-num>10.1007/978-94-007-6738-6_31</electronic-resource-num><urls><pdf-urls><url>internal-pdf://a77c1ef580f294eba762e62e8a5fdb39f16f.pdf</url></pdf-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Milosevic, Jelena</author><author>Dittrich, Andreas</author><author>Ferrante, Alberto</author><author>Malek, Miroslaw</author></authors></contributors><titles><title>A Resource-optimized Approach to Efficient Early Detection of Mobile Malware</title></titles><periodical/><keywords/><urls><pdf-urls><url>internal-pdf://a033ead6c8b2b9dd1eb39fcc997a92cf886a.pdf</url></pdf-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Gibler, Clint</author><author>Crussell, Jonathan</author><author>Erickson, Jeremy</author><author>Chen, Hao</author></authors></contributors><titles><title>AndroidLeaks: Automatically detecting potential privacy leaks in Android applications on a large scale</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>291-307</pages><volume>7344 LNCS</volume><keywords/><dates><year>2012</year></dates><isbn>9783642309205</isbn><electronic-resource-num>10.1007/978-3-642-30921-2_17</electronic-resource-num><urls><pdf-urls><url>internal-pdf://a579de7da753a095356b5da24804af28e8f7.pdf</url></pdf-urls></urls><abstract>As mobile devices become more widespread and powerful, they store more sensitive data, which includes not only users' personal information but also the data collected via sensors throughout the day. When mobile applications have access to this growing amount of sensitive information, they may leak it carelessly or maliciously. Google's Android operating system provides a permissions-based security model that restricts an application's access to the user's private data. Each application statically declares the sensitive data and functionality that it requires in a manifest, which is presented to the user upon installation. However, it is not clear to the user how sensitive data is used once the application is installed. To combat this problem, we present AndroidLeaks, a static analysis framework for automatically finding potential leaks of sensitive information in Android applications on a massive scale. AndroidLeaks drastically reduces the number of applications and the number of traces that a security auditor has to verify manually. We evaluate the efficacy of AndroidLeaks on 24,350 Android applications from several Android markets. AndroidLeaks found 57,299 potential privacy leaks in 7,414 Android applications, out of which we have manually verified that 2,342 applications leak private data including phone information, GPS location, WiFi data, and audio recorded with the microphone. AndroidLeaks examined these applications in 30 hours, which indicates that it is capable of scaling to the increasingly large set of available applications. © 2012 Springer-Verlag.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wang, Na</author><author>Zhang, Bo</author><author>Liu, Bin</author><author>Jin, Hongxia</author></authors></contributors><titles><title>Investigating Effects of Control and Ads Awareness on Android Users ’ Privacy Behaviors and Perceptions</title><secondary-title>Acm</secondary-title></titles><periodical><full-title>Acm</full-title></periodical><pages>373-382</pages><keywords/><dates><year>2015</year></dates><isbn>9781450336529</isbn><electronic-resource-num>10.1145/2785830.2785845</electronic-resource-num><urls><pdf-urls><url>internal-pdf://a34ab9b7f2a429aab9695fcefaa72670568d.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2785845</url></web-urls></urls><abstract>Through a controlled online experiment with 447 Android phone users using their own devices, we investigated howem- powering users with information-disclosure control and en- hancing their ads awareness affect their installation behav- iors, information disclosure, and privacy perceptions toward different mobile apps. In the 3 (control: no, low, high) x 2 (ads awareness: absent, present) x 3 (app context: Wallpaper, BusTracker, Flashlight) fractional factorial between-subjects experiment, we designed privacy notice dialogs that simulate real Android app pre-installation privacy-setting interfaces to implement and manipulate control and ads awareness. Our findings suggest that empowering users with control over in- formation disclosure and enhancing their ads awareness be- fore installation effectively help them make better privacy de- cisions, increase their likelihood of installing an app, and im- prove their perceptions of the app. Implications for designing mobile apps’ privacy notice dialogs and potential separate- ads-control solutions are discussed.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Jadhav, Suyash</author><author>Oh, Tae Tom</author><author>Jeong, Jaehoon Paul</author><author>Kim, Young Ho</author><author>Kim, Jeong Neyo</author></authors></contributors><titles><title>An Assistive System for Android Malware Analysis to Increase Malware Analysis Efficiency</title><secondary-title>2017 31st International Conference on Advanced Information Networking and Applications Workshops (WAINA)</secondary-title></titles><periodical><full-title>2017 31st International Conference on Advanced Information Networking and Applications Workshops (WAINA)</full-title></periodical><pages>370-374</pages><keywords><keyword>-malware</keyword><keyword>Malware, Assistive System, Analysis, Malware, Anal</keyword><keyword>analysis</keyword><keyword>assistive system</keyword><keyword>malware</keyword></keywords><dates><year>2017</year></dates><isbn>978-1-5090-6231-7</isbn><electronic-resource-num>10.1109/WAINA.2017.26</electronic-resource-num><urls><pdf-urls><url>internal-pdf://a6bc64bc5a6fec16aaabf33700266f9ffc6b.pdf</url></pdf-urls><web-urls><url>http://ieeexplore.ieee.org/document/7929706/</url></web-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Allalouf, Miriam</author><author>Ben-Av, Radel</author><author>Gerdov, Alex</author></authors></contributors><titles><title>StoreDroid: Sensor-based data protection framework for Android</title><secondary-title>IWCMC 2014 - 10th International Wireless Communications and Mobile Computing Conference</secondary-title></titles><periodical><full-title>IWCMC 2014 - 10th International Wireless Communications and Mobile Computing Conference</full-title></periodical><pages>511-517</pages><keywords><keyword>Android</keyword><keyword>Data Security</keyword><keyword>Mobile Computing</keyword><keyword>Security-Enhanced Linux</keyword></keywords><dates><year>2014</year></dates><isbn>9781479909599</isbn><electronic-resource-num>10.1109/IWCMC.2014.6906409</electronic-resource-num><urls><pdf-urls><url>internal-pdf://allalouf2014.pdf</url></pdf-urls></urls><abstract>Android has become the most prevalent smartphone operating system. Despite its popularity, Android has a lot of flaws in security. In this research study we target a wide range of smartphone applications that share secret and local data with the service provider so that this data will not be leaked or accessed by other entities. The StoreDroid framework, described in this paper, addresses possible data violations that can occur in the current Android system by adding protection mechanisms in several layers as follows: (1) at the Linux level we use the security-enhanced Linux and security-enhanced Android plugins that prevent today's privileged escalation data access; (2) StoreDroidApp is a generic sensor-based access control mechanism where the sensors (such as biometric sensors and GPS) and the rules to access the data are defined by the service provider for better protection — we took advantage of the fact that Android systems are usually integrated with various hardware sensors in order to protect the user as well as the service provider; and (3) a secured message passing protocol to ensure that sensitive data will not be compromised by unwanted applications. The StoreDroid framework makes the following contributions: (1) the generic StoreDroidApp stub that is installed when the ROM is built narrows possible illegal data access for assigned application by the set of semantic and limiting sensor-based access rules, and (2) on top of the regular Linux used in Android, the customized security-enhanced Linux ensures that the sensor-based application will keep the data isolated and secured.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Barbon, Gianluca</author><author>B, Agostino Cortesi</author><author>Ferrara, Pietro</author><author>Pistoia, Marco</author><author>Tripp, Omer</author></authors></contributors><titles><title>Computer Information Systems and Industrial Management</title></titles><periodical/><pages>3-23</pages><volume>9339</volume><keywords/><dates><year>2015</year></dates><isbn>978-3-319-24368-9</isbn><electronic-resource-num>10.1007/978-3-319-24369-6</electronic-resource-num><urls><pdf-urls><url>internal-pdf://b0a4848907a0c6696318fecf2d1cfd0a7b68.pdf</url></pdf-urls><web-urls><url>http://link.springer.com/10.1007/978-3-319-24369-6</url></web-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Ugus, O</author><author>Westhoff, D</author></authors></contributors><titles><title>An MTM based Watchdog for Malware Famishment in Smartphones.</title><secondary-title>Iics</secondary-title></titles><periodical><full-title>Iics</full-title></periodical><pages>251-262</pages><keywords/><dates><year>2011</year></dates><urls><pdf-urls><url>internal-pdf://ab775be5825a939ee7c2f880bcf4ad1f7176 (1).pdf</url></pdf-urls><web-urls><url>http://cs.emis.de/LNI/Proceedings/Proceedings186/251.pdf</url></web-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wei, Fengguo</author><author>Li, Yuping</author><author>Roy, Sankardas</author><author>Ou, Xinming</author><author>Zhou, Wu</author></authors></contributors><titles><title>Deep Ground Truth Analysis of Current Android Malware</title><secondary-title>Detection of Intrusions and Malware, and Vulnerability Assessment: 14th International Conference, DIMVA 2017, Bonn, Germany, July 6-7, 2017, Proceedings</secondary-title></titles><periodical><full-title>Detection of Intrusions and Malware, and Vulnerability Assessment: 14th International Conference, DIMVA 2017, Bonn, Germany, July 6-7, 2017, Proceedings</full-title></periodical><pages>252-276</pages><keywords/><dates><year>2017</year></dates><isbn>978-3-319-60876-1</isbn><electronic-resource-num>10.1007/978-3-319-60876-1_12</electronic-resource-num><urls><pdf-urls><url>internal-pdf://a23fe9e71c80a902c0551396a7b7cd0cb0e4(1).pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1007/978-3-319-60876-1_12</url></web-urls></urls><abstract>To build effective malware analysis techniques and to evaluate new detection tools, up-to-date datasets reflecting the current Android malware landscape are essential. For such datasets to be maximally useful, they need to contain reliable and complete information on malware's behaviors and techniques used in the malicious activities. Such a dataset shall also provide a comprehensive coverage of a large number of types of malware. The Android Malware Genome created circa 2011 has been the only well-labeled and widely studied dataset the research community had easy access to (As of 12/21/2015 the Genome authors have stopped supporting the dataset sharing due to resource limitation). But not only is it outdated and no longer represents the current Android malware landscape, it also does not provide as detailed information on malware's behaviors as needed for research. Thus it is urgent to create a high-quality dataset for Android malware. While existing information sources such as VirusTotal are useful, to obtain the accurate and detailed information for malware behaviors, deep manual analysis is indispensable. In this work we present our approach to preparing a large Android malware dataset for the research community. We leverage existing anti-virus scan results and automation techniques in categorizing our large dataset (containing 24,650 malware app samples) into 135 varieties (based on malware behavioral semantics) which belong to 71 malware families. For each variety, we select three samples as representatives, for a total of 405 malware samples, to conduct in-depth manual analysis. Based on the manual analysis result we generate detailed descriptions of each malware variety's behaviors and include them in our dataset. We also report our observations on the current landscape of Android malware as depicted in the dataset. Furthermore, we present detailed documentation of the process used in creating the dataset, including the guidelines for the manual analysis. We make our Android malware dataset available to the research community.</abstract></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Nauman, Mohammad</author><author>Khan, Sohail</author><author>Zhang, Xinwen</author><author>Seifert, Jean-pierre</author></authors></contributors><titles><title>Beyond Kernel-level Integrity Measurement : Enabling Remote Attestation for the Android Platform</title></titles><periodical/><keywords/><urls><pdf-urls><url>internal-pdf://ad47a220c2e278a10dcddb89b2816cd346c2.pdf</url></pdf-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Ling, Zhen</author><author>Borgeest, Melanie</author><author>Sano, Chuta</author><author>Lin, Sirong</author><author>Fadl, Mogahid</author></authors></contributors><titles><title>A Case Study of Usable Security : Usability Testing of Android Privacy Enhancing Keyboard</title></titles><periodical/><pages>1-12</pages><keywords><keyword>android</keyword><keyword>keyboard</keyword><keyword>pek</keyword><keyword>privacy</keyword><keyword>touch screen</keyword><keyword>usability testing</keyword></keywords><urls><pdf-urls><url>internal-pdf://ac39bae85be39b86a88e3b9aaababa1f4676.pdf</url></pdf-urls></urls></record><record><database name="My Collection_401to 500.enl" path="My Collection_401to 500.enl">My Collection_401to 500.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Ulqinaku, Enis</author><author>Malisa, Luka</author><author>Stefa, Julinda</author><author>Mei, Alessandro</author><author>Čapkun, Srdjan</author></authors></contributors><titles><title>Using Hover to Compromise the Confidentiality of User Input on Android</title><secondary-title>WiSec '17 (10th ACM conference on Security and privacy in wireless &amp; mobile networks)</secondary-title></titles><periodical><full-title>WiSec '17 (10th ACM conference on Security and privacy in wireless &amp; mobile networks)</full-title></periodical><volume>11</volume><keywords><keyword>-  Security and privacy  -&gt;  Mobile platform secur</keyword></keywords><dates><year>2017</year></dates><isbn>9781450350846</isbn><electronic-resource-num>10.1145/3098243.3098246</electronic-resource-num><urls><pdf-urls><url>internal-pdf://aefbee6c9491125fb5c09fd51b15f2764b3f.pdf</url></pdf-urls><web-urls><url>https://doi.org/10.1145/3098243.3098246</url></web-urls></urls><abstract>We show that the new hover (floating touch) technology, avail-able in a number of today's smartphone models, can be abused by malicious Android applications to record all touchscreen input into applications system-wide. Leveraging this attack, a malicious application running on the system is able to capture sensitive input such as passwords and PINs, record all user's social interactions, as well as profile user's behavior. To evaluate our attack we im-plemented Hoover, a proof-of-concept malicious application that runs in the background and records all input to all foreground ap-plications. We evaluated Hoover with 20 users, across two different Android devices and two input methods, stylus and finger. In the case of touchscreen input by finger, Hoover estimated the positions of users' clicks within an error of 100 pixels and keyboard input with an accuracy of 79%. Hoover captured users' input by stylus even more accurately, estimating users' clicks within 2 pixels and keyboard input with an accuracy of 98%. Differently from exist-ing well-known side channel attacks, this is the first work that proves the security implications of the hover technology and its potential to steal all user inputs with high granularity. We discuss ways of mitigating this attack and show that this cannot be done by simply restricting access to permissions or imposing additional cognitive load on the users since this would significantly constrain the intended use of the hover technology.</abstract></record></records></xml>
