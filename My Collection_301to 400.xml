<?xml version="1.0" encoding="UTF-8"?><xml><records><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Narayanan, Annamalai</author><author>Meng, Guozhu</author><author>Yang, Liu</author><author>Liu, Jinliang</author><author>Chen, Lihui</author></authors></contributors><titles><title>Contextual Weisfeiler-Lehman graph kernel for malware detection</title><secondary-title>Proceedings of the International Joint Conference on Neural Networks</secondary-title></titles><periodical><full-title>Proceedings of the International Joint Conference on Neural Networks</full-title></periodical><pages>4701-4708</pages><volume>2016-Octob</volume><keywords><keyword>Graph kernels</keyword><keyword>Malware detection</keyword><keyword>Program analysis</keyword></keywords><dates><year>2016</year></dates><isbn>9781509006199</isbn><electronic-resource-num>10.1109/IJCNN.2016.7727817</electronic-resource-num><urls><pdf-urls><url>internal-pdf://07727817.pdf</url></pdf-urls></urls><abstract>In this paper, we propose a novel graph kernel specifically to address a challenging problem in the field of cyber-security, namely, malware detection. Previous research has revealed the following: (1) Graph representations of programs are ideally suited for malware detection as they are robust against several attacks, (2) Besides capturing topological neighbourhoods (i.e., structural information) from these graphs it is important to capture the context under which the neighbourhoods are reachable to accurately detect malicious neighbourhoods. We observe that state-of-the-art graph kernels, such as Weisfeiler-Lehman kernel (WLK) capture the structural information well but fail to capture contextual information. To address this, we develop the Contextual Weisfeiler-Lehman kernel (CWLK) which is capable of capturing both these types of information. We show that for the malware detection problem, CWLK is more expressive and hence more accurate than WLK while maintaining comparable efficiency. Through our large-scale experiments with more than 50,000 real-world Android apps, we demonstrate that CWLK outperforms two state-of-the-art graph kernels (including WLK) and three malware detection techniques by more than 5.27% and 4.87% F-measure, respectively, while maintaining high efficiency. This high accuracy and efficiency make CWLK suitable for large-scale real-world malware detection.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Holland, Benjamin</author><author>Deering, Tom</author><author>Kothari, Suresh</author><author>Mathews, Jon</author><author>Ranade, Nikhil</author></authors></contributors><titles><title>Security Toolbox for Detecting Novel and Sophisticated Android Malware</title><secondary-title>Proceedings - International Conference on Software Engineering</secondary-title></titles><periodical><full-title>Proceedings - International Conference on Software Engineering</full-title></periodical><pages>733-736</pages><volume>2</volume><keywords><keyword>Android</keyword><keyword>Malware</keyword><keyword>Mobile security</keyword><keyword>Program analysis</keyword></keywords><dates><year>2015</year></dates><isbn>9781479919345</isbn><electronic-resource-num>10.1109/ICSE.2015.235</electronic-resource-num><urls><pdf-urls><url>internal-pdf://holland2015.pdf</url></pdf-urls></urls><abstract>This paper presents a demo of our Security Toolbox to detect novel malware in Android apps. This Toolbox is developed through our recent research project funded by the DARPA Automated Program Analysis for Cybersecurity (APAC) project. The adversarial challenge (&quot;Red&quot;) teams in the DARPA APAC program are tasked with designing sophisticated malware to test the bounds of malware detection technology being developed by the research and development (&quot;Blue&quot;) teams. Our research group, a Blue team in the DARPA APAC program, proposed a &quot;human-in-the-loop program analysis&quot; approach to detect malware given the source or Java bytecode for an Android app. Our malware detection apparatus consists of two components: a general-purpose program analysis platform called Atlas, and a Security Toolbox built on the Atlas platform. This paper describes the major design goals, the Toolbox components to achieve the goals, and the workflow for auditing Android apps. The accompanying video illustrates features of the Toolbox through a live audit.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Alzaylaee, Mohammed K.</author><author>Yerima, Suleiman Y.</author><author>Sezer, Sakir</author></authors></contributors><titles><title>DynaLog: An automated dynamic analysis framework for characterizing android applications</title><secondary-title>2016 International Conference on Cyber Security and Protection of Digital Services, Cyber Security 2016</secondary-title></titles><periodical><full-title>2016 International Conference on Cyber Security and Protection of Digital Services, Cyber Security 2016</full-title></periodical><keywords><keyword>Android</keyword><keyword>dynamic analysis</keyword><keyword>malware analysis framework</keyword><keyword>malware detection</keyword><keyword>mobile security</keyword></keywords><dates><year>2016</year></dates><isbn>9781509007097</isbn><electronic-resource-num>10.1109/CyberSecPODS.2016.7502337</electronic-resource-num><urls><pdf-urls><url>internal-pdf://f091876ce94494d1101c803080e7582be549.pdf</url></pdf-urls></urls><abstract>Android is becoming ubiquitous and currently has the largest share of the mobile OS market with billions of application downloads from the official app market. It has also become the platform most targeted by mobile malware that are becoming more sophisticated to evade state-of-the-art detection approaches. Many Android malware families employ obfuscation techniques in order to avoid detection and this may defeat static analysis based approaches. Dynamic analysis on the other hand may be used to overcome this limitation. Hence in this paper we propose DynaLog, a dynamic analysis based framework for characterizing Android applications. The framework provides the capability to analyse the behaviour of applications based on an extensive number of dynamic features. It provides an automated platform for mass analysis and characterization of apps that is useful for quickly identifying and isolating malicious applications. The DynaLog framework leverages existing open source tools to extract and log high level behaviours, API calls, and critical events that can be used to explore the characteristics of an application, thus providing an extensible dynamic analysis platform for detecting Android malware. DynaLog is evaluated using real malware samples and clean applications demonstrating its capabilities for effective analysis and detection of malicious applications</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Kikuchi, Yosuke</author><author>Mori, Hiroshi</author><author>Nakano, Hiroki</author><author>Yoshioka, Katsunari</author><author>Matsumoto, Tsutomu</author><author>Van Eeten, Michael</author></authors></contributors><titles><title>Evaluating Malware Mitigation by Android Market Operators</title><secondary-title>Proceedings of the 9th USENIX Conference on Cyber Security Experimentation and Test</secondary-title></titles><periodical><full-title>Proceedings of the 9th USENIX Conference on Cyber Security Experimentation and Test</full-title></periodical><pages>8</pages><keywords/><dates><year>2016</year></dates><urls><pdf-urls><url>internal-pdf://f40ed3591e259688dd3fd493bdfb3e2750d5.pdf</url></pdf-urls></urls></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Apvrille, Ludovic</author><author>Apvrille, Axelle</author></authors></contributors><titles><title>Identifying unknown android malware with feature extractions and classification techniques</title><secondary-title>Proceedings - 14th IEEE International Conference on Trust, Security and Privacy in Computing and Communications, TrustCom 2015</secondary-title></titles><periodical><full-title>Proceedings - 14th IEEE International Conference on Trust, Security and Privacy in Computing and Communications, TrustCom 2015</full-title></periodical><pages>182-189</pages><volume>1</volume><keywords><keyword>Android</keyword><keyword>Classification</keyword><keyword>Malware</keyword><keyword>Privacy</keyword><keyword>Security</keyword><keyword>Static analysis</keyword></keywords><dates><year>2015</year></dates><isbn>9781467379519</isbn><electronic-resource-num>10.1109/Trustcom.2015.373</electronic-resource-num><urls><pdf-urls><url>internal-pdf://ea100093e79e5d0d5cac47bf70e60f2042a9.pdf</url></pdf-urls></urls><abstract>—Android malware unfortunately have little dif-ficulty to sneak in marketplaces. While known malware and their variants are nowadays quite well detected by anti-virus scanners, new unknown malware, which are fundamentally different from others (e.g. &quot; 0-day &quot;), remain an issue. To discover such new malware, the SherlockDroid frame-work filters masses of applications and only keeps the most likely to be malicious for future inspection by anti-virus teams. Apart from crawling applications from marketplaces, SherlockDroid extracts code-level features, and then classifies unknown applications with Alligator. Alligator is a classifica-tion tool that efficiently and automatically combines several classification algorithms. To demonstrate the efficiency of our approach, we have extracted properties and classified over 600,000 applica-tions during two crawling campaigns in July 2014 and October 2014, with the detection of one new malware, Android/Odpa.A!tr.spy, and two new riskware. With other findings, this increases SherlockDroid's &quot; Hall of Shame &quot; to 9 totally unknown malware and potentially unwanted applications.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Maiorca, Davide</author><author>Ariu, Davide</author><author>Corona, Igino</author><author>Aresu, Marco</author><author>Giacinto, Giorgio</author></authors></contributors><titles><title>Stealth attacks: An extended insight into the obfuscation effects on Android malware</title><secondary-title>Computers and Security</secondary-title></titles><periodical><full-title>Computers and Security</full-title></periodical><pages>16-31</pages><volume>51</volume><keywords><keyword>Android</keyword><keyword>Bytecode</keyword><keyword>Dalvik</keyword><keyword>DexGuard</keyword><keyword>Entry points</keyword><keyword>Evasion</keyword><keyword>Malware</keyword><keyword>Obfuscation</keyword><keyword>Signatures</keyword><keyword>Strings</keyword></keywords><dates><year>2015</year></dates><isbn>0167-4048</isbn><electronic-resource-num>10.1016/j.cose.2015.02.007</electronic-resource-num><urls><pdf-urls><url>internal-pdf://ddac552e8d4f845d80d6ee63b6abb48fbfbc.pdf</url></pdf-urls></urls><abstract>In order to effectively evade anti-malware solutions, Android malware authors are progressively resorting to automatic obfuscation strategies. Recent works have shown, on small-scale experiments, the possibility of evading anti-malware engines by applying simple obfuscation transformations on previously detected malware samples. In this paper, we provide a large-scale experiment in which the detection performances of a high number of anti-malware solutions are tested against two different sets of malware samples that have been obfuscated according to different strategies. Moreover, we show that anti-malware engines search for possible malicious content inside assets and entry-point classes. We also provide a temporal analysis of the detection performances of anti-malware engines to verify if their resilience has improved since 2013. Finally, we show how, by manipulating the area of the Android executable that contains the strings used by the application, it is possible to deceive anti-malware engines so that they will identify legitimate samples as malware. On one hand, the attained results show that anti-malware systems have improved their resilience against trivial obfuscation techniques. On the other hand, more complex changes to the application executable have proved to be still effective against detection. Thus, we claim that a deeper static (or dynamic) analysis of the application is needed to improve the robustness of such systems.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Memon, Atif M.</author><author>Anwar, Ali</author></authors></contributors><titles><title>Colluding apps: Tomorrow's mobile malware threat</title><secondary-title>IEEE Security and Privacy</secondary-title></titles><periodical><full-title>IEEE Security and Privacy</full-title></periodical><pages>77-81</pages><volume>13</volume><issue>6</issue><keywords/><dates><year>2015</year></dates><electronic-resource-num>10.1109/MSP.2015.143</electronic-resource-num><urls><pdf-urls><url>internal-pdf://6c3e37f1e93077546e4601691000a9208f9c.pdf</url></pdf-urls></urls><abstract>As efforts to detect individual malicious apps intensify, a new threat emerges: groups of apps that collude such that each plays a small, undetectable role in a larger malicious operation. Colluding apps can make themselves virtually undetectable by repurposing shared device resources for covert communication. Some possible directions for detecting colluding apps are proposed.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Miller, Brad</author><author>Kantchelian, Alex</author><author>Tschantz, Michael Carl</author><author>Afroz, Sadia</author><author>Bachwani, Rekha</author><author>Faizullabhoy, Riyaz</author><author>Huang, Ling</author><author>Shankar, Vaishaal</author><author>Wu, Tony</author><author>Yiu, George</author><author>Joseph, Anthony D.</author><author>Tygar, J. D.</author></authors></contributors><titles><title>Reviewer integration and performance measurement for malware detection</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>122-141</pages><volume>9721</volume><issue>June</issue><keywords/><dates><year>2016</year></dates><isbn>9783319406664</isbn><electronic-resource-num>10.1007/978-3-319-40667-1_7</electronic-resource-num><urls><pdf-urls><url>internal-pdf://79c4d459ff942c4d2064c160c0415c221b2c.pdf</url></pdf-urls></urls></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>B, Elias Athanasopoulos</author><author>Kemerlis, Vasileios P</author><author>Portokalidis, Georgios</author></authors></contributors><titles><title>NaClDroid : Native Code Isolation</title></titles><periodical/><pages>422-439</pages><volume>1</volume><keywords><keyword>sfi</keyword></keywords><isbn>9783319457444</isbn><electronic-resource-num>10.1007/978-3-319-45744-4</electronic-resource-num><urls><pdf-urls><url>internal-pdf://aa31e4689c9c3c921bdc3fb31ca8f6e057f9.pdf</url></pdf-urls></urls></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Qian, Quan</author><author>Cai, Jing</author><author>Xie, Mengbo</author><author>Zhang, Rui</author></authors></contributors><titles><title>Malicious behavior analysis for android applications</title><secondary-title>International Journal of Network Security</secondary-title></titles><periodical><full-title>International Journal of Network Security</full-title></periodical><pages>182-192</pages><volume>18</volume><issue>1</issue><keywords><keyword>Android security</keyword><keyword>Malicious behavior monitoring</keyword><keyword>Permissions filtering</keyword><keyword>Privacy leakage</keyword></keywords><dates><year>2016</year></dates><urls><pdf-urls><url>internal-pdf://e2e7bf56f5e8ff227a4a2370caec1e4c494f.pdf</url></pdf-urls></urls><abstract>Android, as a modern popular open source mobile platform, makes its security issues more prominent, especially in user privacy leakage. In this paper, we proposed a twostep model which combines static and dynamic analysis approaches. During the static analysis, permission combination matrix is used to determine whether an application has potential risks. For those suspicious applications, based on the reverse engineering, embed monitoring Smali code for those sensitive APIs such as sending SMS, accessing user location, device ID, phone number, etc. From experiments, it shows that almost 26% applications in Android market have privacy leakage risks. And our proposed method is feasible and effective for monitoring these kind of malicious behavior.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Fredrikson, Matt</author><author>Jha, Somesh</author><author>Christodorescu, Mihai</author><author>Sailer, Reiner</author><author>Yan, Xifeng</author></authors></contributors><titles><title>Synthesizing Near-Optimal Malware Specifications from Suspicious Behaviors</title><secondary-title>2010 IEEE Symposium on Security and Privacy</secondary-title></titles><periodical><full-title>2010 IEEE Symposium on Security and Privacy</full-title></periodical><pages>45-60</pages><keywords/><dates><year>2010</year></dates><isbn>978-1-4244-6894-2</isbn><electronic-resource-num>10.1109/SP.2010.11</electronic-resource-num><urls><pdf-urls><url>internal-pdf://3d307e35dc9bea3711ae4cb8c23ff083601f.pdf</url></pdf-urls><web-urls><url>http://ieeexplore.ieee.org/document/5504788/</url></web-urls></urls></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Shao, Yuru</author><author>Ott, Jason</author><author>Chen, Qi Alfred</author><author>Qian, Zhiyun</author><author>Mao, Z Morley</author></authors></contributors><titles><title>Kratos : Discovering Inconsistent Security Policy Enforcements in the Android Framework</title><secondary-title>NDSS 2016 (23 nd Network and Distributed System Security Symposium)</secondary-title></titles><periodical><full-title>NDSS 2016 (23 nd Network and Distributed System Security Symposium)</full-title></periodical><pages>1</pages><issue>February</issue><keywords/><dates><year>2016</year></dates><isbn>189156241X</isbn><electronic-resource-num>10.14722/ndss.2016.23046</electronic-resource-num><urls><pdf-urls><url>internal-pdf://d460595edc46a3d7009531c60080b7c98a2d.pdf</url></pdf-urls></urls><abstract>—The Android framework utilizes a permission-based security model, which is essentially a variation of the ACL-based access control mechanism. This security model provides con-trolled access to various system resources. Access control systems are known to be vulnerable to anomalies in security policies, such as inconsistency. In this work, we focus on inconsistent security enforcement within the Android framework, motivated by the recent work which discovered such vulnerabilities. They include stealthily taking pictures in the background and recording keystrokes without any permissions, posing security and privacy risks to Android users. Identifying such inconsistencies is gener-ally difficult, especially in complicated and large codebases such as the Android framework. Our work is the first to propose a methodology to system-atically uncover the inconsistency in security policy enforcement in Android. We do not assume Android's security policies are known and focus only on inconsistent enforcement. We propose Kratos, a tool that leverages static analysis to build a precise call graph for identifying paths that allow third-party applications with insufficient privilege to access sensitive resources, violating security policies. Kratos is designed to analyze any Android sys-tem, including vendor-customized versions. Using Kratos, we have conservatively discovered at least fourteen inconsistent security enforcement cases that can lead to security check circumvention vulnerabilities across important and popular services such as the SMS service and the Wi-Fi service, incurring impact such as privilege escalation, denial of service, and soft reboot. Our findings also provide useful insights on how to proactively prevent such security enforcement inconsistency within Android.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Generic">31</ref-type><titles><title>2ba5ef7339058829ddb0e9a8289b5a275c48.pdf</title></titles><periodical/><keywords/><urls><pdf-urls><url>internal-pdf://2ba5ef7339058829ddb0e9a8289b5a275c48.pdf</url></pdf-urls></urls></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bugiel, Sven</author><author>Davi, Lucas</author><author>Dmitrienko, Alexandra</author><author>Fischer, Thomas</author><author>Sadeghi, Ahmad-Reza</author><author>Shastry, Bhargava</author></authors></contributors><titles><title>Towards taming privilege-escalation attacks on Android</title><secondary-title>ISOC Network and Distributed System Security Symposium</secondary-title></titles><periodical><full-title>ISOC Network and Distributed System Security Symposium</full-title></periodical><pages>18-25</pages><volume>17</volume><keywords/><dates><year>2012</year></dates><urls><pdf-urls><url>internal-pdf://2f8160dc899e66976b9887efa1d4a544cd56(1).pdf</url></pdf-urls><web-urls><url>http://www.trust.informatik.tu-darmstadt.de/fileadmin/user_upload/Group_TRUST/PubsPDF/NDSS_2012_Towards_Taming_Privilege-Escalation_Attacks_on_Android.pdf</url></web-urls></urls><abstract>Android’s security framework has been an appealing subject of research in the last few years. Android has been shown to be vulnerable to application-level privilege escalation attacks, such as confused deputy attacks, and more recently, attacks by colluding applications. While most of the proposed approaches aim at solving confused deputy attacks, there is still no solution that simultaneously addresses collusion attacks. In this paper, we investigate the problem of designing and implementing a practical security framework for Android to protect against confused deputy and collusion attacks. We realize that defeating collusion attacks calls for a rather system-centric solution as opposed to application-dependent policy enforcement. To support our design decisions, we conduct a heuristic analysis of Android’s system behavior (with popular apps) to identify attack patterns, classify different adversary models, and point out the challenges to be tackled. Then we propose a solution for a system-centric and policy-driven runtime monitoring of communication channels between applications at multiple layers: 1) at the middleware we control IPCs between applications and indirect communication via Android system components. Moreover, inspired by the approach in QUIRE, we establish semantic links between IPCs and enable the reference monitor to verify the call-chain; 2) at the kernel level we realize mandatory access control on the file system (including Unix domain sockets) and local Internet sockets. To allow for runtime, dynamic low-level policy enforcement, we provide a callback channel between the kernel and the middleware. Finally, we evaluate the efficiency and effectiveness of our framework on known confused deputy and collusion attacks, and discuss future directions.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Yang, Shengqian</author><author>Yan, Dacong</author><author>Wu, Haowei</author><author>Wang, Yan</author><author>Rountev, Atanas</author></authors></contributors><titles><title>Static control-flow analysis of user-driven callbacks in android applications</title><secondary-title>Proceedings - International Conference on Software Engineering</secondary-title></titles><periodical><full-title>Proceedings - International Conference on Software Engineering</full-title></periodical><pages>89-99</pages><volume>1</volume><keywords/><dates><year>2015</year></dates><isbn>9781479919345</isbn><electronic-resource-num>10.1109/ICSE.2015.31</electronic-resource-num><urls><pdf-urls><url>internal-pdf://2a1d226a473f48d71bee76494efee3cbb0ed.pdf</url></pdf-urls></urls><abstract>Android software presents many challenges for static program analysis. In this work we focus on the fundamental problem of static control-flow analysis. Traditional analyses cannot be directly applied to Android because the applications are framework-based and event-driven. We consider user-event-driven components and the related sequences of callbacks from the Android framework to the application code, both for lifecycle callbacks and for event handler callbacks. We propose a program representation that captures such callback sequences. This representation is built using context-sensitive static analysis of callback methods. The analysis performs graph reachability by traversing context-compatible interprocedural control-flow paths and identifying statements that may trigger callbacks, as well as paths that avoid such statements. We also develop a client analysis that builds a static model of the application's GUI. Experimental evaluation shows that this context-sensitive approach leads to substantial precision improvements, while having practical cost.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Jeon, Jinseong</author><author>Micinski, Kristopher K</author><author>Vaughan, Jeffrey A</author><author>Fogel, Ari</author><author>Foster, Jeffrey S</author><author>Millstein, Todd</author></authors></contributors><titles><title>Dr. Android and Mr. Hide: Fine-grained Permissions in Android Applications</title></titles><periodical/><keywords><keyword>android</keyword><keyword>binary transformation</keyword><keyword>fine-grained permissions</keyword></keywords><isbn>9781450316668</isbn><urls><pdf-urls><url>internal-pdf://0a3027a651ce3992e6506d0767c680755c1d.pdf</url></pdf-urls><web-urls><url>http://www.cs.umd.edu/~jfoster/papers/spsm12.pdf</url></web-urls></urls></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bugiel, Sven</author><author>Heuser, Stephan</author><author>Sadeghi, Ahmad-Reza</author></authors></contributors><titles><title>Flexible and fine-grained mandatory access control on Android for diverse security and privacy policies</title><secondary-title>Proceedings of the 22nd USENIX Security Symposium</secondary-title></titles><periodical><full-title>Proceedings of the 22nd USENIX Security Symposium</full-title></periodical><pages>131-146</pages><keywords/><dates><year>2013</year></dates><isbn>9781931971034</isbn><urls><pdf-urls><url>internal-pdf://1ed733f1e6181415266fd9e162427f8ee739.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2534766.2534778</url></web-urls></urls><abstract>In this paper we tackle the challenge of providing a generic security architecture for the Android OS that can serve as a flexible and effective ecosystem to instantiate different security solutions. In contrast to prior work our security architecture, termed FlaskDroid, provides mandatory access control simultaneously on both Android's middleware and kernel layers. The alignment of policy enforcement on these two layers is non-trivial due to their completely different semantics. We present an efficient policy language (inspired by SELinux) tailored to the specifics of Android's middleware semantics. We show the flexibility of our architecture by policy-driven instantiations of selected security models such as the existing work Saint as well as a new privacy-protecting, user-defined and fine-grained per-app access control model. Other possible instantiations include phone booth mode, or dual persona phone. Finally we evaluate our implementation on SE Android 4.0.4 illustrating its efficiency and effectiveness.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Portokalidis, Georgios</author><author>Homburg, Philip</author><author>Anagnostakis, Kostas</author><author>Bos, Herbert</author></authors></contributors><titles><title>Paranoid Android: Versatile Protection For Smartphones</title><secondary-title>Annual Computer Security Applications Conference (ACSAC)</secondary-title></titles><periodical><full-title>Annual Computer Security Applications Conference (ACSAC)</full-title></periodical><pages>347-356</pages><keywords><keyword>android</keyword><keyword>decoupled security</keyword><keyword>smartphones</keyword></keywords><dates><year>2010</year></dates><isbn>9781450301336</isbn><electronic-resource-num>10.1145/1920261.1920313</electronic-resource-num><urls><pdf-urls><url>internal-pdf://16c3c09344b150da740a5f22586a06452ea3.pdf</url></pdf-urls><web-urls><url>http://doi.acm.org/10.1145/1920261.1920313%5Cnhttp://dl.acm.org/citation.cfm?id=1920313</url></web-urls></urls><abstract>#ParanoidAndroid. They do replayes on servers. They do the detection itself on the servers, so that they can apply multiple detection techniques. They show that this is feasible.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bianchi, Antonio</author><author>Corbetta, Jacopo</author><author>Invernizzi, Luca</author><author>Fratantonio, Yanick</author><author>Kruegel, Christopher</author><author>Vigna, Giovanni</author></authors></contributors><titles><title>What the app is that? Deception and countermeasures in the android user interface</title><secondary-title>Proceedings - IEEE Symposium on Security and Privacy</secondary-title></titles><periodical><full-title>Proceedings - IEEE Symposium on Security and Privacy</full-title></periodical><pages>931-948</pages><volume>2015-July</volume><keywords><keyword>mobile-security</keyword><keyword>static-analysis</keyword><keyword>usable-security</keyword></keywords><dates><year>2015</year></dates><isbn>9781467369497</isbn><electronic-resource-num>10.1109/SP.2015.62</electronic-resource-num><urls><pdf-urls><url>internal-pdf://28a329dc961559005f411965d1ba51e10599.pdf</url></pdf-urls></urls><abstract>Mobile applications are part of the everyday lives of billions of people, who often trust them with sensitive information. These users identify the currently focused app solely by its visual appearance, since the GUIs of the most popular mobile OSes do not show any trusted indication of the app origin. In this paper, we analyze in detail the many ways in which Android users can be confused into misidentifying an app, thus, for instance, being deceived into giving sensitive information to a malicious app. Our analysis of the Android platform APIs, assisted by an automated state-exploration tool, led us to identify and categorize a variety of attack vectors (some previously known, others novel, such as a non-escapable fullscreen overlay) that allow a malicious app to surreptitiously replace or mimic the GUI of other apps and mount phishing and click-jacking attacks. Limitations in the system GUI make these attacks significantly harder to notice than on a desktop machine, leaving users completely defenseless against them. To mitigate GUI attacks, we have developed a two-layer defense. To detectmalicious apps at themarket level, we developed a tool that uses static analysis to identify code that could launch GUI confusion attacks. We show how this tool detects apps that might launch GUI attacks, such as ransomware programs. Since these attacks are meant to confuse humans, we have also designed and implemented an on-device defense that addresses the underlying issue of the lack of a security indicator in the Android GUI. We add such an indicator to the system navigation bar; this indicator securely informs users about the origin of the app with which they are interacting (e.g., the PayPal app is backed by “PayPal, Inc.”). We demonstrate the effectiveness of our attacks and the proposed on-device defense with a user study involving 308 human subjects, whose ability to detect the attacks increased significantly when using a system equipped with our defense.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bugiel, Sven</author><author>Davi, Lucas</author><author>Dmitrienko, Alexandra</author><author>Heuser, Stephan</author><author>Sadeghi, Ahmad-Reza</author><author>Shastry, Bhargava</author></authors></contributors><titles><title>Practical and lightweight domain isolation on Android</title><secondary-title>Proceedings of the 1st ACM workshop on Security and privacy in smartphones and mobile devices - SPSM '11</secondary-title></titles><periodical><full-title>Proceedings of the 1st ACM workshop on Security and privacy in smartphones and mobile devices - SPSM '11</full-title></periodical><pages>51</pages><keywords/><dates><year>2011</year></dates><isbn>9781450310000</isbn><electronic-resource-num>10.1145/2046614.2046624</electronic-resource-num><urls><pdf-urls><url>internal-pdf://5b9e067073322bd9c2c4ba1646f505af9c12.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2046614.2046624</url></web-urls></urls><abstract>TrustDroid</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhang, Tao</author><author>Antunes, Helder</author><author>Aggarwal, Siddhartha</author></authors></contributors><titles><title>Defending connected vehicles against malware: Challenges and a solution framework</title><secondary-title>IEEE Internet of Things Journal</secondary-title></titles><periodical><full-title>IEEE Internet of Things Journal</full-title></periodical><pages>10-21</pages><volume>1</volume><issue>1</issue><keywords><keyword>Antivirus</keyword><keyword>connected cars</keyword><keyword>connected vehicles</keyword><keyword>intelligent transportation system (ITS) malware de</keyword><keyword>security</keyword><keyword>threat defense</keyword><keyword>vehicle communications</keyword><keyword>vehicle networks</keyword><keyword>virus</keyword></keywords><dates><year>2014</year></dates><isbn>2327-4662 VO  - 1</isbn><electronic-resource-num>10.1109/JIOT.2014.2302386</electronic-resource-num><urls><pdf-urls><url>internal-pdf://32f8757914617cc974beb884e69b878f47b7.pdf</url></pdf-urls></urls><abstract>Vehicles face growing security threats as they become increasingly connected with the external world. Hackers, researchers, and car hobbyists have compromised security keys used by the electronic control units (ECUs) on vehicles, modified ECU software, and hacked wireless transmissions from vehicle key fobs and tire monitoring sensors, using low-cost commercially available tools. However, the most damaging security threats to vehicles are only emerging. One such threat is malware, which can infect vehicles in a variety of ways and cause severe consequences. Defending vehicles against malware attacks must address many unique challenges that have not been well addressed in other types of networks. This paper identifies those vehicle-specific challenges, discusses existing solutions and their limitations, and presents a cloud-assisted vehicle malware defense framework that can address these challenges.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wei, Xuetao</author><author>Gurkok, Cem</author></authors></contributors><titles><title>ProfileDroid : Multi-layer Profiling of Android Applications Categories and Subject Descriptors</title><secondary-title>Network and System Security</secondary-title></titles><periodical><full-title>Network and System Security</full-title></periodical><pages>137-148</pages><keywords><keyword>android apps</keyword><keyword>cloud computing</keyword><keyword>cloud layers</keyword><keyword>cloud security</keyword><keyword>data storage</keyword><keyword>general risks</keyword><keyword>google android</keyword><keyword>hybrid</keyword><keyword>legal risks</keyword><keyword>monitoring</keyword><keyword>private</keyword><keyword>profiling</keyword><keyword>public</keyword><keyword>sys-</keyword><keyword>virtual private</keyword></keywords><dates><year>2014</year></dates><isbn>9780124166899</isbn><electronic-resource-num>10.1016/B978-0-12-416689-9.00004-6</electronic-resource-num><urls><pdf-urls><url>internal-pdf://7ebd5d202738756a638f4f23d252a638713d.pdf</url></pdf-urls><web-urls><url>http://www.sciencedirect.com/science/article/pii/B9780124166899000046</url></web-urls></urls><abstract>Cloud computing is a method of delivering computing resources. Cloud computing services ranging from data storage and processing to software, such as customer relationship management systems, are now available instantly and on demand. In times of financial and economic hardship, this new low cost of ownership model for computing has gotten lots of attention and is seeing increasing global investment. Generally speaking, cloud computing provides implementation agility, lower capital expenditure, location independence, resource pooling, broad network access, reliability, scalability, elasticity, and ease of maintenance. While in most cases cloud computing can improve security due to ease of management, the provider’s lack of knowledge and experience can jeopardize customer environments. This chapter aims to discuss various cloud computing environments and methods to make them more secure for hosting companies and their customers.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Luo, Tongbo</author><author>Hao, Hao</author><author>Du, Wenliang</author><author>Wang, Yifei</author><author>Yin, Heng</author></authors></contributors><titles><title>Attacks on WebView in the Android system</title><secondary-title>Acsac</secondary-title></titles><periodical><full-title>Acsac</full-title></periodical><pages>343</pages><keywords><keyword>Android</keyword><keyword>WebView</keyword></keywords><dates><year>2011</year></dates><isbn>9781450306720</isbn><electronic-resource-num>10.1145/2076732.2076781</electronic-resource-num><urls><pdf-urls><url>internal-pdf://7a7c74aa1eca89fa5a5449119d413e978c8c.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2076732.2076781</url></web-urls></urls><abstract>WebView is an essential component in both Android and iOS platforms, enabling smartphone and tablet apps to embed a simple but powerful browser inside them. To achieve a bet- ter interaction between apps and their embedded“browsers”, WebView provides a number of APIs, allowing code in apps to invoke and be invoked by the JavaScript code within the web pages, intercept their events, and modify those events. Using these features, apps can become customized “browsers” for their intended web applications. Currently, in the Android market, 86 percent of the top 20 most down- loaded apps in 10 diverse categories use WebView. The design ofWebView changes the landscape of theWeb, especially from the security perspective. Two essential pieces of the Web’s security infrastructure are weakened if Web- View and its APIs are used: the Trusted Computing Base (TCB) at the client side, and the sandbox protection im- plemented by browsers. As results, many attacks can be launched either against apps or by them. The objective of this paper is to present these attacks, analyze their funda- mental</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wang, Yifei</author><author>Hariharan, Srinivas</author><author>Zhao, Chenxi</author><author>Liu, Jiaming</author><author>Du, Wenliang</author></authors></contributors><titles><title>Compac : Enforce Component-Level Access Control in</title></titles><periodical/><keywords/><dates><year>2011</year></dates><isbn>9781450306720</isbn><urls><pdf-urls><url>internal-pdf://234f0a953ca5b2c22172631f2850dac9c0fc.pdf</url></pdf-urls></urls></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Conti, Mauro</author><author>Mancini, Luigi V.</author><author>Spolaor, Riccardo</author><author>Verde, Nino V.</author></authors></contributors><titles><title>Can't you hear me knocking: Identification of user actions on Android apps via traffic analysis</title></titles><periodical/><keywords/><dates><year>2014</year></dates><isbn>9781450331913</isbn><electronic-resource-num>10.1145/2699026.2699119</electronic-resource-num><urls><pdf-urls><url>internal-pdf://4a083c0442879aacbda6b46ad6944a56391f.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1407.7844</url></web-urls></urls><abstract>While smartphone usage become more and more pervasive, people start also asking to which extent such devices can be maliciously exploited as &quot;tracking devices&quot;. The concern is not only related to an adversary taking physical or remote control of the device (e.g., via a malicious app), but also to what a passive adversary (without the above capabilities) can observe from the device communications. Work in this latter direction aimed, for example, at inferring the apps a user has installed on his device, or identifying the presence of a specific user within a network. In this paper, we move a step forward: we investigate to which extent it is feasible to identify the specific actions that a user is doing on his mobile device, by simply eavesdropping the device's network traffic. In particular, we aim at identifying actions like browsing someone's profile on a social network, posting a message on a friend's wall, or sending an email. We design a system that achieves this goal starting from encrypted TCP/IP packets: it works through identification of network flows and application of machine learning techniques. We did a complete implementation of this system and run a thorough set of experiments, which show that it can achieve accuracy and precision higher than 95%, for most of the considered actions.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Kelley, Patrick Gage</author><author>Consolvo, Sunny</author><author>Cranor, Lorrie Faith</author><author>Jung, Jaeyeon</author><author>Sadeh, Norman</author><author>Wetherall, David</author></authors></contributors><titles><title>A Conundrum of Permissions:</title></titles><periodical/><pages>1-12</pages><keywords><keyword>android</keyword><keyword>applications</keyword><keyword>information design</keyword><keyword>missions</keyword><keyword>per-</keyword><keyword>privacy</keyword><keyword>security</keyword><keyword>smartphone</keyword></keywords><dates><year>2012</year></dates><urls><pdf-urls><url>internal-pdf://83c872ef314acf2915d41a7f49bbdeeec5ee.pdf</url></pdf-urls></urls></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Li, Huoran</author><author>Lu, Xuan</author><author>Liu, Xuanzhe</author><author>Xie, Tao</author><author>Bian, Kaigui</author><author>Lin, Felix Xiaozhu</author><author>Mei, Qiaozhu</author><author>Feng, Feng</author></authors></contributors><titles><title>Characterizing Smartphone Usage Patterns from Millions of Android Users</title><secondary-title>Proceedings of the 2015 ACM Conference on Internet Measurement Conference</secondary-title></titles><periodical><full-title>Proceedings of the 2015 ACM Conference on Internet Measurement Conference</full-title></periodical><pages>459-472</pages><keywords><keyword>android apps</keyword><keyword>app management</keyword><keyword>app per- formance</keyword><keyword>app popularity</keyword><keyword>app stores</keyword></keywords><dates><year>2015</year></dates><isbn>978-1-4503-3848-6</isbn><electronic-resource-num>10.1145/2815675.2815686</electronic-resource-num><urls><pdf-urls><url>internal-pdf://4b373eec93835c7edade424dda978d4c0bf6(1).pdf</url></pdf-urls><web-urls><url>http://doi.acm.org/10.1145/2815675.2815686</url></web-urls></urls><abstract>The prevalence of smart devices has promoted the popular-ity of mobile applications (a.k.a. apps) in recent years. A number of interesting and important questions remain unan-swered, such as why a user likes/dislikes an app, how an app becomes popular or eventually perishes, how a user selects apps to install and interacts with them, how frequently an app is used and how much traffic it generates, etc. This paper presents an empirical analysis of app usage behaviors collected from millions of users of Wandoujia, a leading An-droid app marketplace in China. The dataset covers two types of user behaviors of using over 0.2 million Android apps, including (1) app management activities (i.e., installa-tion, updating, and uninstallation) of over 0.8 million unique users and (2) app network traffic from over 2 million unique users. We explore multiple aspects of such behavior data and present interesting patterns of app usage. The results provide many useful implications to the developers, users, and disseminators of mobile apps.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Felt, Ap</author><author>Ha, Elizabeth</author><author>Egelman, Serge</author><author>Haney, Ariel</author></authors></contributors><titles><title>Android permissions: User attention, comprehension, and behavior</title><secondary-title>Proc. of SOUPS</secondary-title></titles><periodical><full-title>Proc. of SOUPS</full-title></periodical><pages>1-14</pages><keywords><keyword>android</keyword><keyword>mobile phones</keyword><keyword>smartphones</keyword><keyword>usable security</keyword></keywords><dates><year>2012</year></dates><isbn>9781450315326</isbn><electronic-resource-num>10.1145/2335356.2335360</electronic-resource-num><urls><pdf-urls><url>internal-pdf://657e2fe6358a8bd38196454b78acad6f573e.pdf</url></pdf-urls><web-urls><url>http://www.adrienneporterfelt.com/blog/?p=433%5Cnhttp://dl.acm.org/citation.cfm?id=2335360%5Cnhttp://dl.acm.org/citation.cfm?id=2335360</url></web-urls></urls><abstract>Androids permission system is intended to inform users about the risks of installing applications. When a user installs an application, he or she has the opportunity to review the applications permission requests and cancel the installation if the permissions are excessive or objectionable. We examine whether the Android permission system is effective at warning users. In particular, we evaluate whether Android users pay attention to, understand, and act on permission information during installation. We performed two usability studies: an Internet survey of 308 Android users, and a laboratory study where we interviewed and observed 25 Android users. Study participants displayed low attention and comprehension rates: both the Internet survey and laboratory study found that 17% of people paid attention to permissions during installation, and only 3% of Internet survey respondents could correctly answer all three permission comprehension questions. This indicates that current Android permission warnings do not help most users make correct security decisions. However, a notable minority of users demonstrated both awareness of permission warnings and reasonable rates of comprehension. We present recommendations for improving user attention and comprehension, as well as identify open challenges.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Qu, Zhengyang</author><author>Rastogi, Vaibhav</author><author>Zhang, Xinyi</author><author>Chen, Yan</author><author>Zhu, Tiantian</author><author>Chen, Zhong</author></authors></contributors><titles><title>AutoCog: Measuring the Description-to-permission Fidelity in Android Applications</title><secondary-title>Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security - CCS '14</secondary-title></titles><periodical><full-title>Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security - CCS '14</full-title></periodical><pages>1354-1365</pages><keywords><keyword>Android</keyword><keyword>Google play</keyword><keyword>Machine learning</keyword><keyword>Mobile</keyword><keyword>Natural language processing</keyword><keyword>Permissions</keyword></keywords><dates><year>2014</year></dates><isbn>9781450329576</isbn><electronic-resource-num>10.1145/2660267.2660287</electronic-resource-num><urls><pdf-urls><url>internal-pdf://53af068d06eb583f94d640733d43cbd0799f.pdf</url></pdf-urls><web-urls><url>http://www.scopus.com/inward/record.url?eid=2-s2.0-84910606183&amp;partnerID=tZOtx3y1</url></web-urls></urls><abstract>The booming popularity of smartphones is partly a result of application markets where users can easily download wide range of third-party applications. However, due to the open nature of markets, especially on Android, there have been several privacy and security concerns with these applications. On Google Play, as with most other markets, users have direct access to natural-language descriptions of those applications, which give an intuitive idea of the functionality including the security-related information of those applications. Google Play also provides the permissions requested by applications to access security and privacy-sensitive APIs on the devices. Users may use such a list to evaluate the risks of using these applications. To best assist the end users, the descriptions should reflect the need for permissions, which we term description-to-permission fidelity. In this paper, we present a system AutoCog to automatically assess description-to-permission fidelity of applications. AutoCog employs state-of-the-art techniques in natural language processing and our own learning-based algorithm to relate description with permissions. In our evaluation, AutoCog outperforms other related work on both performance of detection and ability of generalization over various permissions by a large extent. On an evaluation of eleven permissions, we achieve an average precision of 92.6% and an average recall of 92.0%. Our large-scale measurements over 45,811 applications demonstrate the severity of the problem of low description-to-permission fidelity. AutoCog helps bridge the long-lasting usability gap between security techniques and average users. Copyright 2014 ACM.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Yang, Zhemin</author><author>Yang, Min</author><author>Zhang, Yuan</author><author>Gu, Guofei</author><author>Ning, Peng</author><author>Wang, X. Sean</author></authors></contributors><titles><title>AppIntent: analyzing sensitive data transmission in android for privacy leakage detection</title><secondary-title>Proceedings of the 2013 ACM SIGSAC conference on Computer &amp; communications security - CCS '13</secondary-title></titles><periodical><full-title>Proceedings of the 2013 ACM SIGSAC conference on Computer &amp; communications security - CCS '13</full-title></periodical><pages>1043-1054</pages><keywords><keyword>android security</keyword><keyword>privacy leakage detection</keyword><keyword>symbolic exe-</keyword></keywords><dates><year>2013</year></dates><isbn>9781450324779</isbn><electronic-resource-num>10.1145/2508859.2516676</electronic-resource-num><urls><pdf-urls><url>internal-pdf://99f2a617d7a2ba94cc88c48a81a95f6d1db2.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2508859.2516676</url></web-urls></urls><abstract>Android phones often carry personal information, attracting malicious developers to embed code in Android applications to steal sensitive data. With known techniques in the literature, one may easily determine if sensitive data is being transmitted out of an Android phone. However, transmission of sensitive data in itself does not necessarily indicate privacy leakage; a better indicator may be whether the transmission is by user intention or not. When transmission is not intended by the user, it is more likely a privacy leakage. The problem is how to determine if transmission is user intended. As a first solution in this space, we present a new analysis framework called AppIntent. For each data transmission, AppIntent can efficiently provide a sequence of GUI manipulations corresponding to the sequence of events that lead to the data transmission, thus helping an analyst to determine if the data transmission is user intended or not. The basic idea is to use symbolic execution to generate the aforementioned event sequence, but straightforward symbolic execution proves to be too time-consuming to be practical. A major innovation in AppIntent is to leverage the unique Android execution model to reduce the search space without sacrificing code coverage. We also present an evaluation of AppIntent with a set of 750 malicious apps, as well as 1,000 top free apps from Google Play. The results show that AppIntent can effectively help separate the apps that truly leak user privacy from those that do not.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Li, Li</author><author>Bartel, Alexandre</author><author>Bissyandé, Tegawendé F</author><author>Klein, Jacques</author></authors></contributors><titles><title>Session 9 Security and Privacy IccTA : Detecting Inter-Component Privacy Leaks in Android Apps</title></titles><periodical/><pages>1-11</pages><keywords/><urls><pdf-urls><url>internal-pdf://43eb00439edf76886d22b78a3e24c42ff7e5.pdf</url></pdf-urls></urls></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wei, Xuetao</author><author>Gomez, Lorenzo</author><author>Neamtiu, Iulian</author><author>Faloutsos, Michalis</author></authors></contributors><titles><title>Permission Evolution in the Android Ecosystem</title><secondary-title>ACSAC '12 Proceedings of the 28th Annual Computer Security Applications Conference</secondary-title></titles><periodical><full-title>ACSAC '12 Proceedings of the 28th Annual Computer Security Applications Conference</full-title></periodical><pages>31-40</pages><issue>April 2009</issue><keywords/><dates><year>2012</year></dates><isbn>9781450313124</isbn><electronic-resource-num>10.1145/2420950.2420956</electronic-resource-num><urls><pdf-urls><url>internal-pdf://63a379c8f0ee1d6fc2d36c0f74374ea53ae6.pdf</url></pdf-urls></urls><abstract>Android uses a system of permissions to control how apps access sensitive devices and data stores. Unfortunately, we have little understanding of the evolution of Android permissions since their inception (2008). Is the permission model allowing the Android platform and apps to become more secure? In this paper, we present arguably the first longterm study that is centered around both permission evolution and usage, of the entire Android ecosystem (platform, third-party apps, and pre-installed apps). First, we study the Android platform to see how the set of permissions has evolved; we find that this set tends to grow, and the growth is not aimed towards providing finer-grained permissions but rather towards offering access to new hardware features; a particular concern is that the set of Dangerous permissions is increasing. Second, we study Android third-party and pre-installed apps to examine whether they follow the principle of least privilege. We find that this is not the case, as an increasing percentage of the popular apps we study are overprivileged. In addition, the apps tend to use more permissions over time. Third, we highlight some concerns with pre-installed apps, e.g., apps that vendors distribute with the phone; these apps have access to, and use, a larger set of higher-privileged permissions which pose security and privacy risks. At the risk of oversimplification, we state that the Android ecosystem is not becoming more secure from the user’s point of view. Our study derives four recommendations for improving the Android security and suggests the need to revisit the practices and policies of the ecosystem.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Mantri, Sushil</author><author>Sundararajan, Muthu Selvan</author></authors></contributors><titles><title>Android Application Security</title><secondary-title>Jetir (Issn-2349-5162)</secondary-title></titles><periodical><full-title>Jetir (Issn-2349-5162)</full-title></periodical><pages>635-637</pages><volume>1</volume><issue>7</issue><keywords><keyword>android-os</keyword><keyword>app security</keyword><keyword>application retargeting</keyword><keyword>mos - mobile operating</keyword><keyword>optimization</keyword><keyword>system</keyword></keywords><dates><year>2014</year></dates><isbn>9781849515603</isbn><electronic-resource-num>10.1007/978-3-319-47812-8</electronic-resource-num><urls><pdf-urls><url>internal-pdf://a2d336a65f94246b67dcd2b4484ce680b4d1.pdf</url></pdf-urls></urls><abstract>#Appsealer. They do patching of component-hijacking vulnerabilities. Example: an attacker might specify a URL (in an intent) used by the application. They modify bytecode to do taint analysis. if something reaches the sink. boom!</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhou, Wu</author><author>Zhou, Yajin</author><author>Jiang, Xuxian</author><author>Ning, Peng</author></authors></contributors><titles><title>Detecting repackaged smartphone applications in third-party android marketplaces</title><secondary-title>Proceedings of the second ACM conference on Data and Application Security and Privacy - CODASKY '12</secondary-title></titles><periodical><full-title>Proceedings of the second ACM conference on Data and Application Security and Privacy - CODASKY '12</full-title></periodical><pages>317-326</pages><keywords><keyword>privacy and security</keyword><keyword>repackaging</keyword><keyword>smartphones</keyword></keywords><dates><year>2012</year></dates><isbn>9781450310918</isbn><electronic-resource-num>10.1145/2133601.2133640</electronic-resource-num><urls><pdf-urls><url>internal-pdf://43c63a678016cb9b21c074c992dd237c29f1.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2133601.2133640%5Cnhttp://dl.acm.org/citation.cfm?doid=2133601.2133640</url></web-urls></urls><abstract>Recent years have witnessed incredible popularity and adoption of smartphones and mobile devices, which is accompanied by large amount and wide variety of feature-rich smartphone applications. These smartphone applications (or apps), typically organized in different application marketplaces, can be conveniently browsed by mobile users and then simply clicked to install on a variety of mobile devices. In practice, besides the official marketplaces from platform vendors (e.g., Google and Apple), a number of third-party alternative marketplaces have also been created to host thousands of apps (e.g., to meet regional or localization needs). To maintain and foster a hygienic smartphone app ecosystem, there is a need for each third-party marketplace to offer quality apps to mobile users. In this paper, we perform a systematic study on six popular Android-based third-party marketplaces. Among them, we find a common &quot;in-the-wild&quot; practice of repackaging legitimate apps (from the official Android Market) and distributing repackaged ones via third-party marketplaces. To better understand the extent of such practice, we implement an app similarity measurement system called DroidMOSS that applies a fuzzy hashing technique to effectively localize and detect the changes from app-repackaging behavior. The experiments with DroidMOSS show a worrisome fact that 5% to 13% of apps hosted on these studied marketplaces are repackaged. Further manual investigation indicates that these repackaged apps are mainly used to replace existing in-app advertisements or embed new ones to &quot;steal&quot; or re-route ad revenues. We also identify a few cases with planted backdoors or malicious payloads among repackaged apps. The results call for the need of a rigorous vetting process for better regulation of third-party smartphone application marketplaces.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Fahl, Sascha</author><author>Harbach, Marian</author><author>Muders, Thomas</author><author>Smith, Matthew</author><author>Baumgärtner, Lars</author><author>Freisleben, Bernd</author></authors></contributors><titles><title>Why eve and mallory love android</title><secondary-title>Proceedings of the 2012 ACM conference on Computer and communications security - CCS '12</secondary-title></titles><periodical><full-title>Proceedings of the 2012 ACM conference on Computer and communications security - CCS '12</full-title></periodical><pages>50</pages><keywords><keyword>android</keyword><keyword>apps</keyword><keyword>mitma</keyword><keyword>security</keyword><keyword>ssl</keyword></keywords><dates><year>2012</year></dates><isbn>9781450316514</isbn><electronic-resource-num>10.1145/2382196.2382205</electronic-resource-num><urls><pdf-urls><url>internal-pdf://a2cf71616fa492ebe611f1d83261d2ecf052.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2382196.2382205</url></web-urls></urls><abstract>#MalloDroid. Another study on SSL insecurity. Study on 13,500 apps, 8% are vulnerable to MITM. Simple static analysis tool built on Androguard that checks for Internet permission, HTTP strings, HTTPs string, check for code that allows all certificates). It needs manual verification.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Generic">31</ref-type><titles><title>06720160.pdf</title></titles><periodical/><keywords/><urls><pdf-urls><url>internal-pdf://06720160.pdf</url></pdf-urls></urls></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Huang, Heqing</author><author>Zhu, Sencun</author><author>Chen, Kai</author><author>Liu, Peng</author></authors></contributors><titles><title>From System Services Freezing to System Server Shutdown in Android</title><secondary-title>Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security - CCS '15</secondary-title></titles><periodical><full-title>Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security - CCS '15</full-title></periodical><pages>1236-1247</pages><keywords><keyword>denial of service</keyword><keyword>mobile security</keyword><keyword>risk</keyword><keyword>vulnerability detection</keyword></keywords><dates><year>2015</year></dates><isbn>9781450338325</isbn><electronic-resource-num>10.1145/2810103.2813606</electronic-resource-num><urls><pdf-urls><url>internal-pdf://8498806cb2515ca726f0a8d79a4520857ab2(1).pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2810103.2813606</url></web-urls></urls></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Afonso, Vitor</author><author>Bianchi, Antonio</author><author>Fratantonio, Yanick</author><author>Doupé, Adam</author><author>Polino, Mario</author><author>de Geus, Paulo</author><author>Kruegel, Christopher</author><author>Vigna, Giovanni</author><author>Santa Barbara, Uc</author></authors></contributors><titles><title>Going Native: Using a Large-Scale Analysis of Android Apps to Create a Practical Native-Code Sandboxing Policy</title><secondary-title>Proceedings of the ISOC Network and Distributed System Security Symposium (NDSS)</secondary-title></titles><periodical><full-title>Proceedings of the ISOC Network and Distributed System Security Symposium (NDSS)</full-title></periodical><pages>1-15</pages><keywords/><dates><year>2016</year></dates><isbn>189156241X</isbn><electronic-resource-num>10.14722/ndss.2016.23384</electronic-resource-num><urls><pdf-urls><url>internal-pdf://a4e6808cea8f303d7fce19396327cb5b106f.pdf</url></pdf-urls></urls><abstract>—Current static analysis techniques for Android ap-plications operate at the Java level—that is, they analyze either the Java source code or the Dalvik bytecode. However, Android allows developers to write code in C or C++ that is cross-compiled to multiple binary architectures. Furthermore, the Java-written components and the native code components (C or C++) can interact. Native code can access all of the Android APIs that the Java code can access, as well as alter the Dalvik Virtual Machine, thus rendering static analysis techniques for Java unsound or misleading. In addition, malicious apps frequently hide their malicious functionality in native code or use native code to launch kernel exploits. It is because of these security concerns that previous research has proposed native code sandboxing, as well as mechanisms to enforce security policies in the sandbox. However, it is not clear whether the large-scale adoption of these mechanisms is practical: is it possible to define a meaningful security policy that can be imposed by a native code sandbox without breaking app functionality? In this paper, we perform an extensive analysis of the native code usage in 1.2 million Android apps. We first used static analysis to identify a set of 446k apps potentially using native code, and we then analyzed this set using dynamic analysis. This analysis demonstrates that sandboxing native code with no permissions is not ideal, as apps' native code components perform activities that require Android permissions. However, our analysis provided very encouraging insights that make us believe that sandboxing native code can be feasible and useful in practice. In fact, it was possible to automatically generate a native code sandboxing policy, which is derived from our analysis, that limits many malicious behaviors while still allowing the correct execution of the behavior witnessed during dynamic analysis for 99.77% of the benign apps in our dataset. The usage of our system to generate policies would reduce the attack surface available to native code and, as a further benefit, it would also enable more reliable static analysis of Java code.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Rastogi, Vaibhav</author><author>Qu, Zhengyang</author><author>McClurg, Jedidiah</author><author>Cao, Yinzhi</author><author>Chen, Yan</author></authors></contributors><titles><title>Uranine: Real-time privacy leakage monitoring without system modification for android</title><secondary-title>Lecture Notes of the Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering, LNICST</secondary-title></titles><periodical><full-title>Lecture Notes of the Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering, LNICST</full-title></periodical><pages>256-276</pages><volume>164</volume><keywords/><dates><year>2015</year></dates><isbn>9783319288642</isbn><electronic-resource-num>10.1007/978-3-319-28865-9_14</electronic-resource-num><urls><pdf-urls><url>internal-pdf://983269280d25ce9530598a9ea9c922fc07f2.pdf</url></pdf-urls></urls><abstract>Mobile devices are becoming increasingly popular. One reason for their popularity is the availability of a wide range of third-party applications, which enrich the environment and increase usability. There are however privacy concerns centered around these applications – users do not know what private data is leaked by the applications. Previous works to detect privacy leakages are either not accurate enough or require operating system changes, which may not be possible due to users’ lack of skills or locked devices. We present Uranine (Uranine is a dye, which finds applications as a flow tracer in medicine and environmental studies.), a system that instruments Android applications to detect privacy leakages in real-time. Uranine does not require any platform modification nor does it need the application source code. We designed several mechanisms to overcome the challenges of tracking information flow across framework code, handling callback functions, and expressing all information-flow tracking at the bytecode level. Our evaluation of Uranine shows that it is accurate at detecting privacy leaks and has acceptable performance overhead.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Chen, Kai</author><author>Liu, Peng</author><author>Zhang, Yingjun</author></authors></contributors><titles><title>Achieving Accuracy and Scalability Simultaneously in Detecting Application Clones on Android Markets</title><secondary-title>Icse'14</secondary-title></titles><periodical><full-title>Icse'14</full-title></periodical><pages>175-186</pages><keywords><keyword>Android</keyword><keyword>Software analysis</keyword><keyword>centroid</keyword><keyword>clone detection</keyword></keywords><dates><year>2014</year></dates><isbn>9781450327565</isbn><electronic-resource-num>10.1145/2568225.2568286</electronic-resource-num><urls><pdf-urls><url>internal-pdf://32848cbbdad81e660c1fc7c4a88d2d9c1d6b.pdf</url></pdf-urls></urls><abstract>Besides traditional problems such as potential bugs, (smart- phone) application clones on Android markets bring new threats. That is, attackers clone the code from legitimate Android applications, assemble it with malicious code or ad- vertisements, and publish these “purpose-added” app clones on the same or other markets for benefits. Three inherent and unique characteristics make app clones difficult to detect by existing techniques: a billion opcode problem caused by cross-market publishing, gap between code clones and app clones, and prevalent Type 2 and Type 3 clones. Existing techniques achieve either accuracy or scalability, but not both. To achieve both goals, we use a geometry characteristic, called centroid, of dependency graphs to mea- sure the similarity between methods (code fragments) in two apps. Then we synthesize the method-level similarities and draw a Y/N conclusion on app (core functionality) cloning. The observed “centroid effect” and the inherent “monotonic- ity” property enable our approach to achieve both high ac- curacy and scalability. We implemented the app clone de- tection system and evaluated it on five whole Android mar- kets (including 150,145 apps, 203 million methods and 26 billion opcodes). It takes less than one hour to perform cross-market app clone detection on the five markets after generating centroids only once.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Grace, Michael</author><author>Zhou, Yajin</author><author>Wang, Zhi</author><author>Jiang, Xuxian</author></authors></contributors><titles><title>Systematic Detection of Capability Leaks in Stock Android Smartphones</title><secondary-title>Proceedings of the 19th Network and Distributed System Security Symposium (NDSS 2012)</secondary-title></titles><periodical><full-title>Proceedings of the 19th Network and Distributed System Security Symposium (NDSS 2012)</full-title></periodical><keywords/><dates><year>2012</year></dates><urls><pdf-urls><url>internal-pdf://56265abb25f9db47daaab079380fa69c00f1.pdf</url></pdf-urls></urls><abstract>WOODPECKER. They do &quot;detection of capability leaks&quot;. They discover that several privileged permissions owned by stock apps in popular Android smartphones are unsafely exposed to external apps. Explicit leak: app has permission X, and the dangerous API is reachable from outside. Implicit leak: if an app as the userID, then it might be able to reach the dangerous component, if not proper checks are done. Two steps: possible-path identification + feasible-path refinement. Refinement: Symbolic path execution: while traversing the CFG, they check that &quot;constraints are consistent&quot;. If not, they prune. They use aggressive JOINs for scalability. Type-analysis while they traverse. They use method summaries (i.e., cache). Manual modelling of framework stuff, implicit edges, dangerous permission~&gt;API mapping. They support AIDL.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Hanna, Steve</author><author>Huang, Ling</author><author>Wu, Edward</author><author>Li, Saung</author><author>Chen, Charles</author><author>Song, Dawn</author></authors></contributors><titles><title>Juxtapp: A scalable system for detecting code reuse among android applications</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>62-81</pages><volume>7591 LNCS</volume><keywords/><dates><year>2013</year></dates><isbn>9783642372995</isbn><electronic-resource-num>10.1007/978-3-642-37300-8-4</electronic-resource-num><urls><pdf-urls><url>internal-pdf://c30fa4acb68b309a21167554bd97632968fa.pdf</url></pdf-urls></urls><abstract>Mobile application markets such as the Android Marketplace provide a centralized showcase of applications that end users can purchase or download for free onto their mobile phones. Despite the influx of applications to the markets, applications are cursorily reviewed by marketplace maintainers due to the vast number of submissions. User policing and reporting is the primary method to detect misbehaving applications. This reactive approach to application security, especially when programs can contain bugs, malware, or pirated (inauthentic) code, puts too much responsibility on the end users. In light of this, we propose Juxtapp, a scalable infrastructure for code similarity analysis among Android applications. Juxtapp provides a key solution to a number of problems in Android security, including determining if apps contain copies of buggy code, have significant code reuse that indicates piracy, or are instances of known malware. We evaluate our system using more than 58,000 Android applications and demonstrate that our system scales well and is effective. Our results show that Juxtapp is able to detect: 1) 463 applications with confirmed buggy code reuse that can lead to serious vulnerabilities in real-world apps, 2) 34 instances of known malware and variants (13 distinct variants of the GoldDream malware), and 3) pirated variants of a popular paid game.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sun, Mengtao</author><author>Tan, Gang</author></authors></contributors><titles><title>NativeGuard: Protecting Android Applications from Third-Party Native Libraries</title><secondary-title>Proceedings of the 2014 ACM Conference on Security and Privacy in Wireless &amp; Mobile Networks (WiSec)</secondary-title></titles><periodical><full-title>Proceedings of the 2014 ACM Conference on Security and Privacy in Wireless &amp; Mobile Networks (WiSec)</full-title></periodical><pages>165-176</pages><keywords><keyword>android</keyword><keyword>java native interface</keyword><keyword>privilege isolation</keyword></keywords><dates><year>2014</year></dates><isbn>9781450329729</isbn><electronic-resource-num>10.1145/2627393.2627396</electronic-resource-num><urls><pdf-urls><url>internal-pdf://ac672deb0dce61305a683c99127c49623de4.pdf</url></pdf-urls></urls><abstract>Native code is external, difficult to analyze, mostly computation. They isolate it by putting it in a different app with zero permissions. They do not require OS mods or source code, but they recompile the app in two separate apps (Java and native). They need to proxy all the JNI stuff. Good performance MiBench (17% - 0.5%). 28/30 real-wold apps work. App to 183% with high context switches.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wu, Lei</author><author>Grace, Michael</author><author>Zhou, Yajin</author><author>Wu, Chiachih</author><author>Jiang, Xuxian</author></authors></contributors><titles><title>The impact of vendor customizations on android security</title><secondary-title>Ccs</secondary-title></titles><periodical><full-title>Ccs</full-title></periodical><pages>623-634</pages><issue>1</issue><keywords><keyword>android</keyword><keyword>customization</keyword><keyword>provenance</keyword><keyword>stat</keyword><keyword>static analysi</keyword><keyword>static analysis</keyword></keywords><dates><year>2013</year></dates><isbn>9781450324779</isbn><electronic-resource-num>10.1145/2508859.2516728</electronic-resource-num><urls><pdf-urls><url>internal-pdf://ae9ecebec9a94a2177fd0e4f0d2f9b7021e7.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2508859.2516728</url></web-urls></urls><abstract>The smartphone market has grown explosively in recent years, as more and more consumers are attracted to the sensor-studded mul- tipurpose devices. Android is particularly ascendant; as an open platform, smartphone manufacturers are free to extend and modify it, allowing them to differentiate themselves from their competitors. However, vendor customizations will inherently impact overall An- droid security and such impact is still largely unknown. In this paper, we analyze ten representative stock Android im- ages from ﬁve popular smartphone vendors (with two models from each vendor). Our goal is to assess the extent of security issues that may be introduced from vendor customizations and further de- termine how the situation is evolving over time. In particular, we take a three-stage process: First, given a smartphone’s stock im- age, we perform provenance analysis to classify each app in the image into three categories: apps originating from the AOSP, apps customized or written by the vendor, and third-party apps that are simply bundled into the stock image. Such provenance analysis allows for proper attribution of detected security issues in the ex- amined Android images. Second, we analyze permission usages of pre-loaded apps to identify overprivileged ones that unnecessarily request more Android permissions than they actually use. Finally, in vulnerability analysis, we detect buggy pre-loaded apps that can be exploited to mount permission re-delegation attacks or leak pri- vate information. Our evaluation results are worrisome: vendor customizations are signiﬁcant on stock Android devices and on the whole responsible for the bulk of the security problems we detected in each device. Speciﬁcally, our results show that on average 85.78% of all pre- loaded apps in examined stock images are overprivileged with a majority of them directly from vendor customizations. In addition, 64.71% to 85.00% of vulnerabilities we detected in examined im- ages from every vendor (except for Sony) arose from vendor cus- tomizations. In general, this pattern held over time – newer smart- phones, we found, are not necessarily more secure than older ones.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Rosen, Sanae</author><author>Qian, Z</author><author>Mao, Zm</author></authors></contributors><titles><title>Appprofiler: a flexible method of exposing privacy-related behavior in android applications to end users</title><secondary-title>… on Data and application security and privacy</secondary-title></titles><periodical><full-title>… on Data and application security and privacy</full-title></periodical><pages>221-232</pages><keywords><keyword>android</keyword><keyword>permissions</keyword><keyword>privacy</keyword><keyword>smartphones</keyword></keywords><dates><year>2013</year></dates><isbn>9781450318907</isbn><electronic-resource-num>10.1145/2435349.2435380</electronic-resource-num><urls><pdf-urls><url>internal-pdf://aeb895c659d606d548fed749c3e1559e8f68.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2435380</url></web-urls></urls><abstract>Although Android’s permission system is intended to allow users to make informed decisions about their privacy, it is often ineffective at conveying meaningful, useful information on how a user’s privacy might be impacted by using an application. We present an alternate approach to providing users the knowledge needed to make informed decisions about the applications they install. First, we create a knowledge base of mappings between API calls and fine-grained privacy-related behaviors. We then use this knowledge base to produce, through static analysis, high-level behavior profiles of application behavior. We have analyzed almost 80,000 applications to date and have made the resulting behavior profiles available both through an Android application and online. Nearly 1500 users have used this application to date. Based on 2782 pieces of application-specific feedback, we analyze users’ opinions about how applications affect their privacy and demonstrate that these profiles have had a substantial impact on their understanding of those applications. We also show the benefit of these profiles in understanding large-scale trends in how applications behave and the implications for user privacy.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Egele, Manuel</author><author>Brumley, David</author><author>Fratantonio, Yanick</author><author>Kruegel, Christopher</author></authors></contributors><titles><title>An empirical study of cryptographic misuse in android applications</title><secondary-title>Proceedings of the 2013 ACM SIGSAC conference on Computer &amp; communications security - CCS '13</secondary-title></titles><periodical><full-title>Proceedings of the 2013 ACM SIGSAC conference on Computer &amp; communications security - CCS '13</full-title></periodical><pages>73-84</pages><keywords><keyword>program analysis</keyword><keyword>software security</keyword></keywords><dates><year>2013</year></dates><isbn>9781450324779</isbn><electronic-resource-num>10.1145/2508859.2516693</electronic-resource-num><urls><pdf-urls><url>internal-pdf://a49eb37a866020e420955b54b3910784d261.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2508859.2516693</url></web-urls></urls><abstract>Developers use cryptographic APIs in Android with the intent of securing data such as passwords and personal information on mobile devices. In this paper, we ask whether developers use the cryptographic APIs in a fashion that provides typical cryptographic notions of security, e.g., IND-CPA security. We develop program analysis techniques to automatically check programs on the Google Play marketplace, and find that 10,327 out of 11,748 applications that use cryptographic APIs – 88% overall – make at least one mistake. These numbers show that applications do not use cryptographic APIs in a fashion that maximizes overall security. We then suggest specific remediations based on our analysis toward improving overall cryptographic security in Android applications.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Chen, Kevin Zhijie</author><author>Johnson, Noah</author><author>D'Silva, Vijay</author><author>Dai, Shuaifu</author><author>MacNamara, Kyle</author><author>Magrino, Tom</author><author>Wu, Edward</author><author>Rinard, Martin</author><author>Song, Dawn</author></authors></contributors><titles><title>Contextual Policy Enforcement in Android Applications with Permission Event Graphs</title><secondary-title>Symposium on Network and Distributed System Security (NDSS)</secondary-title></titles><periodical><full-title>Symposium on Network and Distributed System Security (NDSS)</full-title></periodical><keywords/><dates><year>2013</year></dates><urls><pdf-urls><url>internal-pdf://a9a00172864d2f61b68fc61ad31edbe9f5d5.pdf</url></pdf-urls><web-urls><url>http://internetsociety.org/doc/contextual-policy-enforcement-android-applications-permission-event-graphs%5Cnpapers3://publication/uuid/AB4947D9-68A5-48A0-8967-B3EFF7C8C43B</url></web-urls></urls><abstract>#Pegasus. They have a system to generate a Permission Event Graph, which they construct with static analysis and query using model checking. PEG: A novel abstraction of the context in which events fire, and event-driven manner in which an Android application uses permissions.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Chen, Qi Alfred</author><author>Qian, Zhiyun</author><author>Mao, Z Morley</author></authors></contributors><titles><title>Peeking into Your App without Actually Seeing It : UI State Inference and Novel Android Attacks</title><secondary-title>Proceedings of the 23rd USENIX Security Symposium, San Diego, CA, August 2014.</secondary-title></titles><periodical><full-title>Proceedings of the 23rd USENIX Security Symposium, San Diego, CA, August 2014.</full-title></periodical><pages>16</pages><issue>August</issue><keywords/><dates><year>2014</year></dates><isbn>978-1-931971-15-7</isbn><electronic-resource-num>978-1-931971-15-7</electronic-resource-num><urls><pdf-urls><url>internal-pdf://eacf3a58fdbd473ec1686768d794b4863c0c.pdf</url></pdf-urls></urls><abstract>The security of smartphone GUI frameworks remains an important yet under-scrutinized topic. In this pa- per, we report that on the Android system (and likely other OSes), a weaker form of GUI confidentiality can be breached in the form of UI state (not the pixels) by a background app without requiring any permissions. Our finding leads to a class of attackswhichwe nameUI state inference attack. The underlying problemis that popular GUI frameworks by design can potentially reveal every UI state change through a newly-discovered public side channel— shared memory. In our evaluation, we show that for 6 out of 7 popular Android apps, the UI state in- ference accuracies are 80–90%for the first candidate UI states, and over 93%for the top 3 candidates. Even though the UI state does not reveal the exact pix- els, we show that it can serve as a powerful building block to enable more serious attacks. To demonstrate this, we design and fully implement several new attacks based on the UI state inference attack, including hijack- ing the UI state to steal sensitive user input (e.g., login credentials) and obtain sensitive camera images shot by the user (e.g., personal check photos for banking apps). We also discuss non-trivial challenges in eliminating the identified side channel, and suggest more secure alterna- tive system designs. 1</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wang, Haoyu</author><author>Guo, Yao</author><author>Chen, Xiangqun</author></authors></contributors><titles><title>WuKong: A Scalable and Accurate Two-Phase Approach to Android App Clone Detection</title><secondary-title>Issta</secondary-title></titles><periodical><full-title>Issta</full-title></periodical><pages>71-82</pages><keywords><keyword>android</keyword><keyword>clone detection</keyword><keyword>mobile applications</keyword><keyword>repackaging</keyword></keywords><dates><year>2015</year></dates><isbn>9781450336208</isbn><electronic-resource-num>10.1145/2771783.2771795</electronic-resource-num><urls><pdf-urls><url>internal-pdf://f2e76d0190905c2bd3a2e611d28504fa4353.pdf</url></pdf-urls></urls><abstract>Repackaged Android applications (app clones) have been found in many third-party markets, which not only compro-mise the copyright of original authors, but also pose threats to security and privacy of mobile users. Both fine-grained and coarse-grained approaches have been proposed to detect app clones. However, fine-grained techniques employing complicated clone detection algorithms are difficult to scale to hundreds of thousands of apps, while coarse-grained techniques based on simple features are scalable but less accurate. This paper proposes WuKong, a two-phase detec-tion approach that includes a coarse-grained detection phase to identify suspicious apps by comparing light-weight static semantic features, and a fine-grained phase to compare more detailed features for only those apps found in the first phase. To further improve the detection speed and accuracy, we also introduce an automated clustering-based preprocessing step to filter third-party libraries before conducting app clone detection. Experiments on more than 100,000 Android apps collected from five Android markets demonstrate the effectiveness and scalability of our approach.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhou, Yajin</author><author>Wang, Zhi</author><author>Zhou, Wu</author><author>Jiang, Xuxian</author></authors></contributors><titles><title>Hey, You, Get Off of My Market: Detecting Malicious Apps in Official and Alternative Android Markets</title><secondary-title>Proceedings of the 19th Annual Network and Distributed System Security Symposium</secondary-title></titles><periodical><full-title>Proceedings of the 19th Annual Network and Distributed System Security Symposium</full-title></periodical><pages>5-8</pages><issue>2</issue><keywords/><dates><year>2012</year></dates><isbn>978-931971-95-9</isbn><electronic-resource-num>http://www.internetsociety.org/hey-you-get-my-market-detecting-malicious-apps-official-and-alternative-android-markets</electronic-resource-num><urls><pdf-urls><url>internal-pdf://e5a5886c06f3f84e1256941ceb3d149471bf.pdf</url></pdf-urls></urls><abstract>In this paper, we present a systematic study for the de- tection of malicious applications (or apps) on popular An- droid Markets. To this end, we first propose a permission- based behavioral footprinting scheme to detect new sam- ples of known Android malware families. Then we apply a heuristics-based filtering scheme to identify certain inher- ent behaviors of unknown malicious families. We imple- mented both schemes in a system called DroidRanger. The experiments with 204, 040 apps collected from five different Android Markets in May-June 2011 reveal 211 malicious ones: 32 from the official Android Market (0.02% infec- tion rate) and 179 from alternative marketplaces (infection rates ranging from 0.20% to 0.47%). Among those mali- cious apps, our system also uncovered two zero-day mal- ware (in 40 apps): one from the official Android Market and the other from alternative marketplaces. The results show that current marketplaces are functional and rela- tively healthy. However, there is also a clear need for a rigorous policing process, especially for non-regulated al- ternative marketplaces.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhou, Xiaoyong</author><author>Lee, Yeonjoon</author><author>Zhang, Nan</author><author>Naveed, Muhammad</author><author>Wang, Xiao Feng</author></authors></contributors><titles><title>The peril of fragmentation: Security hazards in android device driver customizations</title><secondary-title>Proceedings - IEEE Symposium on Security and Privacy</secondary-title></titles><periodical><full-title>Proceedings - IEEE Symposium on Security and Privacy</full-title></periodical><pages>409-423</pages><keywords><keyword>Android Security</keyword><keyword>Privacy</keyword></keywords><dates><year>2014</year></dates><isbn>9781479946860</isbn><electronic-resource-num>10.1109/SP.2014.33</electronic-resource-num><urls><pdf-urls><url>internal-pdf://e2f788ed6211a979848683eb7a8ff414e4c8.pdf</url></pdf-urls></urls><abstract>Android phone manufacturers are under the perpetual pressure to move quickly on their new models, continuously customizing Android to fit their hardware. However, the security implications of this practice are less known, particularly when it comes to the changes made to Android's Linux device drivers, e.g., those for camera, GPS, NFC etc. In this paper, we report the first study aimed at a better understanding of the security risks in this customization process. Our study is based on ADDICTED, a new tool we built for automatically detecting some types of flaws in customized driver protection. Specifically, on a customized phone, ADDICTED performs dynamic analysis to correlate the operations on a security-sensitive device to its related Linux files, and then determines whether those files are under-protected on the Linux layer by comparing them with their counterparts on an official Android OS. In this way, we can detect a set of likely security flaws on the phone. Using the tool, we analyzed three popular phones from Samsung, identified their likely flaws and built end-to-end attacks that allow an unprivileged app to take pictures and screenshots, and even log the keys the user enters through touch screen. Some of those flaws are found to exist on over a hundred phone models and affect millions of users. We reported the flaws and helped the manufacturers fix those problems. We further studied the security settings of device files on 2423 factory images from major phone manufacturers, discovered over 1,000 vulnerable images and also gained insights about how they are distributed across different Android versions, carriers and countries.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Gordon, Michael I</author><author>Kim, Deokhwan</author><author>Perkins, Jeff</author><author>Gilham, Limei</author><author>Nguyen, Nguyen</author><author>Rinard, Martin</author></authors></contributors><titles><title>Information-Flow Analysis of Android Applications in DroidSafe</title><secondary-title>2015 Network and Distributed System Security (NDSS) Symposium</secondary-title></titles><periodical><full-title>2015 Network and Distributed System Security (NDSS) Symposium</full-title></periodical><pages>8-11</pages><issue>February</issue><keywords/><dates><year>2015</year></dates><isbn>189156238X</isbn><electronic-resource-num>10.14722/ndss.2015.23089</electronic-resource-num><urls><pdf-urls><url>internal-pdf://cd63edcba8ede0e2f61bb5e3a28a8ab2e118.pdf</url></pdf-urls></urls><abstract>We present DroidSafe, a static information flow analysis tool that reports potential leaks of sensitive information in Android applications. DroidSafe includes a comprehensive model of the Android API and runtime, built on top of the Android Open Source Project implementation of the Android API. This model accurately captures the data-flow and aliasing semantics of API calls, life-cycle event handlers, callback handlers, and native methods. DroidSafe includes an analysis to statically resolve dynamic inter-component communication linkage mechanisms, enabling DroidSafe to precisely track intent- and message- and RPC-mediated information flows that traverse multiple Android components. The DroidSafe information flow analysis has high-depth heap and method object-sensitivity, and the analysis considers all possible interleavings of life-cycle events and callback handlers. We also present several domain-specific analyses that significantly enhance DroidSafe's ability to successfully analyze Android applications. We evaluate DroidSafe on a suite of 24 real-world Android applications that contain malicious information leaks. These applications were developed by independent, hostile Red Team organizations. The malicious flows in these applications were designed specifically to evade or overwhelm information flow analysis tools. DroidSafe detects all of the malicious flows in all 24 applications. We compare DroidSafe to a current state-of-the-art analysis, which detects malicious flows in only 3 of these applications. We also evaluate DroidSafe on DroidBench version 1.2, a suite of 65 independently-developed Android micro-applications designed to evaluate the capabilities of information flow analysis systems. We report the highest information flow precision and recall to date for DroidBench 1.2. Michael I. Gordon, Deokhwan Kim, and Jeff Perkins (MIT CSAIL), Limei Gilham (Kestrel Institute), Nguyen Nguyen (unaffiliated), and Martin Rinard (MIT CSAIL)</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Chakradeo, Saurabh</author><author>Reaves, Bradley</author><author>Enck, William</author></authors></contributors><titles><title>MAST: Triage for Market-scale Mobile Malware Analysis</title><secondary-title>ACM Conference on Security and Privacy in Wireless and Mobile Networks (WiSec)</secondary-title></titles><periodical><full-title>ACM Conference on Security and Privacy in Wireless and Mobile Networks (WiSec)</full-title></periodical><pages>13-24</pages><keywords><keyword>mobile application security</keyword><keyword>multiple correspondence anal-</keyword><keyword>triage</keyword></keywords><dates><year>2013</year></dates><isbn>9781450319980</isbn><electronic-resource-num>10.1145/2462096.2462100</electronic-resource-num><urls><pdf-urls><url>internal-pdf://c676b2238304334b41b30d974d52338c236d.pdf</url></pdf-urls></urls><abstract>#MAST. It's very similar to previous work that use machine learning on simple features to compute a &quot;risk&quot;. The features they use are permissions, intent-filters, native code, presence of zip files. They do MCA (Multiple Correspondence Analysis). They have a kind of questionnaire.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bartel, Alexandre</author><author>Klein, Jacques</author><author>Monperrus, Martin</author><author>Traon, Yves Le</author></authors></contributors><titles><title>Automatically Securing Permission-Based Software by Reducing the Attack Surface: An Application to Android</title></titles><periodical/><keywords/><dates><year>2012</year></dates><urls><pdf-urls><url>internal-pdf://cc9e691e30fb774d49ace62f5971a44f45ce.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1206.5829</url></web-urls></urls><abstract>A common security architecture, called the permission-based security model (used e.g. in Android and Blackberry), entails intrinsic risks. For instance, applications can be granted more permissions than they actually need, what we call a &quot;permission gap&quot;. Malware can leverage the unused permissions for achieving their malicious goals, for instance using code injection. In this paper, we present an approach to detecting permission gaps using static analysis. Our prototype implementation in the context of Android shows that the static analysis must take into account a significant amount of platform-specific knowledge. Using our tool on two datasets of Android applications, we found out that a non negligible part of applications suffers from permission gaps, i.e. does not use all the permissions they declare.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Heuser, Stephan</author><author>Nadkarni, Adwait</author><author>Enck, William</author><author>Sadeghi, Ahmad-Reza</author></authors></contributors><titles><title>ASM: A Programmable Interface for Extending Android Security</title><secondary-title>Usenix Security</secondary-title></titles><periodical><full-title>Usenix Security</full-title></periodical><pages>1005-1019</pages><keywords/><dates><year>2014</year></dates><isbn>978-1-931971-15-7</isbn><urls><pdf-urls><url>internal-pdf://f15e81e686291e534d0179352b4159b9130a.pdf</url></pdf-urls><web-urls><url>https://www.usenix.org/conference/usenixsecurity14/technical-sessions/presentation/heuser</url></web-urls></urls><abstract>#asm</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhou, Yajin</author><author>Jiang, Xuxian</author></authors></contributors><titles><title>Detecting Passive Content Leaks and Pollution in Android Applications</title><secondary-title>Ndss</secondary-title></titles><periodical><full-title>Ndss</full-title></periodical><issue>October</issue><keywords><keyword>Android</keyword><keyword>content pollution</keyword><keyword>exploitable content provider interface</keyword><keyword>passive content leaks</keyword><keyword>smartphone privacy</keyword><keyword>vulnerability</keyword></keywords><dates><year>2013</year></dates><urls><pdf-urls><url>internal-pdf://d28656da64b23a19906001bf4472e9cf483c.pdf</url></pdf-urls></urls><abstract>ContentScope. They detect apps that expose access to content providers. Two types of vulnerability: passive content leaks (an external app can access something contained in the content provider), content pollution (an external app can inject data in security-related content-provider). How: they detect &quot;start&quot; (ContentProvider.{query,insert}), and &quot;terminals&quot; SQLiteQueryBuilder.{query,rawQuery}. Implementation: &quot;path-sensitive data-flow analysis along execution paths from start functions to terminal functions, so that we can automatically derive necessary constraints and prepare “appropriate” inputs to evaluate the presence of content leakage or pollution vulnerabilities.&quot;</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Johnson, Ryan</author><author>Stavrou, Angelos</author></authors></contributors><titles><title>Forced-path execution for android applications on x86 platforms</title><secondary-title>Proceedings - 7th International Conference on Software Security and Reliability Companion, SERE-C 2013</secondary-title></titles><periodical><full-title>Proceedings - 7th International Conference on Software Security and Reliability Companion, SERE-C 2013</full-title></periodical><pages>188-197</pages><issue>Vm</issue><keywords><keyword>Android OS</keyword><keyword>Application Analysis</keyword><keyword>Emulation</keyword></keywords><dates><year>2013</year></dates><isbn>978-1-4799-2925-2</isbn><electronic-resource-num>10.1109/SERE-C.2013.36</electronic-resource-num><urls><pdf-urls><url>internal-pdf://2a6ef11b25a2e81281a6d9da9cd2dc638fb4.pdf</url></pdf-urls></urls><abstract>We present a code analysis framework that performs scalable forced-path execution of Android applications in commodity hardware. Our goal is to reveal the full application functional behavior for large commercial applications without access to source code. We do so by identifying code blocks and API calls that are deemed sensitive and provide a security report to an analyst regarding the functionality of the Android application that is under inspection. We show that our approach is scalable by allowing for the execution of each software component by numerous instances of execution modules. Each execution instance exercises a different code path through the application call-graph leading to full code and state space coverage and exposing any hidden or unwanted functionality. The output is a list of API calls, parameter values, component call graphs, and control flow graphs. We show how this can be leveraged for automated policy enforcement of runtime functionality.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Crussell, Jonathan</author><author>Gibler, Clint</author><author>Chen, Hao</author></authors></contributors><titles><title>AnDarwin: Scalable Detection of Android Application Clones Based on Semantics</title><secondary-title>IEEE Transactions on Mobile Computing</secondary-title></titles><periodical><full-title>IEEE Transactions on Mobile Computing</full-title></periodical><pages>2007-2019</pages><volume>14</volume><issue>10</issue><keywords><keyword>Program analysis</keyword><keyword>clustering</keyword><keyword>mobile applications</keyword><keyword>plagiarism detection</keyword></keywords><dates><year>2015</year></dates><isbn>9783642402029</isbn><electronic-resource-num>10.1109/TMC.2014.2381212</electronic-resource-num><urls><pdf-urls><url>internal-pdf://2c375a4e4884e4fb4b487f272817dc4bfbac.pdf</url></pdf-urls></urls><abstract>Smartphones rely on their vibrant application markets; however, plagiarism threatens the long-term health of these markets. We present a scalable approach to detecting similar Android apps based on their semantic information. We implement our approach in a tool called AnDarwin and evaluate it on 265,359 apps collected from 17 markets including Google Play and numerous third-party markets. In contrast to earlier approaches, AnDarwin has four advantages: it avoids comparing apps pairwise, thus greatly improving its scalability; it analyzes only the app code and does not rely on other information � such as the app�s market, signature, or description � thus greatly increasing its reliability; it can detect both full and partial app similarity; and it can automatically detect library code and remove it from the similarity analysis.We present two use cases for AnDarwin: finding similar apps by different developers (�clones�) and similar apps from the same developer (�rebranded�). In ten hours, AnDarwin detected at least 4,295 apps that are the victims of cloning and 36,106 rebranded apps. Additionally, AnDarwin detects similar code that is injected into many apps, which may indicate the spread of malware. Our evaluation demonstrates AnDarwin�s ability to accurately detect similar apps on a large scale.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wang, Yi Hsien</author><author>Wu, I. Chen</author></authors></contributors><titles><title>Achieving high and consistent rendering performance of java AWT/Swing on multiple platforms</title><secondary-title>Software - Practice and Experience</secondary-title></titles><periodical><full-title>Software - Practice and Experience</full-title></periodical><pages>701-736</pages><volume>39</volume><issue>7</issue><keywords><keyword>CYC Window Toolkit</keyword><keyword>Directx</keyword><keyword>Linux</keyword><keyword>Mac OS x</keyword><keyword>OpenGL</keyword><keyword>Windows</keyword></keywords><dates><year>2009</year></dates><isbn>0000000000000</isbn><accession-num>20926156</accession-num><electronic-resource-num>10.1002/spe</electronic-resource-num><urls><pdf-urls><url>internal-pdf://1cc21835247e4526b71024e8b292a612bbbd.pdf</url></pdf-urls></urls><abstract>Wang et al. (Softw. Pract. Exper. 2007; 37(7):727–745) observed a phenomenon of performance inconsistency in the graphics of Java Abstract Window Toolkit (AWT)/Swing among different Java runtime environments (JREs) on Windows XP. This phenomenon makes it difficult to predict the performance of Java game applications. Therefore, they proposed a portable AWT/Swing architecture, called CYC Window Toolkit (CWT), to provide programmers with high and consistent rendering performance for Java game development among different JREs. They implemented a DirectX version to demonstrate the feasibility of the architecture. This paper extends the above research to other environments in two aspects. First, we evaluate the rendering performance of the original Java AWT with different combinations of JREs, image application programming interfaces, system properties and operating systems (OSs), including Windows XP, Windows Vista, Fedora and Mac OS X. The evaluation results indicate that the performance inconsistency of Java AWT also exists among the four OSs, even if the same hardware configuration is used. Second, we design an OpenGL version of CWT, named CWT-GL, to take advantage of modern 3D graphics cards, and compare the rendering performance of CWT with Java AWT/Swing. The results show that CWT-GL achieves more consistent and higher rendering performance in JREs 1.4 to 1.6 on the four OSs. The results also hint at two approaches: (a) decouple the rendering pipelines of Java AWT/Swing from the JREs for faster upgrading and supporting old JREs and (b) use other graphics libraries, such as CWT, instead of Java AWT/Swing to develop cross-platform Java games with higher and more consistent rendering performance. Copyright © 2009 John Wiley &amp; Sons, Ltd.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Suarez-Tangil, Guillermo</author><author>Tapiador, Juan E.</author><author>Lombardi, Flavio</author><author>Di Pietro, Roberto</author></authors></contributors><titles><title>Thwarting obfuscated malware via differential fault analysis</title><secondary-title>Computer</secondary-title></titles><periodical><full-title>Computer</full-title></periodical><pages>24-31</pages><volume>47</volume><issue>6</issue><keywords><keyword>Alterdroid</keyword><keyword>Android</keyword><keyword>automatic testing</keyword><keyword>differential fault analysis</keyword><keyword>dynamic analysis</keyword><keyword>fuzzy testing</keyword><keyword>grayware</keyword><keyword>malware</keyword><keyword>privacy</keyword><keyword>security</keyword><keyword>smartphones</keyword></keywords><dates><year>2014</year></dates><isbn>0018-9162 VO  - 47</isbn><electronic-resource-num>10.1109/MC.2014.169</electronic-resource-num><urls><pdf-urls><url>internal-pdf://1b2df6d2caa0d7ce07cb95fac178555f27ea.pdf</url></pdf-urls></urls><abstract>Malware for smartphones has rocketed over the last years. As a result, market operators face the challenge of keeping their stores free from malicious apps, a task that has become increasingly complex as malware developers are progressively using advanced techniques to defeat malware detection tools. One such technique, commonly observed in recent malware samples, consists of hiding and obfuscating modules containing malicious functionalities in places that static analysis tools overlook (e.g., within data objects). In this paper, we describe Alterdroid, a dynamic analysis tool for detecting such hidden or obfuscated malware components distributed as parts of an app package. The key idea in Alterdroid consists of analyzing the behavioral differences between the original app and a number of automatically generated versions of it where a number of modifications (faults) have been carefully injected. Observable differences in terms of activities that appear or vanish in the modified app are recorded, and this signature is finally analyzed through a pattern-matching process driven by rules that relate different types of hidden functionalities with patterns found in the differential signature. A thorough description of the proposed model is provided. Preliminary experimental results obtained by testing Alterdroid over some of the most relevant malware apps support the quality and viability of our proposal.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zheng, Cong</author><author>Zhu, Shixiong</author><author>Dai, Shuaifu</author><author>Gu, Guofei</author><author>Gong, Xiaorui</author></authors></contributors><titles><title>SmartDroid: an Automatic System for Revealing UI-based Trigger Conditions in Android Applications</title><secondary-title>ACM CCS Workshop on Security and Privacy in Smartphones and Mobile Devices (SPSM)</secondary-title></titles><periodical><full-title>ACM CCS Workshop on Security and Privacy in Smartphones and Mobile Devices (SPSM)</full-title></periodical><pages>93-104</pages><keywords><keyword>sensitive</keyword><keyword>smartphone security</keyword><keyword>ui-based trigger condition</keyword></keywords><dates><year>2012</year></dates><isbn>9781450316668</isbn><electronic-resource-num>10.1145/2381934.2381950</electronic-resource-num><urls><pdf-urls><url>internal-pdf://f3c2c2712404c55822a04f0ea6c6e82380e5.pdf</url></pdf-urls></urls><abstract>#SmartDroid. Basic static analysis to uncover UI-based triggers. They first construct the Activity CG, by using some hueristics and constant propagation. There is no coverage measure vs comparison with Monkey.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Kazdagli, Mikhail</author><author>Huang, Ling</author><author>Reddi, Vijay</author><author>Tiwari, Mohit</author></authors></contributors><titles><title>Morpheus: Benchmarking Computational Diversity in Mobile Malware</title></titles><periodical/><pages>3:1-3:8</pages><keywords><keyword>mobile malware</keyword><keyword>performance counters</keyword><keyword>security</keyword></keywords><dates><year>2014</year></dates><isbn>978-1-4503-2777-0</isbn><electronic-resource-num>10.1145/2611765.2611767</electronic-resource-num><urls><pdf-urls><url>internal-pdf://0c7d624d690b4b0e877db8a84dc453a52d5a.pdf</url></pdf-urls><web-urls><url>http://doi.acm.org.ezlibproxy1.ntu.edu.sg/10.1145/2611765.2611767%5Cnhttp://dl.acm.org.ezlibproxy1.ntu.edu.sg/ft_gateway.cfm?id=2611767&amp;type=pdf</url></web-urls></urls><abstract>Computational characteristics of a program can potentially be used to identify malicious programs from benign ones. However, systematically evaluating malware detection techniques, especially when malware samples are hard to run correctly and can adapt their computational characteristics, is a hard problem. We introduce Morpheus -- a benchmarking tool that includes both real mobile malware and a synthetic malware generator that can be configured to generate a computationally diverse malware sample-set -- as a tool to evaluate computational signatures based malware detection. Morpheus also includes a set of computationally diverse benign applications that can be used to repackage malware into, along with a recorded trace of over 1 hour long realistic human usage for each app that can be used to replay both benign and malicious executions. The current Morpheus prototype targets Android applications and malware samples. Using Morpheus, we quantify the computational diversity in malware behavior and expose opportunities for dynamic analyses that can detect mobile malware. Specifically, the use of obfuscation and encryption to thwart static analyses causes the malicious execution to be more distinctive -- a potential opportunity for detection. We also present potential challenges, specifically, minimizing false positives that can arise due to diversity of benign executions.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Publishing, Springer International</author></authors></contributors><titles><title>Edinburgh Research Explorer EviCheck : Digital Evidence for Android EviCheck : Digital Evidence for Android</title></titles><periodical/><keywords/><dates><year>2015</year></dates><isbn>9783319249537</isbn><urls><pdf-urls><url>internal-pdf://9bdae0a6b1d09e36b449253ef0d734a48b95.pdf</url></pdf-urls></urls></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Aafer, Yousra</author><author>Zhang, Nan</author><author>Zhang, Zhongwen</author><author>Zhang, Xiao</author><author>Chen, Kai</author><author>Wang, XiaoFeng</author><author>Zhou, Xiaoyong</author><author>Du, Wenliang</author><author>Grace, Michael</author></authors></contributors><titles><title>Hare Hunting in the Wild Android</title><secondary-title>Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security - CCS '15</secondary-title></titles><periodical><full-title>Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security - CCS '15</full-title></periodical><pages>1248-1259</pages><keywords/><dates><year>2015</year></dates><isbn>9781450338325</isbn><electronic-resource-num>10.1145/2810103.2813648</electronic-resource-num><urls><pdf-urls><url>internal-pdf://17c2bef5dd683fcb984537f567da5a78ce43.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2810103.2813648</url></web-urls></urls><abstract>Apps use intents and content provider. However, especially with non standard distros, they assume that specific apps will receive an intent/cp. They analyze stock images for all used intents/cp (flowdroid + additional edeges for cfg + soot for backward slicing) and then they check for all the registered ones. The diff is probably a vuln. In theory they could use package signature to check caller but they rarely do it. On 5 image: average 11.7% of apps have hares.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zheng, Min</author><author>Lee, Patrick P.C.</author><author>Lui, John C.S.</author></authors></contributors><titles><title>ADAM: An automatic and extensible platform to stress test android anti-virus systems</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>82-101</pages><volume>7591 LNCS</volume><keywords/><dates><year>2013</year></dates><isbn>9783642372995</isbn><electronic-resource-num>10.1007/978-3-642-37300-8-5</electronic-resource-num><urls><pdf-urls><url>internal-pdf://f8ffc45b094cfe044b09e0ac3e4f9c0b6474.pdf</url></pdf-urls></urls><abstract>With the rising threat of smartphone malware, both academic community and commercial anti-virus companies proposed many methodologies and products to defend against smartphone malware. Thus, how to assess the effectiveness of these defense mechanisms against existing and unknown malware becomes important. We propose ADAM, an automated and extensible system that can evaluate, via large-scale stress tests, the effectiveness of anti-virus systems against a variety of malware samples for the Android platform. Specifically, ADAM can automatically transform an original malware sample to different variants via repackaging and obfuscation techniques in order to evaluate the robustness of different anti-virus systems against malware mutation. The transformation and evaluation processes of ADAM are fully automatic, generic, and extensible for different types of malware, anti-virus systems, and malware transformation techniques. We demonstrate the efficacy of ADAM using 222 Android malware samples that we collected in the wild. Using ADAM, we generate different variants based on our collected malware samples, and evaluate the detection of these variants against commercial anti-virus systems.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Crussell, J.</author><author>Stevens, R.</author><author>Chen, H.</author></authors></contributors><titles><title>MAdFraud: Investigating ad fraud in Android applications</title><secondary-title>MobiSys 2014 - Proceedings of the 12th Annual International Conference on Mobile Systems, Applications, and Services</secondary-title></titles><periodical><full-title>MobiSys 2014 - Proceedings of the 12th Annual International Conference on Mobile Systems, Applications, and Services</full-title></periodical><pages>123-134</pages><keywords><keyword>android</keyword><keyword>app testing</keyword><keyword>click fraud</keyword><keyword>data mining</keyword><keyword>network traffic classification</keyword><keyword>online advertising</keyword></keywords><dates><year>2014</year></dates><isbn>9781450327930</isbn><electronic-resource-num>10.1145/2594368.2594391</electronic-resource-num><urls><pdf-urls><url>internal-pdf://7a7f3c868b48a44c3480843aff22dc67df70.pdf</url></pdf-urls></urls><abstract>Many Android applications are distributed for free but are supported by advertisements. Ad libraries embedded in the app fetch content from the ad provider and display it on the app's user interface. The ad provider pays the developer for the ads displayed to the user and ads clicked by the user. A major threat to this ecosystem is ad fraud, where a miscreant's code fetches ads without displaying them to the user or &quot;clicks&quot; on ads automatically. Ad fraud has been extensively studied in the context of web advertising but has gone largely unstudied in the context of mobile advertising. We take the first step to study mobile ad fraud perpetrated by Android apps. We identify two fraudulent ad behaviors in apps: 1) requesting ads while the app is in the background, and 2) clicking on ads without user interaction. Based on these observations, we developed an analysis tool, MAdFraud, which automatically runs many apps simultaneously in emulators to trigger and expose ad fraud. Since the formats of ad impressions and clicks vary widely between different ad providers, we develop a novel approach for automatically identifying ad impressions and clicks in three steps: building HTTP request trees, identifying ad request pages using machine learning, and detecting clicks in HTTP request trees using heuristics. We apply our methodology and tool to two datasets: 1) 130,339 apps crawled from 19 Android markets including Play and many third-party markets, and 2) 35,087 apps that likely contain malware provided by a security company. From analyzing these datasets, we find that about 30% of apps with ads make ad requests while in running in the background. In addition, we find 27 apps which generate clicks without user interaction. We find that the click fraud apps attempt to remain stealthy when fabricating ad traffic by only periodically sending clicks and changing which ad provider is being targeted between installations. © 2014 ACM.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Gagnon, François</author><author>Lafrance, Frédéric</author><author>Frenette, Simon</author><author>Hallé, Simon</author></authors></contributors><titles><title>AVP : An Android Virtual Playground</title></titles><periodical/><pages>13-20</pages><keywords/><dates><year>2005</year></dates><isbn>9789897580420</isbn><electronic-resource-num>10.5220/0005016500130020</electronic-resource-num><urls><pdf-urls><url>internal-pdf://6abbd789f35927ff270ef0475e7808a3caf9.pdf</url></pdf-urls></urls></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Yang, Liu</author><author>Boushehrinejadmoradi, Nader</author><author>Roy, Pallab</author><author>Ganapathy, Vinod</author><author>Iftode, Liviu</author></authors></contributors><titles><title>Short Paper: Enhancing Users’ Comprehension of Android Permissions</title><secondary-title>Proceedings of the second ACM workshop on Security and privacy in smartphones and mobile devices - SPSM '12</secondary-title></titles><periodical><full-title>Proceedings of the second ACM workshop on Security and privacy in smartphones and mobile devices - SPSM '12</full-title></periodical><pages>21</pages><keywords><keyword>android permission</keyword><keyword>crowdsourcing</keyword><keyword>mobile applications</keyword><keyword>permission understanding</keyword><keyword>record and replay</keyword></keywords><dates><year>2012</year></dates><isbn>9781450316668</isbn><electronic-resource-num>10.1145/2381934.2381940</electronic-resource-num><urls><pdf-urls><url>internal-pdf://9b1676a6ae4994d18c2e0292eac69466e89b.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2381934.2381940</url></web-urls></urls><abstract>Android adopts a permission-based model to protect user’s data and system resources. An application needs to explicitly request user’s approval of the required permissions at the installation time. The utility of the permission model depends critically on end users’ ability to comprehend them. However, a recent study has shown that Android users have poor comprehension on permissions. In this paper, we propose to help Android users better understand application permissions through crowdsourcing. In our approach, collections of users of the same application use our tool to help each other on permission understanding by sharing their permission reviews. We demonstrate the feasibility of our approach by implementing a proof-of-concept of our design. Our case study shows that the tool can provide helpful information of permission usage. It also exposes the limitations of the current implementation, and the challenges need to be addressed in our next step</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Borbely, Rebecca Schuller</author></authors></contributors><titles><title>On Normalized Compression Distance and Large Malware</title></titles><periodical/><keywords/><dates><year>2015</year></dates><urls><pdf-urls><url>internal-pdf://60c2ab2fe9a9c9806913ea498c2ea86f254f.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1509.00689</url></web-urls></urls><abstract>Normalized Compression Distance (NCD) is a popular tool that uses compression algorithms to cluster and classify data in a wide range of applications. Existing discussions of NCD's theoretical merit rely on certain theoretical properties of compression algorithms. However, we demonstrate that many popular compression algorithms don't seem to satisfy these theoretical properties. We explore the relationship between some of these properties and file size, demonstrating that this theoretical problem is actually a practical problem for classifying malware with large file sizes, and we then introduce some variants of NCD that mitigate this problem.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Rangwala, Mohammed</author><author>Zhang, Ping</author><author>Zou, Xukai</author><author>Li, Feng</author></authors></contributors><titles><title>A taxonomy of privilege escalation attacks in Android applications</title><secondary-title>International Journal of Security and Networks</secondary-title></titles><periodical><full-title>International Journal of Security and Networks</full-title></periodical><pages>40</pages><volume>9</volume><issue>1</issue><keywords><keyword>1</keyword><keyword>2014</keyword><keyword>40</keyword><keyword>55</keyword><keyword>9</keyword><keyword>a taxonomy of privilege</keyword><keyword>and li</keyword><keyword>android</keyword><keyword>applications</keyword><keyword>escalation attacks in android</keyword><keyword>f</keyword><keyword>follows</keyword><keyword>int</keyword><keyword>j</keyword><keyword>m</keyword><keyword>networks</keyword><keyword>no</keyword><keyword>p</keyword><keyword>pp</keyword><keyword>privilege escalation</keyword><keyword>rangwala</keyword><keyword>reference to this paper</keyword><keyword>security and</keyword><keyword>should be made as</keyword><keyword>smartphone security</keyword><keyword>vol</keyword><keyword>x</keyword><keyword>zhang</keyword><keyword>zou</keyword></keywords><dates><year>2014</year></dates><electronic-resource-num>10.1504/IJSN.2014.059327</electronic-resource-num><urls><pdf-urls><url>internal-pdf://5f28f1fb24a9689fe4491cf781363527fa91.pdf</url></pdf-urls><web-urls><url>https://www.scopus.com/inward/record.uri?eid=2-s2.0-84894483529%7B&amp;%7DpartnerID=40%7B&amp;%7Dmd5=dcb215e419cf4ea2ea73e6b08faffd44%5Cnhttp://www.inderscience.com/link.php?id=59327</url></web-urls></urls><abstract>Google's Android is one of the most popular mobile operating system platforms today, being deployed on a wide range of mobile devices from various manufacturers. It is termed as a privilege-separated operating system which implements some novel security mechanisms. Recent research and security attacks on the platform, however, have shown that the security model of Android is flawed and is vulnerable to transitive usage of privileges among applications. Privilege escalation attacks have been shown to be malicious and with the wide spread and growing use of the system, the platform for these attacks is also growing wider. This provides a motivation to design and implement better security frameworks and mechanisms to mitigate these attacks. This paper discusses; 1) the security features currently provided by the Android platform; 2) a definition, few working examples and classifications of privilege escalation attacks in Android applications; 3) a classification and comparison of different frameworks and security extensions proposed in recent research. Copyright {©} 2014 Inderscience Enterprises Ltd.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Mutti, Simone</author><author>Fratantonio, Yanick</author><author>Bianchi, Antonio</author><author>Invernizzi, Luca</author><author>Corbetta, Jacopo</author><author>Kirat, Dhilung</author><author>Kruegel, Christopher</author><author>Vigna, Giovanni</author></authors></contributors><titles><title>BareDroid</title><secondary-title>Proceedings of the 31st Annual Computer Security Applications Conference on - ACSAC 2015</secondary-title></titles><periodical><full-title>Proceedings of the 31st Annual Computer Security Applications Conference on - ACSAC 2015</full-title></periodical><pages>71-80</pages><keywords><keyword>Android</keyword><keyword>Bare-metal Analysis</keyword><keyword>Evasive Malware</keyword></keywords><dates><year>2015</year></dates><isbn>9781450336826</isbn><electronic-resource-num>10.1145/2818000.2818036</electronic-resource-num><urls><pdf-urls><url>internal-pdf://4e57c5bb4be7c981ae7dace179db7a94a94a.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2818000.2818036</url></web-urls></urls><abstract>To protect Android users, researchers have been analyzing unknown, potentially-malicious applications by using sys- tems based on emulators, such as the Google’s Bouncer and Andrubis. Emulators are the go-to choice because of their convenience: they can scale horizontally over multiple hosts, and can be reverted to a known, clean state in a matter of seconds. Emulators, however, are fundamentally different from real devices, and previous research has shown how it is possible to automatically develop heuristics to identify an emulated environment, ranging from simple flag checks and unrealistic sensor input, to fingerprinting the hypervi- sor’s handling of basic blocks of instructions. Aware of this aspect, malware authors are starting to exploit this funda- mental weakness to evade current detection systems. Unfor- tunately, analyzing apps directly on bare metal at scale has been so far unfeasible, because the time to restore a device to a clean snapshot is prohibitive: with the same budget, one can analyze an order of magnitude less apps on a physical device than on an emulator. In this paper, we propose BareDroid, a system that makes bare-metal analysis of Android apps feasible by quickly restoring real devices to a clean snapshot. We show how BareDroid is not detected as an emulated analysis en- vironment by emulator-aware malware or by heuristics from prior research, allowing BareDroid to observe more poten- tially malicious activity generated by apps. Moreover, we provide a cost analysis, which shows that replacing emu- lators with BareDroid requires a financial investment of less than twice the cost of the servers that would be run- ning the emulators. Finally, we release BareDroid as an open source project, in the hope it can be useful to other researchers to strengthen their analysis systems. Permission</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Kantola, David</author><author>Chin, Erika</author><author>He, Warren</author><author>Wagner, David</author></authors></contributors><titles><title>Reducing attack surfaces for intra-application communication in android</title><secondary-title>… of the second ACM workshop on …</secondary-title></titles><periodical><full-title>… of the second ACM workshop on …</full-title></periodical><pages>69</pages><keywords><keyword>android</keyword><keyword>message passing</keyword><keyword>mobile phone security</keyword></keywords><dates><year>2012</year></dates><isbn>9781450316668</isbn><electronic-resource-num>10.1145/2381934.2381948</electronic-resource-num><urls><pdf-urls><url>internal-pdf://05d733d81f4ae372fd4d3cfdb4ec208c7d0f.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2381934.2381948%5Cnhttp://dl.acm.org/citation.cfm?id=2381948</url></web-urls></urls><abstract>The complexity of Android's message-passing system has led to numerous vulnerabilities in third-party applications. Many of these vulnerabilities are a result of developers con- fusing inter-application and intra-application communication mechanisms. Consequently, we propose modi cations to the Android platform to detect and protect inter-application mes- sages that should have been intra-application messages. Our approach automatically reduces attack surfaces in legacy ap- plications. We describe our implementation for these changes and evaluate it based on the attack surface reduction and the extent to which our changes break compatibility with a large set of popular applications. We x 100% of intra- application vulnerabilities found in our previous work, which represents 31:4% of the total security aws found in that work. Furthermore, we nd that 99:4% and 93:0% of Android applications are compatible with our sending and receiving changes, respectively.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Jing, Yiming</author><author>Zhao, Ziming</author><author>Ahn, Gail-Joon</author><author>Hu, Hongxin</author></authors></contributors><titles><title>Morpheus: Automatically Generating Heuristics to Detect Android Emulators</title><secondary-title>Proceedings of the 30th Annual Computer Security Applications Conference on - ACSAC '14</secondary-title></titles><periodical><full-title>Proceedings of the 30th Annual Computer Security Applications Conference on - ACSAC '14</full-title></periodical><pages>216-225</pages><keywords><keyword>android</keyword><keyword>emulator</keyword><keyword>malware</keyword></keywords><dates><year>2014</year></dates><isbn>9781450330053</isbn><electronic-resource-num>10.1145/2664243.2664250</electronic-resource-num><urls><pdf-urls><url>internal-pdf://60dcc2c23dce57ef996d76c6e0b89faf054c.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2664243.2664250</url></web-urls></urls><abstract>Emulator-based dynamic analysis has been widely deployed in Android application stores. While it has been proven effective in vetting applications on a large scale, it can be detected and evaded by recent Android malware strains that carry detection heuristics. Using such heuristics, an application can check the presence or contents of certain artifacts and infer the presence of emulators. However, there exists little work that systematically discovers those heuristics that would be eventually helpful to prevent malicious applications from bypassing emulator-based analysis. To cope with this challenge, we propose a framework called Morpheus that automatically generates such heuristics. Morpheus leverages our insight that an effective detection heuristic must exploit discrepancies observable by an application. To this end, Morpheus analyzes the application sandbox and retrieves observable artifacts from both Android emulators and real devices. Afterwards, Morpheus further analyzes the retrieved artifacts to extract and rank detection heuristics. The evaluation of our proof-of-concept implementation of Morpheus reveals more than 10,000 novel detection heuristics that can be utilized to detect existing emulator-based malware analysis tools. We also discuss the discrepancies in Android emulators and potential countermeasures.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Thomas, Daniel R.</author><author>Beresford, Alastair R.</author><author>Rice, Andrew</author></authors></contributors><titles><title>Security Metrics for the Android Ecosystem</title><secondary-title>Proceedings of the 5th Annual ACM CCS Workshop on Security and Privacy in Smartphones and Mobile Devices - SPSM '15</secondary-title></titles><periodical><full-title>Proceedings of the 5th Annual ACM CCS Workshop on Security and Privacy in Smartphones and Mobile Devices - SPSM '15</full-title></periodical><pages>87-98</pages><keywords><keyword>all or part of</keyword><keyword>android</keyword><keyword>classroom use is granted</keyword><keyword>copies are not made</keyword><keyword>ecosystems</keyword><keyword>metrics</keyword><keyword>or</keyword><keyword>or distributed</keyword><keyword>or hard copies of</keyword><keyword>permission to make digital</keyword><keyword>this work for personal</keyword><keyword>updates</keyword><keyword>vulnerabilities</keyword><keyword>without fee provided that</keyword></keywords><dates><year>2015</year></dates><isbn>9781450338196</isbn><electronic-resource-num>10.1145/2808117.2808118</electronic-resource-num><urls><pdf-urls><url>internal-pdf://58a1022bc2da41760d7cf4eb357c69cd8619.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2808117.2808118</url></web-urls></urls><abstract>The security of Android depends on the timely delivery of updates to fix critical vulnerabilities. In this paper we map the complex network of players in the Android ecosystem who must collaborate to provide updates, and determine that inaction by some manufacturers and network operators means many handsets are vulnerable to critical vulnerabilities. We define the FUM security metric to rank the performance of device manufacturers and network operators, based on their provision of updates and exposure to critical vulnerabilities. Using a corpus of 20 400 devices we show that there is significant variability in the timely delivery of security updates across different device manufacturers and network operators. This provides a comparison point for purchasers and regulators to determine which device manufacturers and network operators provide security updates and which do not. We find that on average 87.7% of Android devices are exposed to at least one of 11 known critical vulnerabilities and, across the ecosystem as a whole, assign a FUM security score of 2.87 out of 10. In our data, Nexus devices do considerably better than average with a score of 5.17; and LG is the best manufacturer with a score of 3.97</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhou, Yajin</author><author>Wu, Lei</author><author>Wang, Zhi</author><author>Jiang, Xuxian</author></authors></contributors><titles><title>Harvesting Developer Credentials in Android Apps</title><secondary-title>Proceedings of the 8th ACM Conference on Security &amp; Privacy in Wireless and Mobile Networks (WiSec)</secondary-title></titles><periodical><full-title>Proceedings of the 8th ACM Conference on Security &amp; Privacy in Wireless and Mobile Networks (WiSec)</full-title></periodical><keywords><keyword>amazon aws</keyword><keyword>credminer</keyword><keyword>information flow</keyword><keyword>static analysis</keyword></keywords><dates><year>2015</year></dates><isbn>9781450336239</isbn><electronic-resource-num>10.1145/2766498.2766499</electronic-resource-num><urls><pdf-urls><url>internal-pdf://46bdb76153ee3598228c674c194381592b17.pdf</url></pdf-urls></urls><abstract>Use static analysis to find hardcoded credentials: specifically Amazon AWS tokens and JavaMail. Correct AWS: root password only on server, root password can create limited privileges credentials, in addition, the app can authenticate the device to Amazon and get per-user temporary access tokens that can have user-specific configurable permissions. The example provided by Amazon is insecure because the temporary credential can access all the data! However developers still include root password, or generic credential, or set the per-user permissions wronogly. JavaMail library used to send emails (hardcoded credentials is the only option). They check if specific classes/methods are used. To overcome name obfuscation they use ngram-based system on methods' code, ignoring names of non-system fields/methods (system stuff is not obfuscated) Then they identify call sites and apply backward slicing on them. Finally the forward exeute the slice, focusing on string operations. They &quot;emualte&quot; main String manipulation operations. They also evaluate validity of the credentials by dynamically running the app and see successes/fails at call sites. They analyze 36K apps: 151/237 vulnerable JavaMail and 132/196 are vulnerable AWS tokens. They have 20% better recovery than PlayDrone (grep-based) on AWS tokens.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sun, Mingshen</author><author>Li, Mengmeng</author><author>Lui, John C S</author></authors></contributors><titles><title>DroidEagle: seamless detection of visually similar Android apps</title><secondary-title>Proceedings of the 8th ACM Conference on Security &amp; Privacy in Wireless and Mobile Networks</secondary-title></titles><periodical><full-title>Proceedings of the 8th ACM Conference on Security &amp; Privacy in Wireless and Mobile Networks</full-title></periodical><pages>9</pages><keywords/><dates><year>2015</year></dates><isbn>978-1-4503-3623-9</isbn><electronic-resource-num>10.1145/2766498.2766508</electronic-resource-num><urls><pdf-urls><url>internal-pdf://32a8a7cd990430d4b37a61e1dac0d551186c.pdf</url></pdf-urls><web-urls><url>http://doi.acm.org/10.1145/2766498.2766508</url></web-urls></urls><abstract>They detect graphically similar app to detect repackaging. Market-level sistem: layout edit distance (LED) on layout graph (hierarchical layout structure), remove invisible elements, do not consider too small layouts, count number of members in layout to quick estimate LED. Then, sum all distance between all the trees. On-device system: the generate hash by concatenating hash of (width, height, text) of non-View and non-ViewGroup elements. In addition, they remove all the leafes. Implemented by checking locally on a db of popular apps. In both case, only suspicious if signature do not match with origianl one. Supplementary detection for full-graphical: perception hash on resources. They detect repackaged from alternative market and spoofed antivirus. They evaluate FN by manually creating repackaged stuff in different ways.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Kuzuno, Hiroki</author><author>Tonami, Satoshi</author></authors></contributors><titles><title>Signature generation for sensitive information leakage in android applications</title><secondary-title>Proceedings - International Conference on Data Engineering</secondary-title></titles><periodical><full-title>Proceedings - International Conference on Data Engineering</full-title></periodical><pages>112-119</pages><keywords><keyword>Privacy</keyword><keyword>Security</keyword><keyword>Smartphone</keyword></keywords><dates><year>2013</year></dates><isbn>9781467353021</isbn><electronic-resource-num>10.1109/ICDEW.2013.6547438</electronic-resource-num><urls><pdf-urls><url>internal-pdf://37a5ca6bed780535b8c4789b7b0af6fce424.pdf</url></pdf-urls></urls><abstract>In recent years, there has been rapid growth in mobile devices such as smartphones, and a number of applications are developed specifically for the smartphone market. In particular, there are many applications that are “free” to the user, but depend on advertisement services for their revenue. Such applications include an advertisement module - a library provided by the advertisement service - that can collect a user's sensitive information and transmit it across the network. Such information is used for targeted advertisements, and user behavior statistics. Users accept this business model, but in most cases the applications do not require the user's acknowledgment in order to transmit sensitive information. Therefore, such applications' behavior becomes an invasion of privacy. In our analysis of 1,188 Android applications' network traffic and permissions, 93% of the applications we analyzed connected to multiple destinations when using the network. 61% required a permission combination that included both access to sensitive information and use of networking services. These applications have the potential to leak the user's sensitive information. Of the 107,859 HTTP packets from these applications, 23,309 (22%) contained sensitive information, such as device identification number and carrier name. In an effort to enable users to control the transmission of their private information, we propose a system which, using a novel clustering method based on the HTTP packet destination and content distances, generates signatures from the clustering result and uses them to detect sensitive information leakage from Android applications. Our system does not require an Android framework modification or any special privileges. Thus users can easily introduce our system to their devices, and manage suspicious applications' network behavior in a fine grained manner. Our system accurately detected 94% of the sensitive information leakage from the applications- evaluated and produced only 5% false negative results, and less than 3% false positive results.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Tower, Gran Park</author></authors></contributors><titles><title>Poster : Seven Years in MWS : Experiences of Sharing Datasets with Anti-malware Research Community in Japan</title><secondary-title>Ccs</secondary-title></titles><periodical><full-title>Ccs</full-title></periodical><pages>3-4</pages><keywords><keyword>dataset</keyword><keyword>malware</keyword><keyword>mws</keyword><keyword>research community</keyword></keywords><dates><year>2014</year></dates><isbn>9781450329576</isbn><electronic-resource-num>10.1145/2660267.2662357</electronic-resource-num><urls><pdf-urls><url>internal-pdf://546ef918c21605906dc3c02e7a56e6b280c3.pdf</url></pdf-urls></urls></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Yen, Ting-Fang</author><author>Heorhiadi, Victor</author><author>Oprea, Alina</author><author>Reiter, Michael K</author><author>Juels, Ari</author></authors></contributors><titles><title>An Epidemiological Study of Malware Encounters in a Large Enterprise</title><secondary-title>Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security</secondary-title></titles><periodical><full-title>Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security</full-title></periodical><pages>1117-1130</pages><keywords><keyword>enterprise security</keyword><keyword>logistic regression</keyword><keyword>malware encounters</keyword><keyword>measurement</keyword></keywords><dates><year>2014</year></dates><isbn>978-1-4503-2957-6</isbn><electronic-resource-num>10.1145/2660267.2660330</electronic-resource-num><urls><pdf-urls><url>internal-pdf://29c0d4304d3730f54f1ce38ef2b045d79675.pdf</url></pdf-urls><web-urls><url>http://doi.acm.org/10.1145/2660267.2660330</url></web-urls></urls><abstract>We present an epidemiological study of malware encounters in a large, multi-national enterprise. Our data sets allow us to observe or infer not only malware presence on enterprise computers, but also malware entry points, network locations of the computers (i.e., inside the enterprise network or outside) when the malware were encountered, and for some web-based malware encounters, web activities that gave rise to them. By coupling this data with demographic information for each host's primary user, such as his or her job title and level in the management hierarchy, we are able to paint a reasonably comprehensive picture of malware encounters for this enterprise. We use this analysis to build a logistic regression model for inferring the risk of hosts encountering malware; those ranked highly by our model have a &gt;3x higher rate of encountering malware than the base rate. We also discuss where our study confirms or refutes other studies and guidance that our results suggest.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Chen, Xin</author><author>Zhu, Sencun</author></authors></contributors><titles><title>DroidJust: Automated Functionality-Aware Privacy Leakage Analysis for Android Applications</title><secondary-title>WiSec</secondary-title></titles><periodical><full-title>WiSec</full-title></periodical><pages>5:1--5:12</pages><keywords><keyword>Android security</keyword><keyword>Privacy leakage detection</keyword><keyword>Static taint analysis</keyword></keywords><dates><year>2015</year></dates><isbn>978-1-4503-3623-9</isbn><electronic-resource-num>10.1145/2766498.2766507</electronic-resource-num><urls><pdf-urls><url>internal-pdf://29e5a2ff003df735b91cfdd99ade38aa5361.pdf</url></pdf-urls><web-urls><url>https://dl.acm.org/citation.cfm?id=2766507</url></web-urls></urls><abstract>Android applications (apps for short) can send out users’ sensitive information against users’ intention. Based on the stats fromGenome and Mobile-Sandboxing, 55.8%and 59.7% Android malware families feature privacy leakage. Prior approaches to detecting privacy leakage on smartphones primarily focused on the discovery of sensitive information flows. However, Android applications also send out users’ sensitive information for legitimate functions. Due to the fuzzy nature of the privacy leakage detection problem, we formulate it as a justification problem, which aims to justify if a sensitive information transmission in an app serves any purpose, either for intended functions of the app itself or for other related functions. This formulation makes the problem more distinct and objective, and there- fore more feasible to solve than before. We propose Droid- Just, an automated approach to justifying an app’s sensi- tive information transmission by bridging the gap between the sensitive information transmission and application func- tions. We also implement a prototype of DroidJust and evaluate it over more than 6000 Google Play apps and more than 300 known malware collected from VirusTotal. Our ex- periments show that our tool can effectively and efficiently analyze Android apps for the purposes of their sensitive in- formation flows, and hence can greatly assist in detecting privacy leakage.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Li, Li</author><author>Bartel, Alexandre</author><author>Klein, Jacques</author><author>Traon, Yves Le</author></authors></contributors><titles><title>Automatically exploiting potential component leaks in android applications</title><secondary-title>Proceedings - 2014 IEEE 13th International Conference on Trust, Security and Privacy in Computing and Communications, TrustCom 2014</secondary-title></titles><periodical><full-title>Proceedings - 2014 IEEE 13th International Conference on Trust, Security and Privacy in Computing and Communications, TrustCom 2014</full-title></periodical><pages>388-397</pages><keywords/><dates><year>2015</year></dates><isbn>9781479965137</isbn><electronic-resource-num>10.1109/TrustCom.2014.50</electronic-resource-num><urls><pdf-urls><url>internal-pdf://342cf6b1d06e2d080ca20ac0cfa9870f0970.pdf</url></pdf-urls></urls></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wang, Yang</author><author>Watson, Bryan</author><author>Zheng, Jun</author></authors></contributors><titles><title>Mining Permission Request Patterns for Malicious Android Applications</title></titles><periodical/><keywords><keyword>android permission</keyword><keyword>malicious</keyword><keyword>mobile security</keyword></keywords><urls><pdf-urls><url>internal-pdf://197f87c3ab1441604a47152f6c8f0480ccbc.pdf</url></pdf-urls></urls></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Luo, Weiliang</author><author>Xu, Shouhuai</author><author>Jiang, Xuxian</author></authors></contributors><titles><title>Real-time detection and prevention of android SMS permission abuses</title><secondary-title>Proceedings of the first international workshop on Security in embedded systems and smartphones - SESP '13</secondary-title></titles><periodical><full-title>Proceedings of the first international workshop on Security in embedded systems and smartphones - SESP '13</full-title></periodical><pages>11</pages><keywords><keyword>mobile application</keyword><keyword>permission abuse</keyword><keyword>smartphone security</keyword></keywords><dates><year>2013</year></dates><isbn>9781450320689</isbn><electronic-resource-num>10.1145/2484417.2484422</electronic-resource-num><urls><pdf-urls><url>internal-pdf://655a33bdf559a05c69379ef71c899e2062b7.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2484417.2484422</url></web-urls></urls><abstract>The Android permission system informs users about the privileges demanded by applications (apps), and in principle allows users to assess potential risks of apps. Unfortunately, recent studies showed that the installation-time permission verification procedure is often ignored, due to users' lack of attention or insufficient understanding of the privileges or the Android permission system. As a consequence, malicious apps are likely granted with security- and privacy-critical permissions, and launch various kinds of attacks without being noticed by the users. In this paper, we present the design, analysis, and implementation of DroidPAD, a novel solution that aims to leverage system-wide state information to detect and block in real-time possible abuses of Android permissions. Especially, with a focus on SMS-related permissions, we have implemented a proof-of-concept prototype. Our evaluation based on 48 representative benign and malicious apps shows that DroidPAD successfully detected SMS permissions-abusing activities with low false-positive rates, and zero false-negative rates. © 2013 ACM.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Arzt, Steven</author><author>Huber, Stephan</author><author>Rasthofer, Siegfried</author><author>Bodden, Eric</author></authors></contributors><titles><title>Denial-of-App Attack: Inhibiting the Installation of Android Apps on Stock Phones</title><secondary-title>… of the 4th ACM Workshop on …</secondary-title></titles><periodical><full-title>… of the 4th ACM Workshop on …</full-title></periodical><pages>21-26</pages><keywords/><dates><year>2014</year></dates><isbn>9781450331555</isbn><electronic-resource-num>10.1145/2666620.2666621</electronic-resource-num><urls><pdf-urls><url>internal-pdf://136ed0df657e713377302b8ea976eb77ec22.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2666621</url></web-urls></urls></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bianchi, Antonio</author><author>Fratantonio, Yanick</author><author>Kruegel, Christopher</author><author>Vigna, Giovanni</author></authors></contributors><titles><title>NJAS: Sandboxing Unmodified Applications in non-rooted Devices Running stock Android</title><secondary-title>Proceedings of the 5th Annual ACM CCS Workshop on Security and Privacy in Smartphones and Mobile Devices (SPSM)</secondary-title></titles><periodical><full-title>Proceedings of the 5th Annual ACM CCS Workshop on Security and Privacy in Smartphones and Mobile Devices (SPSM)</full-title></periodical><pages>27-38</pages><keywords><keyword>android</keyword><keyword>code sandboxing</keyword><keyword>mobile security</keyword><keyword>system call</keyword></keywords><dates><year>2015</year></dates><isbn>9781450338196</isbn><electronic-resource-num>10.1145/2808117.2808122</electronic-resource-num><urls><pdf-urls><url>internal-pdf://96ab4853031295e71c868ae2654a89aba321.pdf</url></pdf-urls></urls><abstract>Sandoboxing without app changes or os mods. Using custom classloader and ptrace. Patching a lot of stuff (and Binder) to provide the right context. Different policies: network, contacts, files, sms. Performance 0%--&gt;110% depending on IO. Problem: compatibility. Run on 20.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Rovelli, Paolo</author><author>Vigfusson, Ymir</author></authors></contributors><titles><title>PMDS : Permission-based Malware Detection System</title><secondary-title>10th International Conference on Information Systems Security (ICISS 2014</secondary-title></titles><periodical><full-title>10th International Conference on Information Systems Security (ICISS 2014</full-title></periodical><pages>338-357</pages><keywords><keyword>android</keyword><keyword>data mining</keyword><keyword>heuristics</keyword><keyword>learning</keyword><keyword>machine</keyword><keyword>malware detection system</keyword><keyword>permissions</keyword></keywords><dates><year>2014</year></dates><isbn>9783319138404</isbn><urls><pdf-urls><url>internal-pdf://105ada32a3b7f8c29abc54b4e64932abc7d2.pdf</url></pdf-urls></urls><abstract>The meteoric growth of the Android mobile platform has made it a main target of cyber-criminals. Mobile malware specifically targeting Android has surged and grown in tandem with the rising popularity of the platform [3, 5, 4, 6]. In response, the honus is on defenders to increase the difficulty of malware development to curb its rampant growth, and to devise effective detection mechanisms specifically targeting Android malware in order to better protect the end-users. In this paper, we address the following question: do malicious applications on Android request predictably different permissions than legitimate applications? Based on analysis of 2950 samples of benign and malicious Android applications, we propose a novel Android malware detection technique called Permission-based Malware Detection Systems (PMDS). In PMDS, we view requested permissions as behavioral markers and build a machine learning classifier on those markers to automatically identify for unseen applications potentially harmful behavior based on the combination of permissions they require. By design, PMDS has the potential to detect previously unknown, and zero-day or next-generation malware. If attackers adapt and request for fewer permissions, PMDS will have impeded the simple strategies by which malware developers currently abuse their victims. Experimental results show that PMDS detects more than 92–94% of previously unseen malware with a false positives rate of 1.52–3.93%.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhang, Nan</author><author>Yuan, Kan</author><author>Naveed, Muhammad</author><author>Zhou, Xiaoyong</author><author>Wang, Xiaofeng</author></authors></contributors><titles><title>Leave me alone: App-level protection against runtime information gathering on android</title><secondary-title>Proceedings - IEEE Symposium on Security and Privacy</secondary-title></titles><periodical><full-title>Proceedings - IEEE Symposium on Security and Privacy</full-title></periodical><pages>915-930</pages><volume>2015-July</volume><keywords/><dates><year>2015</year></dates><isbn>9781467369497</isbn><electronic-resource-num>10.1109/SP.2015.61</electronic-resource-num><urls><pdf-urls><url>internal-pdf://91ac85e9297707f74e13f90f041c77e9eed4.pdf</url></pdf-urls></urls><abstract>Stealing of sensitive information from apps is always considered to be one of the most critical threats to Android security. Recent studies show that this can happen even to the apps without explicit implementation flaws, through exploiting some design weaknesses of the operating system, e.g., Shared communication channels such as Bluetooth, and side channels such as memory and network-data usages. In all these attacks, a malicious app needs to run side-by-side with the target app (the victim) to collect its runtime information. Examples include recording phone conversations from the phone app, gathering WebMD's data usages to infer the disease condition the user looks at, etc. This runtime-information-gathering (RIG) threat is realistic and serious, as demonstrated by prior research and our new findings, which reveal that the malware monitoring popular Android-based home security systems can figure out when the house is empty and the user is not looking at surveillance cameras, and even turn off the alarm delivered to her phone. To defend against this new category of attacks, we propose a novel technique that changes neither the operating system nor the target apps, and provides immediate protection as soon as an ordinary app (with only normal and dangerous permissions) is installed. This new approach, called App Guardian, thwarts a malicious app's runtime monitoring attempt by pausing all suspicious background processes when the target app (called principal) is running in the foreground, and resuming them after the app stops and its runtime environment is cleaned up. Our technique leverages a unique feature of Android, on which third-party apps running in the background are often considered to be disposable and can be stopped anytime with only a minor performance and utility implication. We further limit such an impact by only focusing on a small set of suspicious background apps, which are identified by their behaviors inferred from their side channels (e.g., - hread names, CPU scheduling and kernel time). App Guardian is also carefully designed to choose the right moments to start and end the protection procedure, and effectively protect itself against malicious apps. Our experimental studies show that this new technique defeated all known RIG attacks, with small impacts on the utility of legitimate apps and the performance of the OS. Most importantly, the idea underlying our approach, including app-level protection, side-channel based defense and lightweight response, not only significantly raises the bar for the RIG attacks and the research on this subject but can also inspire the follow-up effort on new detection systems practically deployable in the fragmented Android ecosystem.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Shabtai, Asaf</author></authors></contributors><titles><title>Evaluation of Security Solutions for Android Systems</title><secondary-title>arXiv preprint</secondary-title></titles><periodical><full-title>arXiv preprint</full-title></periodical><keywords><keyword>mobile device security</keyword><keyword>security evaluation</keyword><keyword>smartphone</keyword></keywords><dates><year>2015</year></dates><urls><pdf-urls><url>internal-pdf://1502.04870.pdf</url></pdf-urls></urls><abstract>With the increasing usage of smartphones a plethora of security solutions are being designed and developed. Many of the security solutions fail to cope with advanced attacks and are not aways properly designed for smartphone platforms. Therefore, there is a need for a methodology to evaluate their effectiveness. Since the Android operating system has the highest market share today, we decided to focus on it in this study in which we review some of the state-of-the-art security solutions for Android-based smartphones. In addition, we present a set of evaluation criteria aiming at evaluating security mechanisms that are specifically designed for Android-based smartphones. We believe that the proposed framework will help security solution designers develop more effective solutions and assist security experts evaluate the effectiveness of security solutions for Android-based smartphones.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Shan, Zhiyong</author><author>Neamtiu, Iulian</author><author>Qian, Zhiyun</author><author>Torrieri, Don</author></authors></contributors><titles><title>Proactive restart as cyber maneuver for Android</title><secondary-title>Proceedings - IEEE Military Communications Conference MILCOM</secondary-title></titles><periodical><full-title>Proceedings - IEEE Military Communications Conference MILCOM</full-title></periodical><pages>19-24</pages><volume>2015-Decem</volume><keywords><keyword>Androids</keyword><keyword>Computer security</keyword><keyword>Graphical user interfaces</keyword><keyword>Humanoid robots</keyword><keyword>Smart phones</keyword><keyword>Time series analysis</keyword></keywords><dates><year>2015</year></dates><isbn>9781509000739</isbn><electronic-resource-num>10.1109/MILCOM.2015.7357412</electronic-resource-num><urls><pdf-urls><url>internal-pdf://960bc9c4a8934e2d3208534d66dc9be29af7.pdf</url></pdf-urls></urls></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Guo, Dai-Fei</author><author>Sui, Ai-Fen</author><author>Shi, Yi-Jie</author><author>Hu, Jian-Jun</author><author>Lin, Guan-Zhou</author><author>Guo, Tao</author></authors></contributors><titles><title>Behavior Classification based Self-learning Mobile Malware Detection</title><secondary-title>Journal of Computers</secondary-title></titles><periodical><full-title>Journal of Computers</full-title></periodical><pages>851-858</pages><volume>9</volume><issue>4</issue><keywords><keyword>behavior classification</keyword><keyword>data mining</keyword><keyword>mobile internet</keyword><keyword>mobile malware</keyword></keywords><dates><year>2014</year></dates><electronic-resource-num>10.4304/jcp.9.4.851-858</electronic-resource-num><urls><pdf-urls><url>internal-pdf://2509bd65a90557d9a4e3c7c443a7aa2b6237.pdf</url></pdf-urls><web-urls><url>http://ojs.academypublisher.com/index.php/jcp/article/view/jcp0904851858</url></web-urls></urls><abstract>More and more mobile malware appears on mobile internet and pose great threat to mobile users. It is difficult for traditional signature-based anti-malware system to detect the polymorphic and metamorphic mobile malware. A mobile malware behavior analysis method based on behavior classification and self-learning data mining is proposed to detect the malicious network behavior of the unknown or metamorphic mobile malware. A network behavior classification module is used to divide the network behavior data of mobile malware into different categories according to the behavior characteristic in the training and detection phase. Three types of network behavior data of mobile malware and normal network access are employed to train the different Na&amp;iuml;ve Bayesian classifier respectively. Those classifiers are used to analyze the corresponding type of network behavior to detect the new or metamorphic mobile malware. An incremental self-learning method is adopted to gradually optimize those Na&amp;iuml;ve Bayesian Classifiers for different behavior. The simulation results showed that those Na&amp;iuml;ve Bayesian Classifiers based on behavior classification have better accuracy rate of analysis on mobile malware network behavior. Performance simulation results showed that the network behavior analysis system based on the proposed method can analyze the mobile malware on mobile internet in real time.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Neuner, Sebastian</author><author>Veen, Victor Van Der</author><author>Lindorfer, Martina</author></authors></contributors><titles><title>Enter Sandbox: Android Sandbox Comparison</title><secondary-title>3rd IEEE Mobile Security Technologies Workshop</secondary-title></titles><periodical><full-title>3rd IEEE Mobile Security Technologies Workshop</full-title></periodical><issue>October</issue><keywords><keyword>android</keyword><keyword>dynamic analysis</keyword><keyword>malware</keyword><keyword>sandbox eva-</keyword><keyword>sandbox fingerprinting</keyword><keyword>sion</keyword></keywords><dates><year>2014</year></dates><urls><pdf-urls><url>internal-pdf://1410.7749.pdf</url></pdf-urls></urls><abstract>Expecting the shipment of 1 billion Android devices in 2017, cyber criminals have naturally extended their vicious activities towards Google’s mobile operating system. With an estimated number of 700 new Android applications released every day, keeping control over malware is an increasingly challenging task. In recent years, a vast number of static and dynamic code analysis platforms for analyzing Android applications and making decision regarding their maliciousness have been introduced in academia and in the commercial world. These platforms differ heavily in terms of feature support and application properties being analyzed. In this paper, we give an overview of the state-of- the-art dynamic code analysis platforms for Android and evaluate their effectiveness with samples from known malware corpora as well as known Android bugs like Master Key. Our results indicate a low level of diversity in analysis platforms resulting from code reuse that leaves the evaluated systems vulnerable to evasion. Furthermore the Master Key bugs could be exploited by malware to hide malicious behavior from the sandboxes.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bierma, Michael</author><author>Gustafson, Eric</author><author>Erickson, Jeremy</author><author>Fritz, David</author><author>Choe, Yung Ryn</author></authors></contributors><titles><title>Andlantis : Large-scale Android Dynamic Analysis</title><secondary-title>Conference: Mobile Security Technologies (MoST)</secondary-title></titles><periodical><full-title>Conference: Mobile Security Technologies (MoST)</full-title></periodical><keywords/><dates><year>2014</year></dates><urls><pdf-urls><url>internal-pdf://1410.7751.pdf</url></pdf-urls></urls><abstract>Analyzing Android applications for malicious behavior is an important area of research, and is made difficult, in part, by the increasingly large number of applications available for the platform. While techniques exist to perform static analysis on a large number of applications, dynamic analysis techniques are relatively limited in scale due to the computational resources required to emulate the full Android system to achieve accurate execution. We present Andlantis, a scalable dynamic analysis system capable of processing over 3000 Android applications per hour. During this processing, the system is able to collect valuable forensic data, which helps reverse-engineers and malware researchers identify and understand anomalous application behavior. We discuss the results of running 1261 malware samples through the system, and provide examples of malware analysis performed with the resulting data.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Vidas, Timothy</author><author>Tan, Jiaqi</author><author>Nahata, Jay</author><author>Tan, Chaur Lih</author><author>Christin, Nicolas</author><author>Tague, Patrick</author></authors></contributors><titles><title>A5: Automated Analysis of Adversarial Android Applications</title><secondary-title>SPSM '14: Proceedings of the 4th ACM Workshop on Security and Privacy in Smartphones &amp; Mobile Devices</secondary-title></titles><periodical><full-title>SPSM '14: Proceedings of the 4th ACM Workshop on Security and Privacy in Smartphones &amp; Mobile Devices</full-title></periodical><pages>39-50</pages><keywords/><dates><year>2014</year></dates><isbn>978-1-4503-3155-5</isbn><electronic-resource-num>10.1145/2666620.2666630</electronic-resource-num><urls><pdf-urls><url>internal-pdf://0894df5f22f93580bf091324c7b7f3a6779b.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2666630%5Cnpapers3://publication/doi/10.1145/2666620.2666630</url></web-urls></urls><abstract>Mobile malware is growing - both in overall volume and in number of existing variants - at a pace rapid enough that systematic manual, human analysis is becoming increasingly difficult. As a result, there is a pressing need for techniques and tools that</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Fernandes, Earlence</author><author>Crowell, Alexander</author><author>Aluri, Ajit</author><author>Prakash, Atul</author></authors></contributors><titles><title>Anception: Application Virtualization For Android</title></titles><periodical/><keywords/><dates><year>2014</year></dates><urls><pdf-urls><url>internal-pdf://1401.6726.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1401.6726</url></web-urls></urls><abstract>The problem of malware has become significant on Android devices. Library operating systems and application virtualization are both possible solutions for confining malware. Unfortunately, such solutions do not exist for Android. Designing mechanisms for application virtualization is a significant chal- lenge for several reasons: (1) graphics performance is important due to popularity of games and (2) applications with the same UID can share state. This paper presents Anception, the first flexible application virtualization framework for Android. It is imple- mented as a modification to the Android kernel and supports application virtualization that addresses the above requirements. Anception is able to confine many types of malware while supporting unmodified Android applications. Our Anception- based system exhibits up to 3.9% overhead on various 2D/3D benchmarks, and 1.8% overhead on the SunSpider benchmark.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Omeleze, S</author><author>Venter, HS</author></authors></contributors><titles><title>Testing the harmonised digital forensic investigation process model-using an Android mobile phone</title><secondary-title>Information Security for South Africa,  …</secondary-title></titles><periodical><full-title>Information Security for South Africa,  …</full-title></periodical><keywords><keyword>27043</keyword><keyword>android mobile phone</keyword><keyword>digital forensics investigation</keyword><keyword>har-</keyword><keyword>iec</keyword><keyword>iso</keyword><keyword>mobile forensic framework</keyword><keyword>mobile forensics</keyword><keyword>monised digital forensic investigation</keyword><keyword>process model</keyword></keywords><dates><year>2013</year></dates><isbn>9781479908080</isbn><urls><pdf-urls><url>internal-pdf://715d5d4d988fa2f128f63c33812367d2b47b.pdf</url></pdf-urls><web-urls><url>http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=6641063</url></web-urls></urls></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Savola, Reijo M.</author><author>Vaisanen, Teemu</author><author>Evesti, Antti</author><author>Savolainen, Pekka</author><author>Kemppainen, Juha</author><author>Kokemaki, Marko</author></authors></contributors><titles><title>Toward risk-driven security measurement for Android smartphone platforms</title><secondary-title>2013 Information Security for South Africa - Proceedings of the ISSA 2013 Conference</secondary-title></titles><periodical><full-title>2013 Information Security for South Africa - Proceedings of the ISSA 2013 Conference</full-title></periodical><issue>i</issue><keywords><keyword>Android</keyword><keyword>risk analysis</keyword><keyword>security effectiveness</keyword><keyword>security metrics</keyword></keywords><dates><year>2013</year></dates><isbn>9781479908080</isbn><electronic-resource-num>10.1109/ISSA.2013.6641049</electronic-resource-num><urls><pdf-urls><url>internal-pdf://33931b8d35f02ce3ffc5975fe8580144ff9a.pdf</url></pdf-urls></urls><abstract>Security for Android smartphone platforms is a challenge arising in part from their openness. We analyse the security objectives of two distinct envisioned public safety and security mobile network systems utilising the Android platform. The analysis is based on an industrial risk analysis activity. In addition, we propose initial heuristics for security objective decomposition aimed at security metrics definition. Systematically defined and applied security metrics can be used for informed risk-driven security decision-making, enabling higher security effectiveness. © 2013 IEEE.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Cleland-Huang, Jane</author></authors></contributors><titles><title>Toward meaningful industrial - Academic partnerships</title><secondary-title>IEEE Software</secondary-title></titles><periodical><full-title>IEEE Software</full-title></periodical><pages>18-21</pages><volume>32</volume><issue>1</issue><keywords><keyword>Archie</keyword><keyword>Collaborative Creativity Canvas</keyword><keyword>FlexiSketch</keyword><keyword>Ready-Set-Transfer</keyword><keyword>requirements engineering</keyword><keyword>software engineering</keyword><keyword>technology transfer</keyword></keywords><dates><year>2015</year></dates><isbn>9781467372848</isbn><electronic-resource-num>10.1109/MS.2015.20</electronic-resource-num><urls><pdf-urls><url>internal-pdf://4983313b2a0d2a89d46c233d6ceb9ff77531.pdf</url></pdf-urls></urls></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Alam, Shahid</author><author>Coady, Yvonne</author></authors></contributors><titles><title>In-Cloud Malware Analysis and Detection : State of the Art</title></titles><periodical/><pages>1-6</pages><keywords><keyword>cloud computing</keyword><keyword>in-cloud services</keyword><keyword>mal-</keyword><keyword>malware analysis</keyword></keywords><dates><year>2014</year></dates><isbn>9781450330336</isbn><electronic-resource-num>10.1145/2659651.2659730</electronic-resource-num><urls><pdf-urls><url>internal-pdf://82972295ee82ce2b8921e882c4c03ccdfac0.pdf</url></pdf-urls></urls><abstract>With the advent of Internet of Things, we are facing an-other wave of malware attacks, that encompass intelligent embedded devices. Because of the limited energy resources, running a complete malware detector on these devices is quite challenging. There is a need to devise new techniques to detect malware on these devices. Malware detection is one of the services that can be provided as an in-cloud ser-vice. This paper reviews current such systems, discusses there pros and cons, and recommends an improved in-cloud malware analysis and detection system. We introduce a new three layered hybrid system with a lightweight antimalware engine. These features can provide faster malware detection response time, shield the client from malware and reduce the bandwidth between the client and the cloud, compared to other such systems. The paper serves as a motivation for improving the current and developing new techniques for in-cloud malware analysis and detection system.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Geneiatakis, Dimitris</author><author>Fovino, Igor Nai</author><author>Kounelis, Ioannis</author><author>Stirparo, Paquale</author></authors></contributors><titles><title>A Permission verification approach for android mobile applications</title><secondary-title>Computers and Security</secondary-title></titles><periodical><full-title>Computers and Security</full-title></periodical><pages>192-205</pages><volume>49</volume><keywords><keyword>Android</keyword><keyword>Instrumentation</keyword><keyword>Permissions</keyword><keyword>Privacy</keyword><keyword>Risk assessment</keyword><keyword>Security</keyword></keywords><dates><year>2015</year></dates><electronic-resource-num>10.1016/j.cose.2014.10.005</electronic-resource-num><urls><pdf-urls><url>internal-pdf://b2f52fce1a5a52a23c057c673ce5fbb5a42d.pdf</url></pdf-urls></urls><abstract>Mobile applications build part of their security and privacy on a declarative permission model. In this approach mobile applications, to get access to sensitive resources, have to define the corresponding permissions in a manifest. However, mobile applications may request access to permissions that they do not require for their execution (over-privileges) and offer opportunities to malicious software to gain access to otherwise inaccessible resources. In this paper, we investigate on the declarative permissions model on which security and privacy services of Android rely upon. We propose a practical and efficient permission certification technique, in the direction of risk management assessment. We combine both runtime information and static analysis to profile mobile applications and identify if they are over-privileged or follow the least privilege principle. We demonstrate a transparent solution that neither requires modification to the underlying framework, nor access to the applications' original source code. We assess the effectiveness of our approach, using a randomly selected varied set of mobile applications. Results show that our approach can accurately identify whether an application is over-privileged or not, whilst at the same time guaranteeing the need of declaring specific permissions in the manifest.</abstract></record><record><database name="My Collection_301to 400.enl" path="My Collection_301to 400.enl">My Collection_301to 400.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Almohri, Hussain M J</author><author>Yao, Danfeng</author><author>Kafura, Dennis</author></authors></contributors><titles><title>DroidBarrier: Know What is Executing on your Android</title><secondary-title>Proceedings of the 4th ACM Conference on Data and Application Security and Privacy</secondary-title></titles><periodical><full-title>Proceedings of the 4th ACM Conference on Data and Application Security and Privacy</full-title></periodical><pages>257-264</pages><issue>i</issue><keywords><keyword>android malware</keyword><keyword>android system security</keyword><keyword>authentication</keyword><keyword>cesses</keyword><keyword>malicious pro-</keyword></keywords><dates><year>2014</year></dates><isbn>9781450322782</isbn><electronic-resource-num>10.1145/2557547.2557571</electronic-resource-num><urls><pdf-urls><url>internal-pdf://0913283c3948a69dd0c9d1924ed941d6fe9a.pdf</url></pdf-urls></urls><abstract>#DroidBarrier. They implement a sort of process monitor.</abstract></record></records></xml>
