<?xml version="1.0" encoding="UTF-8"?><xml><records><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Alan, Hasan Faik</author><author>Kaur, Jasleen</author></authors></contributors><titles><title>Can Android Applications Be Identified Using Only TCP/IP Headers of Their Launch Time Traffic?</title><secondary-title>Proceedings of the 9th ACM Conference on Security &amp; Privacy in Wireless and Mobile Networks - WiSec '16</secondary-title></titles><periodical><full-title>Proceedings of the 9th ACM Conference on Security &amp; Privacy in Wireless and Mobile Networks - WiSec '16</full-title></periodical><pages>61-66</pages><keywords><keyword>android apps</keyword><keyword>network traffic analysis</keyword><keyword>privacy</keyword></keywords><dates><year>2016</year></dates><isbn>9781450342704</isbn><electronic-resource-num>10.1145/2939918.2939929</electronic-resource-num><urls><pdf-urls><url>internal-pdf://675fcd88d5da7a9adc5f1f7ed97cbfbfe642.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2939918.2939929</url></web-urls></urls><abstract>The ability to identify mobile apps in network traffic has significant implications in many domains, including traffic management, malware detection, and maintaining user privacy. App identification methods in the literature typically use deep packet inspection (DPI) and analyze HTTP headers to extract app fingerprints. However, these methods cannot be used if HTTP traffic is encrypted. We investigate whether Android apps can be identified from their launch-time network traffic using only TCP/IP headers. We first capture network traffic of 86,109 app launches by repeatedly running 1,595 apps on 4 distinct Android devices. We then use supervised learning methods used previously in the web page identification literature, to identify the apps that generated the traffic. We find that: (i) popular Android apps can be identified with 88% accuracy, by using the packet sizes of the first 64 packets they generate, when the learning methods are trained and tested on the data collected from same device; (ii) when the data from an unseen device (but similar operating system/vendor) is used for testing, the apps can be identified with 67% accuracy; (iii) the app identification accuracy does not drop significantly even if the training data are stale by several days, and (iv) the accuracy does drop quite significantly if the operating system/vendor is very different. We discuss the implications of our findings as well as open issues.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Lindorfer, Martina</author><author>Volanis, Stamatis</author><author>Sisto, Alessandro</author><author>Neugschwandtner, Matthias</author><author>Athanasopoulos, Elias</author><author>Maggi, Federico</author><author>Platzer, Christian</author><author>Zanero, Stefano</author><author>Ioannidis, Sotiris</author></authors></contributors><titles><title>AndRadar: Fast discovery of Android applications in alternative markets</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>51-71</pages><volume>8550 LNCS</volume><keywords><keyword>Android</keyword><keyword>App Markets</keyword><keyword>Malware Tracking</keyword><keyword>Measurements</keyword></keywords><dates><year>2014</year></dates><isbn>9783319085081</isbn><electronic-resource-num>10.1007/978-3-319-08509-8_4</electronic-resource-num><urls><pdf-urls><url>internal-pdf://687b4f35f376e446d190768f4280d887383d.pdf</url></pdf-urls></urls><abstract>Compared to traditional desktop software, Android applications are delivered through software repositories, commonly known as application markets. Other mobile platforms, such as Apple iOS and BlackBerry OS also use the marketplace model, but what is unique to Android is the existence of a plethora of alternative application markets. This complicates the task of detecting and tracking Android malware. Identifying a malicious application in one particular market is simply not enough, as many instances of this application may exist in other markets. To quantify this phenomenon, we exhaustively crawled 8 markets between June and November 2013. Our findings indicate that alternative markets host a large number of ad-aggressive apps, a non-negligible amount of malware, and some markets even allow authors to publish known malicious apps without prompt action.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sun, Mingshen</author><author>Li, Xiaolei</author><author>Lui, John C.S.</author><author>Ma, Richard T.B.</author><author>Liang, Zhenkai</author></authors></contributors><titles><title>Monet: A User-Oriented Behavior-Based Malware Variants Detection System for Android</title><secondary-title>IEEE Transactions on Information Forensics and Security</secondary-title></titles><periodical><full-title>IEEE Transactions on Information Forensics and Security</full-title></periodical><pages>1103-1112</pages><volume>12</volume><issue>5</issue><keywords><keyword>Malware detection</keyword><keyword>android</keyword><keyword>runtime behavior</keyword><keyword>static structure</keyword></keywords><dates><year>2017</year></dates><electronic-resource-num>10.1109/TIFS.2016.2646641</electronic-resource-num><urls><pdf-urls><url>internal-pdf://650d7604c151d50f813b5b09092b3f362760.pdf</url></pdf-urls></urls><abstract>Android, the most popular mobile OS, has around 78% of the mobile market share. Due to its popularity, it attracts many malware attacks. In fact, people have discovered around one million new malware samples per quarter, and it was reported that over 98% of these new malware samples are in fact &quot;derivatives&quot; (or variants) from existing malware families. In this paper, we first show that runtime behaviors of malware's core functionalities are in fact similar within a malware family. Hence, we propose a framework to combine &quot;runtime behavior&quot; with &quot;static structures&quot; to detect malware variants. We present the design and implementation of MONET, which has a client and a backend server module. The client module is a lightweight, in-device app for behavior monitoring and signature generation, and we realize this using two novel interception techniques. The backend server is responsible for large scale malware detection. We collect 3723 malware samples and top 500 benign apps to carry out extensive experiments of detecting malware variants and defending against malware transformation. Our experiments show that MONET can achieve around 99% accuracy in detecting malware variants. Furthermore, it can defend against 10 different obfuscation and transformation techniques, while only incurs around 7% performance overhead and about 3% battery overhead. More importantly, MONET will automatically alert users with intrusion details so to prevent further malicious behaviors.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Eshghi, Soheil</author><author>Khouzani, M. H.R.</author><author>Sarkar, Saswati</author><author>Venkatesh, Santosh S.</author></authors></contributors><titles><title>Optimal Patching in Clustered Malware Epidemics</title><secondary-title>IEEE/ACM Transactions on Networking</secondary-title></titles><periodical><full-title>IEEE/ACM Transactions on Networking</full-title></periodical><pages>283-298</pages><volume>24</volume><issue>1</issue><keywords><keyword>Belief propagation</keyword><keyword>immunization and healing</keyword><keyword>security</keyword><keyword>technology adoption</keyword><keyword>wireless networks</keyword></keywords><dates><year>2016</year></dates><isbn>1063-6692</isbn><electronic-resource-num>10.1109/TNET.2014.2364034</electronic-resource-num><urls><pdf-urls><url>internal-pdf://670b55de4bb94243c8160f4b498b4116b205.pdf</url></pdf-urls></urls><abstract>Studies on the propagation of malware in mobile networks have revealed that the spread of malware can be highly inhomogeneous. Platform diversity, contact list utilization by the malware, clustering in the network structure, etc., can also lead to differing spreading rates. In this paper, a general formal framework is proposed for leveraging such heterogeneity to derive optimal patching policies that attain the minimum aggregate cost due to the spread of malware and the surcharge of patching. Using Pontryagin's Maximum Principle for a stratified epidemic model, it is analytically proven that in the mean-field deterministic regime, optimal patch disseminations are simple single-threshold policies. These policies are amenable to implementation and can serve as benchmarks for policies that have less knowledge of the network. Through numerical simulations, the behavior of optimal patching policies is investigated in sample topologies, and their advantages are demonstrated.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Gianazza, Andrea</author><author>Maggi, Federico</author><author>Fattori, Aristide</author><author>Cavallaro, Lorenzo</author><author>Zanero, Stefano</author></authors></contributors><titles><title>PuppetDroid: A User-Centric UI Exerciser for Automatic Dynamic Analysis of Similar Android Applications</title><secondary-title>arXiv preprint arXiv:</secondary-title></titles><periodical><full-title>arXiv preprint arXiv:</full-title></periodical><keywords/><dates><year>2014</year></dates><urls><pdf-urls><url>internal-pdf://1402.4826.pdf</url></pdf-urls><web-urls><url>https://arxiv.org/abs/1402.4826%5Cnhttp://arxiv.org/abs/1402.4826</url></web-urls></urls><abstract>Popularity and complexity of malicious mobile applications are rising, making their analysis difficult and labor intensive. Mobile application analysis is indeed inherently different from desktop application analysis: In the latter, the interaction of the user (i.e., victim) is crucial for the malware to correctly expose all its malicious behaviors. We propose a novel approach to analyze (malicious) mobile applications. The goal is to exercise the user interface (UI) of an Android application to effectively trigger malicious behaviors, automatically. Our key intuition is to record and reproduce the UI interactions of a potential victim of the malware, so as to stimulate the relevant behaviors during dynamic analysis. To make our approach scale, we automatically re-execute the recorded UI interactions on apps that are similar to the original ones. These characteristics make our system orthogonal and complementary to current dynamic analysis and UI-exercising approaches. We developed our approach and experimentally shown that our stimulation allows to reach a higher code coverage than automatic UI exercisers, so to unveil interesting malicious behaviors that are not exposed when using other approaches. Our approach is also suitable for crowdsourcing scenarios, which would push further the collection of new stimulation traces. This can potentially change the way we conduct dynamic analysis of (mobile) applications, from fully automatic only, to user-centric and collaborative too.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Backes, Michael</author><author>Bugiel, Sven</author><author>Gerling, Sebastian</author><author>Styp-rekowsky, Philipp Von</author></authors></contributors><titles><title>Android Security Framework : Extensible Multi-Layered Access Control on Android</title><secondary-title>Computer Security Applications Conference</secondary-title></titles><periodical><full-title>Computer Security Applications Conference</full-title></periodical><pages>46-55</pages><keywords/><dates><year>2014</year></dates><isbn>1450330053</isbn><electronic-resource-num>http://dx.doi.org/10.1145/2664243.2664265</electronic-resource-num><urls><pdf-urls><url>internal-pdf://1404.1395.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2664265%5Cnhttps://trust.cispa.saarland/~bugiel/publications/pdfs/bugiel14-acsac1.pdf</url></web-urls></urls><abstract>We introduce the Android Security Framework (ASF), a generic, extensible security framework for Android that enables the development and integration of a wide spectrum of security models in form of code-based security modules. The design of ASF reflects lessons learned from the literature on established security frameworks (such as Linux Security Modules or the BSD MAC Framework) and intertwines them with the particular requirements and challenges from the design of Android's software stack. ASF provides a novel security API that supports authors of Android security extensions in developing their modules. This overcomes the current unsatisfactory situation to provide security solutions as separate patches to the Android software stack or to embed them into Android's mainline codebase. This system security extensibility is of particular benefit for enterprise or government solutions that require deployment of advanced security models, not supported by vanilla Android. We present a prototypical implementation of ASF and demonstrate its effectiveness and efficiency by modularizing different security models from related work, such as dynamic permissions, inlined reference monitoring, and type enforcement.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Yerima, Suleiman Y.</author><author>Sezer, Sakir</author><author>Muttik, Igor</author></authors></contributors><titles><title>Android Malware Detection Using Parallel Machine Learning Classifiers</title><secondary-title>2014 Eighth International Conference on Next Generation Mobile Apps, Services and Technologies</secondary-title></titles><periodical><full-title>2014 Eighth International Conference on Next Generation Mobile Apps, Services and Technologies</full-title></periodical><pages>37-42</pages><issue>Ngmast</issue><keywords><keyword>-android</keyword><keyword>data mining</keyword><keyword>machine learning</keyword><keyword>malware detection</keyword><keyword>mobile</keyword><keyword>parallel classifiers</keyword><keyword>static analysis</keyword></keywords><dates><year>2016</year></dates><isbn>978-1-4799-5073-7</isbn><electronic-resource-num>10.1109/NGMAST.2014.23</electronic-resource-num><urls><pdf-urls><url>internal-pdf://951e23c12138e73049e48e29d141d5da498b.pdf</url></pdf-urls><web-urls><url>http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6982888%5Cnhttp://arxiv.org/abs/1607.08186%5Cnhttp://dx.doi.org/10.1109/NGMAST.2014.23</url></web-urls></urls><abstract>Mobile malware has continued to grow at an alarming rate despite on-going efforts towards mitigating the problem. This has been particularly noticeable on Android due to its being an open platform that has subsequently overtaken other platforms in the share of the mobile smart devices market. Hence, incentivizing a new wave of emerging Android malware sophisticated enough to evade most common detection methods. This paper proposes and investigates a parallel machine learning based classification approach for early detection of Android malware. Using real malware samples and benign applications, a composite classification model is developed from parallel combination of heterogeneous classifiers. The empirical evaluation of the model under different combination schemes demonstrates its efficacy and potential to improve detection accuracy. More importantly, by utilizing several classifiers with diverse characteristics, their strengths can be harnessed not only for enhanced Android malware detection but also quicker white box analysis by means of the more interpretable constituent classifiers.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Villan, Angel Gonzalez</author><author>Jorba, Josep</author></authors></contributors><titles><title>Remote Control of Mobile Devices in Android Platform</title></titles><periodical/><pages>1-10</pages><keywords/><dates><year>2013</year></dates><urls><pdf-urls><url>internal-pdf://1310.5850.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1310.5850</url></web-urls></urls><abstract>Remote control systems are a very useful element to control and monitor devices quickly and easily. This paper proposes a new architecture for remote control of Android mobile devices, analyzing the different alternatives and seeking the optimal solution in each case. Although the area of remote control, in case of mobile devices, is little explored, it may provide important advantages for testing software and hardware developments in several real devices. It can also allow an efficient management of various devices of different types for performing different tasks, related for example to security or forensic tasks. The main idea behind the proposed architecture was the design of a system to use it as a platform which provides the services needed to perform remote control of mobile devices. As a result of this research, a proof of concept was implemented. An Android application running a group of server programs on the device, connected to the network or USB interface, depending on availability. This servers can be controlled through a small client written in Java and runnable both on desktop and web systems.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Truong, Hien Thi Thu</author><author>Lagerspetz, Eemil</author><author>Nurmi, Petteri</author><author>Oliner, Adam J</author><author>Tarkoma, Sasu</author><author>Asokan, N.</author><author>Bhattacharya, Sourav</author></authors></contributors><titles><title>The Company You Keep: Mobile Malware Infection Rates and Inexpensive Risk Indicators</title><secondary-title>International Conference on World Wide Web</secondary-title></titles><periodical><full-title>International Conference on World Wide Web</full-title></periodical><pages>39-49</pages><keywords><keyword>Android</keyword><keyword>android</keyword><keyword>infection rate</keyword><keyword>malware detection</keyword><keyword>mobile malware</keyword></keywords><dates><year>2014</year></dates><isbn>9781450327442</isbn><electronic-resource-num>10.1145/2566486.2568046</electronic-resource-num><urls><pdf-urls><url>internal-pdf://919b261470386fa9ea7a8e03ba122ce56c01.pdf</url></pdf-urls></urls><abstract>There is little information from independent sources in the public domain about mobile malware infection rates. The only previous independent estimate (0.0009%) [5], was based on indirect measurements obtained from domain name resolution traces. In this paper, we present the first independent study of malware infection rates and associated risk factors using data collected directly from over 55,000 Android devices. We find that the malware infection rates in Android devices estimated using two malware datasets (0.28% and 0.26%), though small, are significantly higher than the previous independent estimate. Using our datasets, we investigate how indicators extracted inexpensively from the devices correlate with malware infection. Based on the hypothesis that some application stores have a greater density of malicious applications and that advertising within applications and cross-promotional deals may act as infection vectors, we investigate whether the set of applications used on a device can serve as an indicator for infection of that device. Our analysis indicates that this alone is not an accurate indicator for pinpointing infection. However, it is a very inexpensive but surprisingly useful way for significantly narrowing down the pool of devices on which expensive monitoring and analysis mechanisms must be deployed. Using our two malware datasets we show that this indicator performs 4.8 and 4.6 times (respectively) better at identifying infected devices than the baseline of random checks. Such indicators can be used, for example, in the search for new or previously undetected malware. It is therefore a technique that can complement standard malware scanning by anti-malware tools. Our analysis also demonstrates a marginally significant difference in battery use between infected and clean devices.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Schreckling, Daniel</author><author>Posegga, Joachim</author><author>Hausknecht, Daniel</author></authors></contributors><titles><title>Constroid: data-centric access control for android</title><secondary-title>Proceedings of the 27th Annual ACM Symposium on Applied Computing</secondary-title></titles><periodical><full-title>Proceedings of the 27th Annual ACM Symposium on Applied Computing</full-title></periodical><pages>1478-1485</pages><keywords><keyword>Android</keyword><keyword>access control</keyword><keyword>android</keyword><keyword>applied security</keyword><keyword>privacy</keyword><keyword>usage control</keyword></keywords><dates><year>2012</year></dates><isbn>978-1-4503-0857-1</isbn><electronic-resource-num>10.1145/2231936.2232012</electronic-resource-num><urls><pdf-urls><url>internal-pdf://940cc357b562276a1d7236a95c0f2d19c431 (1).pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2232012%5Cnhttp://doi.acm.org/10.1145/2231936.2232012</url></web-urls></urls><abstract>We introduce Constroid, a data-centric security policy management\nframework for Android. It defines a new middleware which allows the\ndeveloper to specify well defined data items of fine granularity.\nFor these data items, Constroid administrates security policies which\nare based on the usage control model. They can only be modified by\nthe user of an application not by the applications itself. We use\nCon-stroid's middle-ware to protect the security policies, ensure\nconsistency between a data item and its corresponding security policy,\nand describe how our prototype implementation can enforce a subset\nof possible usage control policies. In this way, our contribution\nshows how we overcome the rigid API-driven approach to security in\nAndroid. The structure and implementation of our framework is presented\nand discussed in terms of security, performance, and usability.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bhattacharya, Sukriti</author><author>Menendez, Hector D.</author><author>Barr, Earl</author><author>Clark, David</author></authors></contributors><titles><title>ITect: Scalable Information Theoretic Similarity for Malware Detection</title></titles><periodical/><keywords/><dates><year>2016</year></dates><urls><pdf-urls><url>internal-pdf://1609.02404.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1609.02404</url></web-urls></urls><abstract>Malware creators have been getting their way for too long now. String-based similarity measures can leverage ground truth in a scalable way and can operate at a level of abstraction that is difficult to combat from the code level. We introduce ITect, a scalable approach to malware similarity detection based on information theory. ITect targets file entropy patterns in different ways to achieve 100% precision with 90% accuracy but it could target 100% recall instead. It outperforms VirusTotal for precision and accuracy on combined Kaggle and VirusShare malware.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Shabtai, Asaf</author><author>Fledel, Yuval</author><author>Kanonov, Uri</author><author>Elovici, Yuval</author><author>Dolev, Shlomi</author></authors></contributors><titles><title>Google Android: A State-of-the-Art Review of Security Mechanisms</title><secondary-title>Neural Networks</secondary-title></titles><periodical><full-title>Neural Networks</full-title></periodical><pages>42</pages><volume>126</volume><issue>0006-8950 (Print) LA - eng PT - Journal Article PT - Research Support, Non-U.S. Gov't PT - Research Support, U.S. Gov't, Non-P.H.S PT - Research Support, U.S. Gov't, P.H.S SB - AIM SB - IM</issue><keywords><keyword>android</keyword><keyword>google</keyword><keyword>intrusion detection system</keyword><keyword>malware</keyword><keyword>mobile devices</keyword><keyword>risk analysis</keyword><keyword>security</keyword><keyword>solutions mobile devices</keyword></keywords><dates><year>2009</year></dates><isbn>9781479967865</isbn><electronic-resource-num>abs/0912.5101</electronic-resource-num><urls><pdf-urls><url>internal-pdf://0912.5101 (1).pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/0912.5101</url></web-urls></urls><abstract>Google's Android is a comprehensive software framework for mobile communication devices (i.e., smartphones, PDAs). The Android framework includes an operating system, middleware and a set of key applications. The incorporation of integrated access services to the Internet on such mobile devices, however, increases their exposure to damages inflicted by various types of malware. This paper provides a comprehensive security assessment of the Android framework and the security mechanisms incorporated into it. A methodological qualitative risk analysis that we conducted identifies the high-risk threats to the framework and any potential danger to information or to the system resulting from vulnerabilities that have been uncovered and exploited. Our review of current academic and commercial solutions in the area of smartphone security yields a list of applied and recommended defense mechanisms for hardening mobile devices in general and the Android in particular. Lastly, we present five major (high-risk) threats to the Android framework and propose security solutions to mitigate them. We conclude by proposing a set of security mechanisms that should be explored and introduced into Android-powered devices.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Campus, K K Birla Goa</author><author>Road, Pass</author></authors></contributors><titles><title>An Effective Approach for Classification of Advanced Malware with High Accuracy</title></titles><periodical/><pages>249-266</pages><volume>10</volume><issue>4</issue><keywords><keyword>anti-malware</keyword><keyword>decision tree</keyword><keyword>machine learning</keyword><keyword>static analysis</keyword><keyword>weka</keyword></keywords><dates><year>2016</year></dates><urls><pdf-urls><url>internal-pdf://1606.06897.pdf</url></pdf-urls></urls></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Pehlivan, U.; Baltaci, N. ; Acarturk, C. ; Baykal, N.</author></authors></contributors><titles><title>The analysis of feature selection methods and classification algorithms in permission based Android malware detection</title><secondary-title>Computational Intelligence in Cyber Security (CICS)</secondary-title></titles><periodical><full-title>Computational Intelligence in Cyber Security (CICS)</full-title></periodical><pages>1 - 8</pages><keywords><keyword>android application</keyword><keyword>classification</keyword><keyword>cyber security</keyword><keyword>decision trees</keyword><keyword>feature selection</keyword><keyword>invasive software</keyword><keyword>learning</keyword><keyword>machine</keyword><keyword>mobile computing</keyword><keyword>pattern classification</keyword><keyword>smart phones</keyword><keyword>static analysis</keyword></keywords><dates><year>2014</year></dates><isbn>9781479945214</isbn><electronic-resource-num>10.1109/CICYBS.2014.7013371</electronic-resource-num><urls><pdf-urls><url>internal-pdf://914e0e880bb4f20e97c279053475357eddd9.pdf</url></pdf-urls><web-urls><url>http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=7013371</url></web-urls></urls><abstract>Android mobile devices have reached a widespread use since the past decade, thus leading to an increase in the number and variety of applications on the market. However, from the perspective of information security, the user control of sensitive information has been shadowed by the fast development and rich variety of the applications. In the recent state of the art, users are subject to responding numerous requests for permission about using their private data to be able run an application. The awareness of the user about data protection and its relationship to permission requests is crucial for protecting the user against malicious software. Nevertheless, the slow adaptation of users to novel technologies suggests the need for developing automatic tools for detecting malicious software. In the present study, we analyze two major aspects of permission-based malware detection in Android applications: Feature selection methods and classification algorithms. Within the framework of the assumptions specified for the analysis and the data used for the analysis, our findings reveal a higher performance for the Random Forest and J48 decision tree classification algorithms for most of the selected feature selection methods.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Nataraj, Lakshmanan</author><author>Manjunath, B. S.</author></authors></contributors><titles><title>SPAM: Signal processing to analyze malware</title><secondary-title>IEEE Signal Processing Magazine</secondary-title></titles><periodical><full-title>IEEE Signal Processing Magazine</full-title></periodical><pages>1-6</pages><volume>33</volume><issue>2</issue><keywords/><dates><year>2016</year></dates><electronic-resource-num>10.1109/MSP.2015.2507185</electronic-resource-num><urls><pdf-urls><url>internal-pdf://1605.05280.pdf</url></pdf-urls></urls></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sgandurra, Daniele</author><author>Muñoz-González, Luis</author><author>Mohsen, Rabih</author><author>Lupu, Emil C.</author></authors></contributors><titles><title>Automated Dynamic Analysis of Ransomware: Benefits, Limitations and use for Detection</title></titles><periodical/><keywords/><dates><year>2016</year></dates><isbn>9783642545245</isbn><accession-num>27437066</accession-num><electronic-resource-num>10.15199/48.2015.11.48</electronic-resource-num><urls><pdf-urls><url>internal-pdf://1609.03020(1).pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1609.03020</url></web-urls></urls><abstract>Recent statistics show that in 2015 more than 140 millions new malware samples have been found. Among these, a large portion is due to ransomware, the class of malware whose specific goal is to render the victim's system unusable, in particular by encrypting important files, and then ask the user to pay a ransom to revert the damage. Several ransomware include sophisticated packing techniques, and are hence difficult to statically analyse. We present EldeRan, a machine learning approach for dynamically analysing and classifying ransomware. EldeRan monitors a set of actions performed by applications in their first phases of installation checking for characteristics signs of ransomware. Our tests over a dataset of 582 ransomware belonging to 11 families, and with 942 goodware applications, show that EldeRan achieves an area under the ROC curve of 0.995. Furthermore, EldeRan works without requiring that an entire ransomware family is available beforehand. These results suggest that dynamic analysis can support ransomware detection, since ransomware samples exhibit a set of characteristic features at run-time that are common across families, and that helps the early detection of new variants. We also outline some limitations of dynamic analysis for ransomware and propose possible solutions.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Kazdagli, Mikhail</author><author>Huang, Ling</author><author>Reddi, Vijay</author><author>Tiwari, Mohit</author></authors></contributors><titles><title>EMMA: A New Platform to Evaluate Hardware-based Mobile Malware Analyses</title></titles><periodical/><keywords/><dates><year>2016</year></dates><urls><pdf-urls><url>internal-pdf://1603.03086.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1603.03086</url></web-urls></urls><abstract>Hardware-based malware detectors (HMDs) are a key emerging technology to build trustworthy computing platforms, especially mobile platforms. Quantifying the efficacy of HMDs against malicious adversaries is thus an important problem. The challenge lies in that real-world malware typically adapts to defenses, evades being run in experimental settings, and hides behind benign applications. Thus, realizing the potential of HMDs as a line of defense - that has a small and battery-efficient code base - requires a rigorous foundation for evaluating HMDs. To this end, we introduce EMMA - a platform to evaluate the efficacy of HMDs for mobile platforms. EMMA deconstructs malware into atomic, orthogonal actions and introduces a systematic way of pitting different HMDs against a diverse subset of malware hidden inside benign applications. EMMA drives both malware and benign programs with real user-inputs to yield an HMD's effective operating range - i.e., the malware actions a particular HMD is capable of detecting. We show that small atomic actions, such as stealing a Contact or SMS, have surprisingly large hardware footprints, and use this insight to design HMD algorithms that are less intrusive than prior work and yet perform 24.7% better. Finally, EMMA brings up a surprising new result - obfuscation techniques used by malware to evade static analyses makes them more detectable using HMDs.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Abah, Joshua</author><author>O.V, Waziri</author><author>M.B, Abdullahi</author><author>U.M, Arthur</author><author>O.S, Adewale</author></authors></contributors><titles><title>A Machine Learning Approach to Anomaly-Based Detection on Android Platforms</title><secondary-title>International Journal of Network Security &amp; Its Applications</secondary-title></titles><periodical><full-title>International Journal of Network Security &amp; Its Applications</full-title></periodical><pages>15-35</pages><volume>7</volume><issue>6</issue><keywords/><dates><year>2015</year></dates><electronic-resource-num>10.5121/ijnsa.2015.7602</electronic-resource-num><urls><pdf-urls><url>internal-pdf://1512.04122.pdf</url></pdf-urls><web-urls><url>http://www.aircconline.com/ijnsa/V7N6/7615ijnsa02.pdf</url></web-urls></urls><abstract>The emergence of mobile platforms with increased storage and computing capabilities and the pervasive use of these platforms for sensitive applications such as online banking, e-commerce and the storage of sensitive information on these mobile devices have led to increasing danger associated with malware targeted at these devices. Detecting such malware presents inimitable challenges as signature-based detection techniques available today are becoming inefficient in detecting new and unknown malware. In this research, a machine learning approach for the detection of malware on Android platforms is presented. The detection system monitors and extracts features from the applications while in execution and uses them to perform in-device detection using a trained K-Nearest Neighbour classifier. Results shows high performance in the detection rate of the classifier with accuracy of 93.75%, low error rate of 6.25% and low false positive rate with ability of detecting real Android malware. KEYWORDS Android, Anomaly detection, Classifier, K-Nearest Neighbour, Machine Learning, Malware detection and Mobile device.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Priyanka, B H</author><author>Prakash, Ravi</author></authors></contributors><titles><title>A Critical Survey Of Privacy Infrastructures</title></titles><periodical/><keywords/><dates><year>2015</year></dates><urls><pdf-urls><url>internal-pdf://1512.07207.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1512.07207</url></web-urls></urls><abstract>Over the last two decades, the scale and complexity of the Internet and its associated technologies built on the World Wide Web has grown exponentially with access to Internet as a facility occupying a prime place with other amenities of modern lives. In years to come, usage of Internet may unravel more pleasant surprises for us as far as novelty in its usage is concerned. As a democratic function of Internet, and relying on the open model on which it has been built, there has been concerted efforts in the direction of privacy protection and use of privacy enhancing tools which have gained tangible traction. Innovation in use of VPN, TLS/SSL and cryptographic tools are a testimony to it. Another popular tool is Tor, which has gained widespread popularity as it is being increasingly used by anonymity seeking users to effectively maintain their discretion while surfing the web. However, there is a darker side to increased proliferation of Internet in our everyday routine. We are certainly not living in a utopian age and there are potentials of misuse of Internet as well. Across every nook and cranny of Internet's sprawling virtual world, there are cyber criminals lurking n dangerous alleys to use the very same Internet as malevolent tool to abuse it and cause financial, physical and social harm to ordinary people. Failing to manage the widespread spawning of World Wide Web has rendered it weak against misuse. In last few decades especially, Internet has been inundated with malware, ransomware, viruses, Trojans, illegal spy tools and what not created with malignant sentiments. In this paper, we will analyze few of the subverting privacy infrastructures.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sen, Ashoke</author><author>Witten, Edward</author></authors></contributors><titles><title>Taming the Android AppStore: Lightweight Characterization of Android Applications</title><secondary-title>arXiv preprint arXiv:1504.06093</secondary-title></titles><periodical><full-title>arXiv preprint arXiv:1504.06093</full-title></periodical><pages>1-20</pages><keywords/><dates><year>2015</year></dates><urls><pdf-urls><url>internal-pdf://1504.06093.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1504.0609</url></web-urls></urls><abstract>There are over 1.2 million applications on the Google Play store today with a large number of competing applications for any given use or function. This creates challenges for users in selecting the right application. Moreover, some of the applications being of dubious origin, there are no mechanisms for users to understand who the applications are talking to, and to what extent. In our work, we first develop a lightweight characterization methodology that can automatically extract descriptions of application network behavior, and apply this to a large selection of applications from the Google App Store. We find several instances of overly aggressive communication with tracking websites, of excessive communication with ad related sites, and of communication with sites previously associated with malware activity. Our results underscore the need for a tool to provide users more visibility into the communication of apps installed on their mobile devices. To this end, we develop an Android application to do just this; our application monitors outgoing traffic, associates it with particular applications, and then identifies destinations in particular categories that we believe suspicious or else important to reveal to the end-user.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Demontis, Ambra</author><author>Melis, Marco</author><author>Biggio, Battista</author><author>Maiorca, Davide</author><author>Arp, Daniel</author><author>Rieck, Konrad</author><author>Corona, Igino</author><author>Giacinto, Giorgio</author><author>Roli, Fabio</author></authors></contributors><titles><title>Yes, Machine Learning Can Be More Secure! A Case Study on Android Malware Detection</title></titles><periodical/><pages>1-14</pages><keywords/><dates><year>2017</year></dates><electronic-resource-num>10.1109/TDSC.2017.2700270</electronic-resource-num><urls><pdf-urls><url>internal-pdf://1704.08996.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1704.08996</url></web-urls></urls><abstract>To cope with the increasing variability and sophistication of modern attacks, machine learning has been widely adopted as a statistically-sound tool for malware detection. However, its security against well-crafted attacks has not only been recently questioned, but it has been shown that machine learning exhibits inherent vulnerabilities that can be exploited to evade detection at test time. In other words, machine learning itself can be the weakest link in a security system. In this paper, we rely upon a previously-proposed attack framework to categorize potential attack scenarios against learning-based malware detection tools, by modeling attackers with different skills and capabilities. We then define and implement a set of corresponding evasion attacks to thoroughly assess the security of Drebin, an Android malware detector. The main contribution of this work is the proposal of a simple and scalable secure-learning paradigm that mitigates the impact of evasion attacks, while only slightly worsening the detection rate in the absence of attack. We finally argue that our secure-learning approach can also be readily applied to other malware detection tasks.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Demontis, Ambra</author><author>Melis, Marco</author><author>Biggio, Battista</author><author>Maiorca, Davide</author><author>Arp, Daniel</author><author>Rieck, Konrad</author><author>Corona, Igino</author><author>Giacinto, Giorgio</author><author>Roli, Fabio</author></authors></contributors><titles><title>Yes, Machine Learning Can Be More Secure! A Case Study on Android Malware Detection</title></titles><periodical/><pages>1-14</pages><keywords/><dates><year>2017</year></dates><electronic-resource-num>10.1109/TDSC.2017.2700270</electronic-resource-num><urls><pdf-urls><url>internal-pdf://1704.08996.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1704.08996</url></web-urls></urls><abstract>To cope with the increasing variability and sophistication of modern attacks, machine learning has been widely adopted as a statistically-sound tool for malware detection. However, its security against well-crafted attacks has not only been recently questioned, but it has been shown that machine learning exhibits inherent vulnerabilities that can be exploited to evade detection at test time. In other words, machine learning itself can be the weakest link in a security system. In this paper, we rely upon a previously-proposed attack framework to categorize potential attack scenarios against learning-based malware detection tools, by modeling attackers with different skills and capabilities. We then define and implement a set of corresponding evasion attacks to thoroughly assess the security of Drebin, an Android malware detector. The main contribution of this work is the proposal of a simple and scalable secure-learning paradigm that mitigates the impact of evasion attacks, while only slightly worsening the detection rate in the absence of attack. We finally argue that our secure-learning approach can also be readily applied to other malware detection tasks.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Narayanan, Annamalai</author><author>Chandramohan, Mahinthan</author><author>Chen, Lihui</author><author>Liu, Yang</author></authors></contributors><titles><title>A Multi-view Context-aware Approach to Android Malware Detection and Malicious Code Localization</title></titles><periodical/><pages>55-57</pages><keywords><keyword>android malware detection</keyword><keyword>graph kernels</keyword><keyword>malicious code</keyword><keyword>multiple kernel learning</keyword></keywords><dates><year>2017</year></dates><urls><pdf-urls><url>internal-pdf://1704.01759.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1704.01759</url></web-urls></urls><abstract>Existing Android malware detection approaches use a variety of features such as security sensitive APIs, system calls, control-flow structures and information flows in conjunction with Machine Learning classifiers to achieve accurate detection. Each of these feature sets provides a unique semantic perspective (or view) of apps' behaviours with inherent strengths and limitations. Meaning, some views are more amenable to detect certain attacks but may not be suitable to characterise several other attacks. Most of the existing malware detection approaches use only one (or a selected few) of the aforementioned feature sets which prevent them from detecting a vast majority of attacks. Addressing this limitation, we propose MKLDroid, a unified framework that systematically integrates multiple views of apps for performing comprehensive malware detection and malicious code localisation. The rationale is that, while a malware app can disguise itself in some views, disguising in every view while maintaining malicious intent will be much harder. MKLDroid uses a graph kernel to capture structural and contextual information from apps' dependency graphs and identify malice code patterns in each view. Subsequently, it employs Multiple Kernel Learning (MKL) to find a weighted combination of the views which yields the best detection accuracy. Besides multi-view learning, MKLDroid's unique and salient trait is its ability to locate fine-grained malice code portions in dependency graphs (e.g., methods/classes). Through our large-scale experiments on several datasets (incl. wild apps), we demonstrate that MKLDroid outperforms three state-of-the-art techniques consistently, in terms of accuracy while maintaining comparable efficiency. In our malicious code localisation experiments on a dataset of repackaged malware, MKLDroid was able to identify all the malice classes with 94% average recall.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Chen, Li</author><author>Zhang, Mingwei</author><author>Yang, Chih-Yuan</author><author>Sahita, Ravi</author></authors></contributors><titles><title>Semi-supervised classification for dynamic Android malware detection</title></titles><periodical/><keywords><keyword>android dynamic malware detection</keyword><keyword>chen</keyword><keyword>com</keyword><keyword>conditional</keyword><keyword>expectation-maximization</keyword><keyword>first and corresponding author</keyword><keyword>gaussian mixture modeling</keyword><keyword>intel</keyword><keyword>learning</keyword><keyword>li</keyword><keyword>li chen is data</keyword><keyword>machine learning</keyword><keyword>out-of-sample classification</keyword><keyword>s email address is</keyword><keyword>semi-supervised</keyword></keywords><dates><year>2017</year></dates><urls><pdf-urls><url>internal-pdf://1704.05948.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1704.05948</url></web-urls></urls><abstract>A growing number of threats to Android phones creates challenges for malware detection. Manually labeling the samples into benign or different malicious families requires tremendous human efforts, while it is comparably easy and cheap to obtain a large amount of unlabeled APKs from various sources. Moreover, the fast-paced evolution of Android malware continuously generates derivative malware families. These families often contain new signatures, which can escape detection when using static analysis. These practical challenges can also cause traditional supervised machine learning algorithms to degrade in performance. In this paper, we propose a framework that uses model-based semi-supervised (MBSS) classification scheme on the dynamic Android API call logs. The semi-supervised approach efficiently uses the labeled and unlabeled APKs to estimate a finite mixture model of Gaussian distributions via conditional expectation-maximization and efficiently detects malwares during out-of-sample testing. We compare MBSS with the popular malware detection classifiers such as support vector machine (SVM), $k$-nearest neighbor (kNN) and linear discriminant analysis (LDA). Under the ideal classification setting, MBSS has competitive performance with 98\% accuracy and very low false positive rate for in-sample classification. For out-of-sample testing, the out-of-sample test data exhibit similar behavior of retrieving phone information and sending to the network, compared with in-sample training set. When this similarity is strong, MBSS and SVM with linear kernel maintain 90\% detection rate while $k$NN and LDA suffer great performance degradation. When this similarity is slightly weaker, all classifiers degrade in performance, but MBSS still performs significantly better than other classifiers.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Otterbein, Florian</author><author>Ohlendorf, Tim</author><author>Margraf, Marian</author></authors></contributors><titles><title>The German eID as an Authentication Token on Android Devices</title></titles><periodical/><keywords><keyword>- android security</keyword><keyword>acceptance rate of eid</keyword><keyword>among</keyword><keyword>card</keyword><keyword>citizens and legal residents</keyword><keyword>german eid</keyword><keyword>mobile authentication</keyword><keyword>secure element</keyword><keyword>this could increase the</keyword><keyword>trusted execution environment</keyword></keywords><dates><year>2017</year></dates><urls><pdf-urls><url>internal-pdf://1701.04013.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1701.04013</url></web-urls></urls><abstract>Due to the rapid increase of digitization within our society, digital identities gain more and more importance. Provided by the German eID solution, every citizen has the ability to identify himself against various governmental and private organizations with the help of his personal electronic ID card and a corresponding card reader. While there are several solutions available for desktop use of the eID infrastructure, mobile approaches have to be payed more attention. In this paper we present a new approach for using the German eID concept on an Android device without the need of the actual identity card and card reader. A security evaluation of our approach reveals that two non-critical vulnerabilities on the architecture can't be avoided. Nevertheless, no sensitive information are compromised. A proof of concept shows that an actual implementation faces some technical issues which have to be solved in the future.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Luo, Lannan</author><author>Zeng, Qiang</author><author>Cao, Chen</author><author>Chen, Kai</author><author>Liu, Jian</author></authors></contributors><titles><title>Context-aware System Service Call-oriented Symbolic Execution of Android Framework with Application to Exploit Generation</title></titles><periodical/><keywords/><urls><pdf-urls><url>internal-pdf://1611.00837(1).pdf</url></pdf-urls></urls></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Li, Zhiqiang</author><author>Sun, Lichao</author><author>Yan, Qiben</author><author>Srisa-An, Witawas</author><author>Chen, Zhenxiang</author></authors></contributors><titles><title>DroidClassifier: Efficient adaptive mining of application-layer header for classifying android malware</title><secondary-title>Lecture Notes of the Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering, LNICST</secondary-title></titles><periodical><full-title>Lecture Notes of the Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering, LNICST</full-title></periodical><pages>597-616</pages><volume>198 LNICST</volume><keywords><keyword>Android malware detection</keyword><keyword>HTTP network traffic</keyword><keyword>Malware classification</keyword><keyword>Mobile security</keyword></keywords><dates><year>2017</year></dates><isbn>9783319596075</isbn><electronic-resource-num>10.1007/978-3-319-59608-2_33</electronic-resource-num><urls><pdf-urls><url>internal-pdf://3493d838c961a4fa673fe1e0030efe9dc971.pdf</url></pdf-urls></urls></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Nassi, Ben</author><author>Shamir, Adi</author><author>Elovici, Yuval</author></authors></contributors><titles><title>Oops!...I think I scanned a malware</title></titles><periodical/><keywords/><dates><year>2017</year></dates><urls><pdf-urls><url>internal-pdf://1703.07751.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1703.07751</url></web-urls></urls><abstract>This article presents a proof-of-concept illustrating the feasibility of creating a covert channel between a C\&amp;C server and a malware installed in an organization by exploiting an organization's scanner and using it as a means of interaction. We take advantage of the light sensitivity of a flatbed scanner, using a light source to infiltrate data to an organization. We present an implementation of the method for different purposes (even to trigger a ransomware attack) in various experimental setups using: (1) a laser connected to a stand (2) a laser carried by a drone, and (3) a hijacked smart bulb within the targeted organization from a passing car. In our experiments we were able to infiltrate data using different types of light sources (including infrared light), from a distance of up to 900 meters away from the scanner. We discuss potential counter measures to prevent the attack.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Kang, Boojoong</author><author>Yerima, Suleiman Y</author><author>Sezer, Sakir</author><author>Mclaughlin, Kieran</author></authors></contributors><titles><title>N-gram Opcode Analysis for Android Malware Detection</title><secondary-title>Intl. Journal on Cyber Situational Awareness</secondary-title></titles><periodical><full-title>Intl. Journal on Cyber Situational Awareness</full-title></periodical><pages>231-254</pages><volume>1</volume><issue>1</issue><keywords><keyword>Android Malware</keyword><keyword>Dalvik Bytecode</keyword><keyword>Feature Selection</keyword><keyword>Keyword</keyword><keyword>Machine Learning</keyword><keyword>Malware Categorization</keyword><keyword>Malware Detection</keyword><keyword>N-gram</keyword><keyword>Opcode</keyword></keywords><dates><year>2016</year></dates><electronic-resource-num>10.22619/IJCSA</electronic-resource-num><urls><pdf-urls><url>internal-pdf://1612.01445.pdf</url></pdf-urls><web-urls><url>https://arxiv.org/ftp/arxiv/papers/1612/1612.01445.pdf</url></web-urls></urls><abstract>Android malware has been on the rise in recent years due to the increasing popularity of Android and the proliferation of third party application markets. Emerging Android malware families are increasingly adopting sophisticated detection avoidance techniques and this calls for more effective approaches for Android malware detection. Hence, in this paper we present and evaluate an n-gram opcode features based approach that utilizes machine learning to identify and categorize Android malware. This approach enables automated feature discovery without relying on prior expert or domain knowledge for pre-determined features. Furthermore, by using a data segmentation technique for feature selection, our analysis is able to scale up to 10-gram opcodes. Our experiments on a dataset of 2520 samples showed an f-measure of 98% using the n-gram opcode based approach. We also provide empirical findings that illustrate factors that have probable impact on the overall n-gram opcodes performance trends.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Rosenberg, Ishai</author><author>Shabtai, Asaf</author><author>Rokach, Lior</author><author>Elovici, Yuval</author></authors></contributors><titles><title>Generic Black-Box End-to-End Attack against RNNs and Other API Calls Based Malware Classifiers</title></titles><periodical/><keywords/><dates><year>2017</year></dates><urls><pdf-urls><url>internal-pdf://1707.05970(1).pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1707.05970</url></web-urls></urls><abstract>Deep neural networks are being used to solve complex classification problems, in which other machine learning classifiers, such as SVM, fall short. Recurrent Neural Networks (RNNs) have been used for tasks that involves sequential inputs, like speech to text. In the cyber security domain, RNNs based on API calls have been able to classify unsigned malware better than other classifiers. In this paper we present a black-box attack against RNNs, focusing on finding adversarial API call sequences that would be misclassified by a RNN without affecting the malware functionality. We also show that the this attack is effective against many classifiers, due-to the transferability principle between RNN variants, feed-forward DNNs and state-of-the-art traditional machine learning classifiers. Finally, we introduce the transferability by transitivity principle, causing an attack against generalized classifier like RNN variants to be transferable to less generalized classifiers like feed-forward DNNs. We conclude by discussing possible defense mechanisms.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bogdanas, Denis</author></authors></contributors><titles><title>DPerm: Assisting the Migration of Android Apps to Runtime Permissions</title></titles><periodical/><pages>1-11</pages><keywords/><dates><year>2017</year></dates><urls><pdf-urls><url>internal-pdf://1706.05042.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1706.05042</url></web-urls></urls><abstract>Android apps require permissions when accessing resources related to privacy or system integrity. Starting from Android 6, these permissions have to be asked at runtime. However, migrating to the new permission model poses multiple challenges for developers. First, developers have to discover where the app uses permissions, which requires a permission specification. To date several such specifications have been built, yet these are either imprecise, incomplete or don't support all types of protected resources. We first present DPSpec, a novel permission specification built from several documentation formats supplied with the Android SDK. Compared with the state the art specification, it contains 2.5x as many entries for protected methods and detects dangerous permission usages in more than twice as many apps. A second challenge for developers is where to insert permission requests, with possible locations restricted by the request mechanism. We also present DPerm, a static analysis for Android apps that recommends locations for permission requests in code. It achieves high precision through context sensitivity and improves recall through a general call graph augmentation algorithm for incomplete code. Our empirical evaluation on 32 apps shows a precision of 96% and recall of 89%.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Li, Yuping</author><author>Jang, Jiyong</author><author>Hu, Xin</author><author>Ou, Xinming</author></authors></contributors><titles><title>Android Malware Clustering through Malicious Payload Mining</title></titles><periodical/><keywords/><dates><year>2017</year></dates><urls><pdf-urls><url>internal-pdf://1707.04795(1).pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1707.04795</url></web-urls></urls><abstract>Clustering has been well studied for desktop malware analysis as an effective triage method. Conventional similarity-based clustering techniques, however, cannot be immediately applied to Android malware analysis due to the excessive use of third-party libraries in Android application development and the widespread use of repackaging in malware development. We design and implement an Android malware clustering system through iterative mining of malicious payload and checking whether malware samples share the same version of malicious payload. Our system utilizes a hierarchical clustering technique and an efficient bit-vector format to represent Android apps. Experimental results demonstrate that our clustering approach achieves precision of 0.90 and recall of 0.75 for Android Genome malware dataset, and average precision of 0.98 and recall of 0.96 with respect to manually verified ground-truth.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Chen, Sen</author><author>Xue, Minhui</author><author>Fan, Lingling</author><author>Hao, Shuang</author><author>Xu, Lihua</author><author>Zhu, Haojin</author></authors></contributors><titles><title>Hardening Malware Detection Systems Against Cyber Maneuvers: An Adversarial Machine Learning Approach</title></titles><periodical/><pages>1-21</pages><keywords><keyword>adversarial machine learning</keyword><keyword>k uafu d et</keyword><keyword>malware detection</keyword><keyword>manipulation</keyword><keyword>poisoning attack</keyword></keywords><dates><year>2017</year></dates><urls><pdf-urls><url>internal-pdf://1706.04146(1).pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1706.04146</url></web-urls></urls><abstract>The evolution of mobile malware poses a serious threat to smartphone security. Today, sophisticated attackers can adapt by maximally sabotaging machine-learning classifiers via polluting training data, rendering most recent machine learning-based malware detection tools (such as Drebin and DroidAPIMiner) ineffective. In this paper, we explore the feasibility of constructing crafted malware samples; examine how machine-learning classifiers can be misled under three different threat models; then conclude that injecting carefully crafted data into training data can significantly reduce detection accuracy. To tackle the problem, we propose KuafuDet, a two-phase learning enhancing approach that learns mobile malware by adversarial detection. KuafuDet includes an offline training phase that selects and extracts features from the training set, and an online detection phase that utilizes the classifier trained by the first phase. To further address the adversarial environment, these two phases are intertwined through a self-adaptive learning scheme, wherein an automated camouflage detector is introduced to filter the suspicious false negatives and feed them back into the training phase. We finally show KuafuDet significantly reduces false negatives and boosts the detection accuracy by at least 15%. Experiments on more than 250,000 mobile applications demonstrate that KuafuDet is scalable and can be highly effective as a standalone system.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Hu, Weiwei</author><author>Tan, Ying</author></authors></contributors><titles><title>Black-Box Attacks against RNN based Malware Detection Algorithms</title></titles><periodical/><keywords/><dates><year>2017</year></dates><urls><pdf-urls><url>internal-pdf://1705.08131.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1705.08131</url></web-urls></urls><abstract>Recent researches have shown that machine learning based malware detection algorithms are very vulnerable under the attacks of adversarial examples. These works mainly focused on the detection algorithms which use features with fixed dimension, while some researchers have begun to use recurrent neural networks (RNN) to detect malware based on sequential API features. This paper proposes a novel algorithm to generate sequential adversarial examples, which are used to attack a RNN based malware detection system. It is usually hard for malicious attackers to know the exact structures and weights of the victim RNN. A substitute RNN is trained to approximate the victim RNN. Then we propose a generative RNN to output sequential adversarial examples from the original sequential malware inputs. Experimental results showed that RNN based malware detection algorithms fail to detect most of the generated malicious adversarial examples, which means the proposed model is able to effectively bypass the detection algorithms.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Calzavara, Stefano</author><author>Grishchenko, Ilya</author><author>Koutsos, Adrien</author><author>Maffei, Matteo</author></authors></contributors><titles><title>A Sound Flow-Sensitive Heap Abstraction for the Static Analysis of Android Applications</title></titles><periodical/><pages>1-66</pages><keywords/><dates><year>2017</year></dates><urls><pdf-urls><url>internal-pdf://1705.10482(1).pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1705.10482</url></web-urls></urls><abstract>The present paper proposes the first static analysis for Android applications which is both flow-sensitive on the heap abstraction and provably sound with respect to a rich formal model of the Android platform. We formulate the analysis as a set of Horn clauses defining a sound over-approximation of the semantics of the Android application to analyse, borrowing ideas from recency abstraction and extending them to our concurrent setting. Moreover, we implement the analysis in HornDroid, a state-of-the-art information flow analyser for Android applications. Our extension allows HornDroid to perform strong updates on heap-allocated data structures, thus significantly increasing its precision, without sacrificing its soundness guarantees. We test our implementation on DroidBench, a popular benchmark of Android applications developed by the research community, and we show that our changes to HornDroid lead to an improvement in the precision of the tool, while having only a moderate cost in terms of efficiency. Finally, we assess the scalability of our tool to the analysis of real applications.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Huang, TonTon Hsien-De</author><author>Yu, Chia-Mu</author><author>Kao, Hung-Yu</author></authors></contributors><titles><title>R2-D2: ColoR-inspired Convolutional NeuRal Network (CNN)-based AndroiD Malware Detections</title></titles><periodical/><keywords/><dates><year>2017</year></dates><urls><pdf-urls><url>internal-pdf://1705.04448.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1705.04448</url></web-urls></urls><abstract>Machine Learning (ML) has found it particularly useful in malware detection. However, as the malware evolves very fast, the stability of the feature extracted from malware serves as a critical issue in malware detection. The recent success of deep learning in image recognition, natural language processing, and machine translation indicates a potential solution for stabilizing the malware detection effectiveness. We present a color-inspired convolutional neural network-based Android malware detection, R2-D2, which can detect malware without extracting pre-selected features (e.g., the control-flow of op-code, classes, methods of functions and the timing they are invoked etc.) from Android apps. In particular, we develop a color representation for translating Android apps into rgb color code and transform them to a fixed-sized encoded image. After that, the encoded image is fed to convolutional neural network for automatic feature extraction and learning, reducing the expert's intervention.We have run our system over 1 million malware samples and 1 million benign samples through our back-end (600 million monthly active users and 10k new malware samples per day), showing that R2-D2 can effectively detect the malware. Furthermore, we will keep our research results on http://R2D2.TWMAN.ORG if there any update.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bousquet, Aline</author><author>Briffaut, J</author></authors></contributors><titles><title>Mandatory Access Control for the Android Dalvik Virtual Machine</title><secondary-title>… on Embedded Self- …</secondary-title></titles><periodical><full-title>… on Embedded Self- …</full-title></periodical><keywords><keyword>android</keyword><keyword>java</keyword><keyword>mandatory access control</keyword><keyword>security</keyword></keywords><dates><year>2013</year></dates><urls><pdf-urls><url>internal-pdf://9455af881b8d2466931d14b205117d8ad8d0.pdf</url></pdf-urls><web-urls><url>http://hal.archives-ouvertes.fr/hal-00840732/</url></web-urls></urls></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Qian, Chenxiong</author><author>Luo, Xiapu</author><author>Shao, Yuru</author><author>Chan, Alvin T.S.</author></authors></contributors><titles><title>On Tracking Information Flows through JNI in Android Applications</title><secondary-title>Proceedings - 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks, DSN 2014</secondary-title></titles><periodical><full-title>Proceedings - 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks, DSN 2014</full-title></periodical><pages>180-191</pages><keywords/><dates><year>2014</year></dates><isbn>9781479922338</isbn><electronic-resource-num>10.1109/DSN.2014.30</electronic-resource-num><urls><pdf-urls><url>internal-pdf://16761.exception.pdf</url></pdf-urls></urls><abstract>—Android provides native development kit through JNI for developing high-performance applications (or simply apps). Although recent years have witnessed a considerable increase in the number of apps employing native libraries, only a few systems can examine them. However, none of them scrutinizes the interactions through JNI in them. In this paper, we conduct a systematic study on tracking information flows through JNI in apps. More precisely, we first perform a large-scale examination on apps using JNI and report interesting observations. Then, we identify scenarios where information flows uncaught by existing systems can result in information leakage. Based on these insights, we propose and implement NDroid, an efficient dynamic taint analysis system for check-ing information flows through JNI. The evaluation through real apps shows NDroid can effectively identify information leaks through JNI with low performance overheads.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Feldman, Stephen</author><author>Stadther, Dillon</author><author>Wang, Bing</author></authors></contributors><titles><title>Manilyzer: Automated Android malware detection through manifest analysis</title><secondary-title>Proceedings - 11th IEEE International Conference on Mobile Ad Hoc and Sensor Systems, MASS 2014</secondary-title></titles><periodical><full-title>Proceedings - 11th IEEE International Conference on Mobile Ad Hoc and Sensor Systems, MASS 2014</full-title></periodical><pages>767-772</pages><keywords><keyword>Android security</keyword><keyword>Manilyzer</keyword><keyword>data mining</keyword><keyword>malware detection</keyword></keywords><dates><year>2015</year></dates><isbn>9781479960354</isbn><electronic-resource-num>10.1109/MASS.2014.65</electronic-resource-num><urls><pdf-urls><url>internal-pdf://8556c452dba81950315a4b17c80fa61458e1.pdf</url></pdf-urls></urls></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhang, Yifei</author><author>Tan, Tian</author><author>Li, Yue</author><author>Xue, Jingling</author></authors></contributors><titles><title>Ripple: Reflection Analysis for Android Apps in Incomplete Information Environments</title><secondary-title>CODASPY '17 (7th ACM conference on Data and Application Security and Privac)</secondary-title></titles><periodical><full-title>CODASPY '17 (7th ACM conference on Data and Application Security and Privac)</full-title></periodical><keywords><keyword>Android</keyword><keyword>Pointer Analysis</keyword><keyword>Reflection Analysis</keyword></keywords><dates><year>2017</year></dates><isbn>978-1-4503-4523-1</isbn><electronic-resource-num>10.1145/3029806.3029814</electronic-resource-num><urls><pdf-urls><url>internal-pdf://9321d700a23c9619e38b3374f837a341bc2b.pdf</url></pdf-urls></urls><abstract>Despite its widespread use in Android apps, reflection poses graving problems for static security analysis. Currently, string inference is applied to handle reflection, resulting in significantly missed security vulnerabilities. In this paper, we bring forward the ubiquity of incomplete information environments (IIEs) for Android apps, where some critical data-flows are missing during static analysis, and the need for resolving reflective calls under IIEs. We present Ripple, the first IIE-aware static reflection analysis for Android apps that resolves reflective calls more soundly than string infer-ence. Validation with 17 popular Android apps from Google Play demonstrates the effectiveness of Ripple in discovering reflective targets with a low false positive rate. As a result, Ripple enables FlowDroid to find hundreds of sensitive data leakages that would otherwise be missed.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wei, Fengguo</author><author>Roy, Sankardas</author><author>Ou, Xinming</author></authors></contributors><titles><title>Amandroid: A Precise and General Inter-component Data Flow Analysis Framework for Security Vetting of Android Apps</title><secondary-title>Ccs</secondary-title></titles><periodical><full-title>Ccs</full-title></periodical><pages>1329-1341</pages><keywords><keyword>android application</keyword><keyword>app</keyword><keyword>icc</keyword><keyword>information leakage</keyword><keyword>inter-component communica-</keyword><keyword>malware</keyword><keyword>points-to analysis</keyword><keyword>security vetting</keyword><keyword>tion</keyword><keyword>vulnerable</keyword></keywords><dates><year>2014</year></dates><isbn>9781450329576</isbn><electronic-resource-num>10.1145/2660267.2660357</electronic-resource-num><urls><pdf-urls><url>internal-pdf://9337e570f36686acdda3dcd0b7885a963557.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2660357</url></web-urls></urls><abstract>We propose a new approach to conduct static analysis for security vetting of Android apps, and built a general framework, called Amandroid for determining points-to information for all objects in an Android app in a flow and context- sensitive way across Android apps components. We show that: (a) this type of comprehensive analysis is completely feasible in terms of computing resources needed with modern hardware, (b) one can easily leverage the results from this general analysis to build various types of specialized security analyses – in many cases the amount of additional coding needed is around 100 lines of code, and (c) the result of those specialized analyses leveraging Amandroid is at least on par and often exceeds prior works designed for the specific problems, which we demonstrate by comparing Amandroid’s results with those of prior works whenever we can obtain the executable of those tools. Since Amandroid’s analysis directly handles inter-component control and data flows, it can be used to address security problems that result from interactions among multiple components from either the same or different apps. Amandroid’s analysis is sound in that it can provide assurance of the absence of the specified security problems in an app with well-specified and reasonable assumptions on Android runtime system and its library.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Taylor, Teryl</author><author>Snow, Kevin Z</author><author>Otterness, Nathan</author><author>Monrose, Fabian</author><author>Spensky, Chad</author><author>Hu, Hongyi Hongxin</author><author>Leach, Kevin</author><author>Wressnegger, Christian</author><author>Yamaguchi, Fabian</author><author>Arp, Daniel</author><author>Rieck, Konrad</author><author>Moshchuk, Alexander</author><author>Bragin, Tanya</author><author>Gribble, S.D. Steven D</author><author>Levy, Henry M H.M.</author><author>Vidas, Timothy</author><author>Tan, Jiaqi</author><author>Nahata, Jay</author><author>Tan, Chaur Lih</author><author>Christin, Nicolas</author><author>Tague, Patrick</author><author>Percoco, Nicholas J.</author><author>Schulte, Sean</author><author>Suarez-Tangil, Guillermo</author><author>Tapiador, Juan E.</author><author>Lombardi, Flavio</author><author>Pietro, Roberto Di</author><author>Mohaisen, Aziz</author><author>Alrawi, Omar</author><author>Lindorfer, Martina</author><author>Matthias Neugschwandtner, Lukas Weichselbaum</author><author>Fratantonio, Yanick</author><author>Veen, Victor van der</author><author>Platzer, Christian</author><author>Thévenin, Johanne</author><author>Pollet, Brigitte</author><author>Letarnec, Bruno</author><author>Saulnier, Luc</author><author>Gissot, Lionel</author><author>Maia-Grondard, Alessandra</author><author>Lapierre, Catherine</author><author>Jouanin, Lise</author><author>Kolbitsch, Clemens</author><author>Wang, Yi-min</author><author>Beck, Doug</author><author>Jiang, Xuxian</author><author>Roussev, Roussi</author><author>Mutti, Simone</author><author>Fratantonio, Yanick</author><author>Bianchi, Antonio</author><author>Invernizzi, Luca</author><author>Corbetta, Jacopo</author><author>Kirat, Dhilung</author><author>Kruegel, Christopher</author><author>Vigna, Giovanni</author><author>Kantchelian, Alex</author><author>Tschantz, Michael Carl</author><author>Afroz, Sadia</author><author>Miller, Brad</author><author>Shankar, Vaishaal</author><author>Bachwani, Rekha</author><author>Joseph, Anthony D</author><author>Tygar, J D</author><author>Quist, Danny</author><author>Smith, Val</author><author>Rastogi, Vaibhav</author><author>Chen, Yan</author><author>Jiang, Xuxian</author><author>Xu, Dongyan</author><author>Wang, Helen J Haining</author><author>Spafford, Eugene H</author><author>Jiang, Xuxian</author><author>Xu, Dongyan</author><author>Wang, Helen J Haining</author><author>Spafford, Eugene H</author><author>Richter, Lars</author><author>Christian</author><author>Yamaguchi, Fabian</author><author>Arp, Daniel</author><author>Rieck, Konrad</author><author>Tam, Kimberly</author><author>Khan, Salahuddin J</author><author>Fattori, Aristide</author><author>Cavallaro, Lorenzo</author><author>Pappas, Vasilis</author><author>Bowen, Brian M.</author><author>Keromytis, Angelos D.</author><author>Cova, Marco</author><author>Kruegel, Christopher</author><author>Vigna, Giovanni</author><author>Maier, Dominik</author><author>Müller, Tilo</author><author>Protsenko, Mykola</author><author>Willems, Carsten</author><author>Hund, Ralf</author><author>Fobian, Andreas</author><author>Felsch, Dennis</author><author>Holz, Thorsten</author><author>Vasudevan, Amit</author><author>Rastogi, Vaibhav</author><author>Chen, Yan</author><author>Jiang, Xuxian</author><author>Yan, Lok Kwong Lk</author><author>Yin, H</author><author>Neuner, Sebastian</author><author>Veen, Victor van der</author><author>Lindorfer, Martina</author><author>Kapravelos, Alexandros</author><author>Cova, Marco</author><author>Kruegel, Christopher</author><author>Vigna, Giovanni</author><author>Diao, Wenrui</author><author>Vidas, Timothy</author><author>Christin, Nicolas</author><author>Lee, Jae Keun</author><author>Kang, Boo Joong</author><author>Im, Eul Gyu</author><author>Pappas, Vasilis</author><author>Bowen, Brian M.</author><author>Keromytis, Angelos D.</author><author>Poeplau, Sebastian</author><author>Fratantonio, Yanick</author><author>Bianchi, Antonio</author><author>Kruegel, Christopher</author><author>Vigna, Giovanni</author><author>Kapravelos, Alexandros</author><author>Grier, Chris</author><author>Chachra, Neha</author><author>Selis, Valerio</author><author>Marshall, Alan</author><author>Spreitzenbarth, Michael</author><author>Freiling, Felix</author><author>Echtler, Florian</author><author>Schreck, Thomas</author><author>Hoffmann, Johannes</author><author>Jing, Yiming</author><author>Zhao, Ziming</author><author>Ahn, Gail-Joon</author><author>Hu, Hongyi Hongxin</author><author>Nazario, Jose</author><author>Rossow, Christian</author><author>Dietrich, Christian J.</author><author>Grier, Chris</author><author>Kreibich, Christian</author><author>Paxson, Vern</author><author>Pohlmann, Norbert</author><author>Bos, Herbert</author><author>Van Steen, Maarten</author><author>Fleck, Dan</author><author>Tokhtabayev, Arnur G</author><author>Alarif, Alex</author><author>Stavrou, Angelos</author><author>Nykodym, Tomas</author><author>Petsas, Thanasis</author><author>Voyatzis, Giannis</author><author>Athanasopoulos, Elias</author><author>Polychronakis, Michalis</author><author>Ioannidis, Sotiris</author><author>Franklin, Jason</author><author>Luk, Mark</author><author>McCune, Jonathan M.</author><author>Seshadri, Arvind</author><author>Perrig, Adrian</author><author>van Doorn, Leendert</author><author>Oberheide, Jon</author><author>Jahanian, Farnam</author><author>Kapravelos, Alexandros</author><author>Shoshitaishvili, Yan</author><author>Barbara, Santa</author><author>Cova, Marco</author><author>Kruegel, Christopher</author><author>Vigna, Giovanni</author><author>Kolbitsch, Clemens</author><author>Livshits, Benjamin</author><author>Zorn, Benjamin</author><author>Seifert, Christian</author><author>Yokoyama, Akira</author><author>Ishii, Kou</author><author>Tanabe, Rui</author><author>Papa, Yinmin</author><author>Borders, Kevin</author><author>Xin, Zhao</author><author>Prakash, Atul</author><author>Zhang, Fengwei</author><author>Leach, Kevin</author><author>Sun, Kun</author><author>Stavrou, Angelos</author><author>Vasudevan, Amit</author><author>Yerraballi, Ramesh</author><author>Chandrasekaran, M.</author><author>Vidyaraman, S.</author><author>Upadhyaya, S.</author><author>Moshchuk, Alexander</author><author>Bragin, Tanya</author><author>Deville, Damien</author><author>Gribble, S.D. Steven D</author><author>Levy, Henry M H.M.</author><author>Morales, Jose Andre</author><author>Clarke, Peter J.</author><author>Deng, Yi</author><author>Golam Kibria, B. M.</author><author>Provos, Niels</author><author>Mcnamee, Dean</author><author>Mavrommatis, Panayiotis</author><author>Wang, Ke</author><author>Modadugu, Nagendra</author><author>Ho, Grant</author><author>Boneh, Dan</author><author>Ballard, Lucas</author><author>Provos, Niels</author><author>Hintze, Daniel</author><author>Leach, Kevin</author><author>Spensky, Chad</author><author>Weimer, Westley</author><author>Yan, Lok Kwong Lk</author><author>Rajab, Moheeb Abu</author><author>Ballard, Lucas</author><author>Jagpal, Nav</author><author>Mavrommatis, Panayiotis</author><author>Nojiri, Daisuke</author><author>Provos, Niels</author><author>Schmidt, Ludwig</author><author>Fratantonio, Yanick</author><author>Bianchi, Antonio</author><author>Robertson, William</author><author>Kirda, Engin</author><author>Kruegel, Christopher</author><author>Vigna, Giovanni</author><author>Kharaz, Amin</author><author>Arshad, Sajjad</author><author>Mulliner, Collin</author><author>Robertson, William</author><author>Mulliner, Collin</author><author>Robertson, William</author><author>Zhang, Fengwei</author><author>Leach, Kevin</author><author>Stavrou, Angelos</author><author>Wang, Helen J Haining</author><author>Sun, Kun</author></authors></contributors><titles><title>Using hardware features for increased debugging transparency</title><secondary-title>Proceedings - IEEE Symposium on Security and Privacy</secondary-title></titles><periodical><full-title>Proceedings - IEEE Symposium on Security and Privacy</full-title></periodical><pages>83</pages><volume>6829 LNCS</volume><issue>February</issue><keywords><keyword>-android malware</keyword><keyword>Android</keyword><keyword>Anti-debugging detection</keyword><keyword>Anti-malware</keyword><keyword>Application analysis</keyword><keyword>Arabidopsis</keyword><keyword>Associative rule mining</keyword><keyword>Auxin</keyword><keyword>Bare-metal Analysis</keyword><keyword>Cell wall</keyword><keyword>Cinnamoyl CoA Reductase (CCR)</keyword><keyword>Cinnamyl Alcohol Dehydrogenase (CAD)</keyword><keyword>Computer security</keyword><keyword>Dwarfism</keyword><keyword>Dynamic analysis</keyword><keyword>Evasive Malware</keyword><keyword>Honeytokens</keyword><keyword>Instrumentation</keyword><keyword>JavaScript</keyword><keyword>Lignins</keyword><keyword>Malware</keyword><keyword>Malware analysis</keyword><keyword>Mobile</keyword><keyword>Mobile computing</keyword><keyword>Phenolics</keyword><keyword>SMM</keyword><keyword>Security</keyword><keyword>Spyware</keyword><keyword>Static analysis</keyword><keyword>Sterility</keyword><keyword>Thin Client Computing</keyword><keyword>User activity</keyword><keyword>adobe flash</keyword><keyword>aggregating labels</keyword><keyword>android</keyword><keyword>android malware</keyword><keyword>anomaly detection</keyword><keyword>anti-malware</keyword><keyword>anti-virus vendors</keyword><keyword>application analysis</keyword><keyword>automatic analysis</keyword><keyword>av</keyword><keyword>classification</keyword><keyword>cloaking</keyword><keyword>datasets</keyword><keyword>drive-by-download attacks</keyword><keyword>dynamic analysis</keyword><keyword>emulator</keyword><keyword>evasion</keyword><keyword>expectation-maximization</keyword><keyword>experiments</keyword><keyword>google bouncer</keyword><keyword>introspection</keyword><keyword>labeling problem</keyword><keyword>malware</keyword><keyword>malware debugging</keyword><keyword>memory attacks</keyword><keyword>mobile</keyword><keyword>mobile sandboxes</keyword><keyword>obfuscation</keyword><keyword>programmed interaction</keyword><keyword>sandbox</keyword><keyword>sandbox eva-</keyword><keyword>sandbox fingerprinting</keyword><keyword>security</keyword><keyword>sion</keyword><keyword>static and dynamic analysis</keyword><keyword>transparency</keyword><keyword>web client exploits</keyword></keywords><dates><year>2014</year></dates><isbn>9781450313124</isbn><accession-num>20829305</accession-num><electronic-resource-num>10.1145/2420950.2420980</electronic-resource-num><urls><pdf-urls><url>internal-pdf://9566ac0176dced2312f813328ad4c0552618.pdf</url></pdf-urls><web-urls><url>http://doi.acm.org.acces.bibl.ulaval.ca/10.1145/2592791.2592796%5Cnhttp://dl.acm.org/citation.cfm?doid=2664243.2664250%5Cnhttp://dl.acm.org/citation.cfm?doid=2480362.2480701%5Cnhttp://dblp.uni-trier.de/db/conf/secrypt/secrypt2015.html#SelisM15%5Cnhttp://w</url></web-urls></urls><abstract>The success of any spyware is determined by its ability to evade detection. Although traditional detection methodologies employing signature and anomaly based systems have had reasonable success, new class of spyware programs emerge which blend in with user activities to avoid detection. One of the latest anti-spyware technologies consists of a local agent that generates honeytokens of known parameters (e.g., network access requests) and tricks spyware into assuming it to be legitimate activity. In this paper, as a first step, we address the deficiencies of static honeytoken generation and present an attack that circumvents such detection techniques. We synthesize the attack by means of data mining algorithms like associative rule mining. Next, we present a randomized honeytoken generation mechanism to address this new class of spyware. Experimental results show that (i) static honeytokens are detected with near 100% accuracy, thereby defeating the state-of-the-art anti-spyware technique, (ii) randomized honeytoken generation mechanism is an effective anti-spyware solution.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Cox, Landon P</author><author>Gilbert, Peter</author><author>Lawler, Geoffrey</author><author>Pistol, Valentin</author><author>Razeen, Ali</author><author>Wu, Bi</author><author>Cheemalapati, Sai</author></authors></contributors><titles><title>SpanDex: Secure Password Tracking for Android</title><secondary-title>USENIX Security</secondary-title></titles><periodical><full-title>USENIX Security</full-title></periodical><pages>481-494</pages><issue>Vm</issue><keywords/><dates><year>2014</year></dates><isbn>978-1-931971-15-7</isbn><urls><pdf-urls><url>internal-pdf://8159fff2ca312726670418e5f5def1eee249.pdf</url></pdf-urls><web-urls><url>https://www.usenix.org/conference/usenixsecurity14/technical-sessions/presentation/cox</url></web-urls></urls><abstract>This paper presents SpanDex, a set of extensions to An-droid's Dalvik virtual machine that ensures apps do not leak users' passwords. The primary technical challenge addressed by SpanDex is precise, sound, and efficient handling of implicit information flows (e.g., information transferred by a program's control flow). SpanDex han-dles implicit flows by borrowing techniques from sym-bolic execution to precisely quantify the amount of infor-mation a process' control flow reveals about a secret. To apply these techniques at runtime without sacrificing per-formance, SpanDex runs untrusted code in a data-flow sensitive sandbox, which limits the mix of operations that an app can perform on sensitive data. Experiments with a SpanDex prototype using 50 popular Android apps and an analysis of a large list of leaked passwords predicts that for 90% of users, an attacker would need over 80 login attempts to guess their password. Today the same attacker would need only one attempt for all users.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Felt, Adrienne Porter</author><author>Finifter, Matthew</author><author>Chin, Erika</author><author>Hanna, Steven</author><author>Wagner, David</author></authors></contributors><titles><title>A Survey of Mobile Malware in the Wild</title><secondary-title>Spsm</secondary-title></titles><periodical><full-title>Spsm</full-title></periodical><keywords><keyword>malware</keyword><keyword>mobile devices</keyword><keyword>smartphones</keyword></keywords><dates><year>2011</year></dates><isbn>9781450310000</isbn><urls><pdf-urls><url>internal-pdf://51587960d8455abf3652b2c3ca1d35fabfe6.pdf</url></pdf-urls></urls></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sanz, Borja</author><author>Santos, Igor</author><author>Nieves, Javier</author><author>Laorden, Carlos</author><author>Alonso-Gonzalez, Iñigo</author><author>Bringas, Pablo G.</author></authors></contributors><titles><title>MADS: Malicious Android applications detection through string analysis</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>178-191</pages><volume>7873 LNCS</volume><keywords><keyword>android</keyword><keyword>machine learning</keyword><keyword>malware</keyword><keyword>security</keyword></keywords><dates><year>2013</year></dates><isbn>9783642386305</isbn><electronic-resource-num>10.1007/978-3-642-38631-2_14</electronic-resource-num><urls><pdf-urls><url>internal-pdf://5075d2167a8e5bcf19dd1b8f2cda8cedfeef.pdf</url></pdf-urls></urls><abstract>See, stats, and : https : / / www . researchgate . net / publication / 256194745 MADS : Malicious through Chapter DOI : 10 . 1007 / 978 - 3 - 642 - 38631 - 2_14 CITATIONS 2 READS 406 6 , including : Borja University 41 SEE Igor University 97 SEE Carlos University 43 SEE Pablo University 130 SEE All - text , letting . Available : Carlos Retrieved : 11 Abstract . The use of mobile phones has increased in our lives because they offer nearly the same functionality as a personal computer . Besides , the number of applications available for Android - based mobile devices has increased . Google offers to programmers the opportunity to upload and sell applications in the Android Market , but malware writers up - load their malicious code there . In light of this background , we present here Malicious Android applications Detection through String analysis (MADS) , a new method that extracts the contained strings from the An - droid applications to build machine - learning classifiers and detect mal - ware .</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Min Zheng</author></authors></contributors><titles><title>DroidAnalytics: A Signature Based Analytic System to Collect, Extract, Analyze and Associate Android Malware\n</title></titles><periodical/><keywords/><urls><pdf-urls><url>internal-pdf://8388134512731f74a9b8f48486e8b6b67087.pdf</url></pdf-urls></urls></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wang, Chao</author><author>Wu, Zhizhong</author><author>Li, Xi</author><author>Zhou, Xuehai</author><author>Wang, Aili</author><author>Hung, Patrick C. K.</author></authors></contributors><titles><title>SmartMal: A Service-Oriented Behavioral Malware Detection Framework for Mobile Devices</title><secondary-title>The Scientific World Journal</secondary-title></titles><periodical><full-title>The Scientific World Journal</full-title></periodical><pages>1-11</pages><volume>2014</volume><keywords/><dates><year>2014</year></dates><electronic-resource-num>10.1155/2014/101986</electronic-resource-num><urls><pdf-urls><url>internal-pdf://7005c9f0d08c0d30ee43824f9ef13abaa37f.pdf</url></pdf-urls><web-urls><url>http://www.hindawi.com/journals/tswj/2014/101986/</url></web-urls></urls><abstract>&lt;p&gt;This paper presents SmartMal—a novel service-oriented behavioral malware detection framework for vehicular and mobile devices. The highlight of SmartMal is to introduce service-oriented architecture (SOA) concepts and behavior analysis into the malware detection paradigms. The proposed framework relies on client-server architecture, the client continuously extracts various features and transfers them to the server, and the server’s main task is to detect anomalies using state-of-art detection algorithms. Multiple distributed servers simultaneously analyze the feature vector using various detectors and information fusion is used to concatenate the results of detectors. We also propose a cycle-based statistical approach for mobile device anomaly detection. We accomplish this by analyzing the users’ regular usage patterns. Empirical results suggest that the proposed framework and novel anomaly detection algorithm are highly effective in detecting malware on Android devices.&lt;/p&gt;</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Tam, Kimberly</author><author>Khan, Salahuddin J</author><author>Fattori, Aristide</author><author>Cavallaro, Lorenzo</author></authors></contributors><titles><title>CopperDroid: Automatic Reconstruction of Android Malware Behaviors</title><secondary-title>Ndss</secondary-title></titles><periodical><full-title>Ndss</full-title></periodical><pages>8-11</pages><issue>February</issue><keywords/><dates><year>2015</year></dates><isbn>189156238X</isbn><electronic-resource-num>10.14722/ndss.2015.23145</electronic-resource-num><urls><pdf-urls><url>internal-pdf://164907eccd30241c179eb65d7cc0032d8d40.pdf</url></pdf-urls></urls><abstract>#copperdroid.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sarma, Bhaskar</author><author>Li, Ninghui</author><author>Gates, Chris</author><author>Potharaju, Rahul</author><author>Nita-rotaru, Cristina</author><author>Molloy, Ian</author></authors></contributors><titles><title>Android Permissions: A Perspective Combining Risks and Benefits</title><secondary-title>Symposium on Access Control Models and Technologies (SACMAT)</secondary-title></titles><periodical><full-title>Symposium on Access Control Models and Technologies (SACMAT)</full-title></periodical><pages>13-22</pages><keywords/><dates><year>2012</year></dates><isbn>9781450312950</isbn><electronic-resource-num>10.1145/2295136.2295141</electronic-resource-num><urls><pdf-urls><url>internal-pdf://59840ba0b560a6e82e0e808ee26a7734af51.pdf</url></pdf-urls></urls><abstract>They discuss permissions in benign and malicious apps. They have a list of the top 20 permissions requested by benign and malicious apps. Given such insights, they do SVM for raising warnings. They say they are better than Kirin, as in Kirin they specify the suspicious permissions manually, while they do it automatically.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>McWilliams, Gavin</author><author>Sezer, Sakir</author><author>Yerima, Suleiman Y.</author></authors></contributors><titles><title>Analysis of Bayesian classification-based approaches for Android malware detection</title><secondary-title>IET Information Security</secondary-title></titles><periodical><full-title>IET Information Security</full-title></periodical><pages>25-36</pages><volume>8</volume><issue>1</issue><keywords/><dates><year>2014</year></dates><isbn>1751-8709</isbn><electronic-resource-num>10.1049/iet-ifs.2013.0095</electronic-resource-num><urls><pdf-urls><url>internal-pdf://23290aaba15e8073792d302c0ff8c1d37486.pdf</url></pdf-urls><web-urls><url>http://digital-library.theiet.org/content/journals/10.1049/iet-ifs.2013.0095</url></web-urls></urls><abstract>Mobile malware has been growing in scale and complexity spurred by the unabated uptake of smartphones worldwide. Android is fast becoming the most popular mobile platform resulting in sharp increase in malware targeting the platform. Additionally, Android malware is evolving rapidly to evade detection by traditional signature-based scanning. Despite current detection measures in place, timely discovery of new malware is still a critical issue. This calls for novel approaches to mitigate the growing threat of zero-day Android malware. Hence, the authors develop and analyse proactive machine-learning approaches based on Bayesian classification aimed at uncovering unknown Android malware via static analysis. The study, which is based on a large malware sample set of majority of the existing families, demonstrates detection capabilities with high accuracy. Empirical results and comparative analysis are presented offering useful insight towards development of effective static-analytic Bayesian classification-based solutions for detecting unknown Android malware.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhou, Yajin</author><author>Jiang, Xuxian</author></authors></contributors><titles><title>Dissecting Android malware: Characterization and evolution</title><secondary-title>Proceedings - IEEE Symposium on Security and Privacy</secondary-title></titles><periodical><full-title>Proceedings - IEEE Symposium on Security and Privacy</full-title></periodical><pages>95-109</pages><issue>4</issue><keywords><keyword>Android malware</keyword><keyword>smartphone security</keyword></keywords><dates><year>2012</year></dates><isbn>9780769546810</isbn><electronic-resource-num>10.1109/SP.2012.16</electronic-resource-num><urls><pdf-urls><url>internal-pdf://06234407.pdf</url></pdf-urls></urls><abstract>The popularity and adoption of smartphones has greatly stimulated the spread of mobile malware, especially on the popular platforms such as Android. In light of their rapid growth, there is a pressing need to develop effective solutions. However, our defense capability is largely constrained by the limited understanding of these emerging mobile malware and the lack of timely access to related samples. In this paper, we focus on the Android platform and aim to systematize or characterize existing Android malware. Particularly, with more than one year effort, we have managed to collect more than 1,200 malware samples that cover the majority of existing Android malware families, ranging from their debut in August 2010 to recent ones in October 2011. In addition, we systematically characterize them from various aspects, including their installation methods, activation mech- anisms as well as the nature of carried malicious payloads. The characterization and a subsequent evolution-based study of representative families reveal that they are evolving rapidly to circumvent the detection from existing mobile anti-virus software. Based on the evaluation with four representative mobile security software, our experiments show that the best case detects 79.6% of them while the worst case detects only 20.2% in our dataset. These results clearly call for the need to better develop next-generation anti-mobile-malware solutions.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhang, Yuan</author><author>Yang, Min</author><author>Yang, Zhemin</author><author>Gu, Guofei</author><author>Ning, Peng</author><author>Zang, Binyu</author></authors></contributors><titles><title>Permission use analysis for vetting undesirable behaviors in android apps</title><secondary-title>IEEE Transactions on Information Forensics and Security</secondary-title></titles><periodical><full-title>IEEE Transactions on Information Forensics and Security</full-title></periodical><pages>1828-1842</pages><volume>9</volume><issue>11</issue><keywords><keyword>Android behavior representation</keyword><keyword>Android security</keyword><keyword>Permission use analysis</keyword><keyword>Vetting undesirable behaviors</keyword></keywords><dates><year>2014</year></dates><isbn>9781450324779</isbn><electronic-resource-num>10.1109/TIFS.2014.2347206</electronic-resource-num><urls><pdf-urls><url>internal-pdf://4191b493bdc21edc412bcdf17a3d24177d71.pdf</url></pdf-urls></urls><abstract>Android platform adopts permissions to protect sensitive resources from untrusted apps. However, after permissions are granted by users at install time, apps could use these permissions (sensitive resources) with no further restrictions. Thus, recent years have witnessed the explosion of undesirable behaviors in Android apps. An important part in the defense is the accurate analysis of Android apps. However, traditional syscall-based analysis techniques are not well-suited for Android, because they could not capture critical interactions between the application and the Android system. This paper presents VetDroid, a dynamic analysis platform for reconstructing sensitive behaviors in Android apps from a novel permission use perspective. VetDroid features a systematic framework to effectively construct permission use behaviors, i.e., how applications use permissions to access (sensitive) system resources, and how these acquired permission-sensitive resources are further utilized by the application. With permission use behaviors, security analysts can easily examine the internal sensitive behaviors of an app. Using real-world Android malware, we show that VetDroid can clearly reconstruct fine-grained malicious behaviors to ease malware analysis. We further apply VetDroid to 1,249 top free apps in Google Play. VetDroid can assist in finding more information leaks than TaintDroid, a state-of-the-art technique. In addition, we show how we can use VetDroid to analyze fine-grained causes of information leaks that TaintDroid cannot reveal. Finally, we show that VetDroid can help identify subtle vulnerabilities in some (top free) applications otherwise hard to detect.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bläsing, Thomas</author><author>Batyuk, Leonid</author><author>Schmidt, Aubrey Derrick</author><author>Camtepe, Seyit Ahmet</author><author>Albayrak, Sahin</author></authors></contributors><titles><title>An android application sandbox system for suspicious software detection</title><secondary-title>Proceedings of the 5th IEEE International Conference on Malicious and Unwanted Software, Malware 2010</secondary-title></titles><periodical><full-title>Proceedings of the 5th IEEE International Conference on Malicious and Unwanted Software, Malware 2010</full-title></periodical><pages>55-62</pages><keywords/><dates><year>2010</year></dates><isbn>9781424493555</isbn><electronic-resource-num>10.1109/MALWARE.2010.5665792</electronic-resource-num><urls><pdf-urls><url>internal-pdf://blasing2010.pdf</url></pdf-urls></urls><abstract>Smartphones are steadily gaining popularity, creating new application areas as their capabilities increase in terms of computational power, sensors and communication. Emerging new features of mobile devices give opportunity to new threats. Android is one of the newer operating sys-tems targeting smartphones. While being based on a Linux kernel, Android has unique properties and specific limita-tions due to its mobile nature. This makes it harder to de-tect and react upon malware attacks if using conventional techniques. In this paper, we propose an Android Application Sand-box (AASandbox) which is able to perform both static and dynamic analysis on Android programs to automatically de-tect suspicious applications. Static analysis scans the soft-ware for malicious patterns without installing it. Dynamic analysis executes the application in a fully isolated envi-ronment, i.e. sandbox, which intervenes and logs low-level interactions with the system for further analysis. Both the sandbox and the detection algorithms can be deployed in the cloud, providing a fast and distributed detection of sus-picious software in a mobile software store akin to Google's Android Market. Additionally, AASandbox might be used to improve the efficiency of classical anti-virus applications available for the Android operating system.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Xu, Rubin</author><author>Saïdi, Hassen</author><author>Anderson, Ross</author><author>Saıdi, Hassen</author></authors></contributors><titles><title>Aurasium: Practical Policy Enforcement for Android Applications</title><secondary-title>Proceedings of the 21st USENIX conference …</secondary-title></titles><periodical><full-title>Proceedings of the 21st USENIX conference …</full-title></periodical><pages>27</pages><keywords><keyword>stat</keyword><keyword>static analysi</keyword><keyword>static analysis</keyword></keywords><dates><year>2012</year></dates><isbn>978-931971-95-9</isbn><urls><pdf-urls><url>internal-pdf://b350ba34f2b4c662cdea7acb6e906484ada9.pdf</url></pdf-urls><web-urls><url>https://www.usenix.org/system/files/conference/usenixsecurity12/sec12-final60.pdf%5Cnhttp://dl.acm.org/citation.cfm?id=2362793.2362820</url></web-urls></urls><abstract>The increasing popularity of Google’s mobile platform Android makes it the prime target of the latest surge in mobile malware. Most research on enhancing the platform’s security and privacy controls requires extensive modification to the operating system, which has significant usability issues and hinders efforts for widespread adoption. We develop a novel solution called Aurasium that bypasses the need to modify the Android OS while providing much of the security and privacy that users de- sire. We automatically repackage arbitrary applications to attach user-level sandboxing and policy enforcement code, which closely watches the application’s behavior for security and privacy violations such as attempts to retrieve a user’s sensitive information, send SMS covertly to premium numbers, or access malicious IP addresses. Aurasium can also detect and prevent cases of privilege escalation attacks. Experiments show that we can apply this solution to a large sample of benign and malicious applications with a near 100 percent success rate, with- out significant performance and space overhead. Aura- sium has been tested on three versions of the Android OS, and is freely available.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Smalley, Stephen</author><author>Craig, Robert</author></authors></contributors><titles><title>Security Enhanced (SE) Android: Bringing Flexible MAC to Android</title><secondary-title>Network and Distributed System Security Symposium</secondary-title></titles><periodical><full-title>Network and Distributed System Security Symposium</full-title></periodical><pages>20-38</pages><keywords/><dates><year>2013</year></dates><urls><pdf-urls><url>internal-pdf://b3aa56f9cc1849d19651c586a05dd96ceb02.pdf</url></pdf-urls><web-urls><url>http://selinuxproject.org/~seandroid/papers/NDSS2013-SEAndroid-Paper.pdf</url></web-urls></urls><abstract>The Android software stack for mobile devices defines and enforces its own security model for apps through its application-layer permissions model. However, at its foundation, Android relies upon the Linux kernel to protect the system from malicious or flawed apps and to isolate apps from one another. At present, Android leverages Linux dis- cretionary access control (DAC) to enforce these guarantees, despite the known shortcomings of DAC. In this pa- per, we motivate and describe our work to bring flexible mandatory access control (MAC) to Android by enabling the effective use of Security Enhanced Linux (SELinux) for kernel-level MAC and by developing a set of middleware MAC extensions to the Android permissions model. We then demonstrate the benefits of our security enhancements for Android through a detailed analysis of how they mitigate a number of previously published exploits and vulnerabilities for Android. Finally, we evaluate the overheads imposed by our security enhancements.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Dini, Gianluca</author><author>Martinelli, Fabio</author><author>Saracino, Andrea</author><author>Sgandurra, Daniele</author></authors></contributors><titles><title>MADAM: A multi-level anomaly detector for android malware</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>240-253</pages><volume>7531 LNCS</volume><keywords><keyword>Android</keyword><keyword>Classification</keyword><keyword>Intrusion detection</keyword><keyword>Security</keyword></keywords><dates><year>2012</year></dates><isbn>9783642337031</isbn><electronic-resource-num>10.1007/978-3-642-33704-8-21</electronic-resource-num><urls><pdf-urls><url>internal-pdf://b43cf53768f4a469247cc575cb75321e1e86.pdf</url></pdf-urls></urls><abstract>Currently, in the smartphone market, Android is the platform with the highest share. Due to this popularity and also to its open source nature, Android-based smartphones are now an ideal target for attackers. Since the number of malware designed for Android devices is increasing fast, Android users are looking for security solutions aimed at preventing malicious actions from damaging their smartphones. In this paper, we describe MADAM, a Multi-level Anomaly Detector for Android Malware. MADAM concurrently monitors Android at the kernel-level and user-level to detect real malware infections using machine learning techniques to distinguish between standard behaviors and malicious ones. The first prototype of MADAM is able to detect several real malware found in the wild. The device usability is not affected by MADAM due to the low number of false positives generated after the learning phase</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Octeau, Damien</author><author>Jha, Somesh</author><author>Dering, Matthew</author><author>McDaniel, Patrick</author><author>Bartel, Alexandre</author><author>Li, Li</author><author>Klein, Jacques</author><author>Le Traon, Yves</author></authors></contributors><titles><title>Combining static analysis with probabilistic models to enable market-scale Android inter-component analysis</title><secondary-title>Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages - POPL 2016</secondary-title></titles><periodical><full-title>Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages - POPL 2016</full-title></periodical><pages>469-484</pages><keywords><keyword>Android ICC</keyword><keyword>Inter-component communication</keyword><keyword>probabilistic program analysis</keyword><keyword>static analysis</keyword></keywords><dates><year>2016</year></dates><isbn>9781450335492</isbn><electronic-resource-num>10.1145/2837614.2837661</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Octeau et al. - 2016 - Combining static analysis with probabilistic models to enable market-scale Android inter-component analysis.pdf</url><url>internal-pdf://aafe66d10044336aa7b593f50e2e49ca5245.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2837614.2837661</url></web-urls></urls><abstract>Static analysis has been successfully used in many areas, from verifying mission-critical software to malware detection. Unfortu-nately, static analysis often produces false positives, which require significant manual effort to resolve. In this paper, we show how to overlay a probabilistic model, trained using domain knowledge, on top of static analysis results, in order to triage static analysis results. We apply this idea to analyzing mobile applications. An-droid application components can communicate with each other, both within single applications and between different applications. Unfortunately, techniques to statically infer Inter-Component Com-munication (ICC) yield many potential inter-component and inter-application links, most of which are false positives. At large scales, scrutinizing all potential links is simply not feasible. We therefore overlay a probabilistic model of ICC on top of static analysis re-sults. Since computing the inter-component links is a prerequisite to inter-component analysis, we introduce a formalism for inferring ICC links based on set constraints. We design an efficient algorithm for performing link resolution. We compute all potential links in a corpus of 11,267 applications in 30 minutes and triage them us-ing our probabilistic approach. We find that over 95.1% of all 636 million potential links are associated with probability values be-low 0.01 and are thus likely unfeasible links. Thus, it is possible to consider only a small subset of all links without significant loss of information. This work is the first significant step in making static inter-application analysis more tractable, even at large scales.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Amos, Brandon</author><author>Turner, Hamilton</author><author>White, Jules</author></authors></contributors><titles><title>Applying machine learning classifiers to dynamic android malware detection at scale</title><secondary-title>2013 9th International Wireless Communications and Mobile Computing Conference, IWCMC 2013</secondary-title></titles><periodical><full-title>2013 9th International Wireless Communications and Mobile Computing Conference, IWCMC 2013</full-title></periodical><pages>1666-1671</pages><keywords><keyword>Anomaly detection</keyword><keyword>Data collection</keyword><keyword>IDS</keyword><keyword>Machine learning</keyword><keyword>Mobile computing</keyword><keyword>Smartphones</keyword></keywords><dates><year>2013</year></dates><isbn>9781467324793</isbn><electronic-resource-num>10.1109/IWCMC.2013.6583806</electronic-resource-num><urls><pdf-urls><url>internal-pdf://amos2013.pdf</url></pdf-urls></urls><abstract>The widespread adoption and contextually sensitive nature of smartphone devices has increased concerns over smartphone malware. Machine learning classifiers are a current method for detecting malicious applications on smartphone systems. This paper presents the evaluation of a number of existing classifiers, using a dataset containing thousands of real (i.e. not synthetic) applications. We also present our STREAM framework, which was developed to enable rapid large-scale validation of mobile malware machine learning classifiers.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Elish, Karim O.</author><author>Shu, Xiaokui</author><author>Yao, Danfeng</author><author>Ryder, Barbara G.</author><author>Jiang, Xuxian</author></authors></contributors><titles><title>Profiling user-trigger dependence for Android malware detection</title><secondary-title>Computers and Security</secondary-title></titles><periodical><full-title>Computers and Security</full-title></periodical><pages>255-273</pages><volume>49</volume><issue>540</issue><keywords><keyword>Android malware</keyword><keyword>Malware detection</keyword><keyword>Static program analysis</keyword><keyword>User-intention</keyword><keyword>User-trigger dependence</keyword></keywords><dates><year>2015</year></dates><isbn>01674048 (ISSN)</isbn><electronic-resource-num>10.1016/j.cose.2014.11.001</electronic-resource-num><urls><pdf-urls><url>internal-pdf://a9dfd00b2f53a3ebd34c347fca857f2b6c70.pdf</url></pdf-urls></urls><abstract>As mobile computing becomes an integral part of the modern user experience, malicious applications have infiltrated open marketplaces for mobile platforms. Malware apps stealthily launch operations to retrieve sensitive user or device data or abuse system resources. We describe a highly accurate classification approach for detecting malicious Android apps. Our method statically extracts a data-flow feature on how user inputs trigger sensitive API invocations, a property referred to as the user-trigger dependence. Our evaluation with 1433 malware apps and 2684 free popular apps gives a classification accuracy (2.1% false negative rate and 2.0% false positive rate) that is better than, or at least competitive against, the state-of-the-art. Our method also discovers new malicious apps in the Google Play market that cannot be detected by virus scanning tools. Our thesis in this mobile app classification work is to advocate the approach of benign property enforcement, i.e., extracting unique behavioral properties from benign programs and designing corresponding classification policies.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Poeplau, Sebastian</author><author>Fratantonio, Yanick</author><author>Bianchi, Antonio</author><author>Kruegel, Christopher</author><author>Vigna, Giovanni</author></authors></contributors><titles><title>Execute This! Analyzing Unsafe and Malicious Dynamic Code Loading in Android Applications</title><secondary-title>Proceedings 2014 Network and Distributed System Security Symposium</secondary-title></titles><periodical><full-title>Proceedings 2014 Network and Distributed System Security Symposium</full-title></periodical><pages>23-26</pages><issue>February</issue><keywords/><dates><year>2014</year></dates><isbn>1-891562-35-5</isbn><electronic-resource-num>10.14722/ndss.2014.23328</electronic-resource-num><urls><pdf-urls><url>internal-pdf://f58f7408362036196048c9ba11f399dd9bc2.pdf</url></pdf-urls><web-urls><url>http://www.internetsociety.org/doc/execute-analyzing-unsafe-and-malicious-dynamic-code-loading-android-applications</url></web-urls></urls><abstract>The design of the Android system allows applica- tions to load additional code from external sources at runtime. On the one hand, malware can use this capability to add malicious functionality after it has been inspected by an application store or anti-virus engine at installation time. On the other hand, developers of benign applications can inadvertently introduce vul- nerabilities. In this paper, we systematically analyze the security implications of the ability to load additional code in Android. We developed a static analysis tool to automatically detect attempts to load external code using static analysis techniques, and we performed a large-scale study of 1,632 popular applications from the Google Play store, showing that loading external code in an insecure way is a problem in as much as 9.25% of those applications and even 16% of the top 50 free applications. We also show how malware can use code-loading techniques to avoid detection by exploiting a conceptual weakness in current Android malware protection. Finally, we propose modifications to the Android framework that enforce integrity checks on code to mitigate the threats imposed by the ability to load external code.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Vidas, Timothy</author><author>Christin, Nicolas</author></authors></contributors><titles><title>Evading android runtime analysis via sandbox detection</title><secondary-title>ASIA CCS '14 (9th ACM symposium on Information, computer and communications security)</secondary-title></titles><periodical><full-title>ASIA CCS '14 (9th ACM symposium on Information, computer and communications security)</full-title></periodical><pages>447-458</pages><keywords><keyword>android</keyword><keyword>evasion</keyword><keyword>malware</keyword><keyword>sandbox</keyword><keyword>security</keyword></keywords><dates><year>2014</year></dates><isbn>9781450328005</isbn><electronic-resource-num>10.1145/2590296.2590325</electronic-resource-num><urls><pdf-urls><url>internal-pdf://a891fef1b26d70612eee741e5a0b840b80cb.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2590296.2590325</url></web-urls></urls><abstract>The large amounts of malware, and its diversity, have made it nec- essary for the security community to use automated dynamic anal- ysis systems. These systems often rely on virtualization or emu- lation, and have recently started to be available to process mobile malware. Conversely, malware authors seek to detect such systems and evade analysis. In this paper, we present techniques for detect- ing Android runtime analysis systems. Our techniques are classi- fied into four broad classes showing the ability to detect systems based on differences in behavior, performance, hardware and soft- ware components, and those resulting from analysis system design choices. We also evaluate our techniques against current publicly accessible systems, all of which are easily identified and can there- fore be hindered by a motivated adversary. Our results show some fundamental limitations in the viability of dynamicmobilemalware analysis platforms purely based on virtualization.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wu, Chiachih</author><author>Zhou, Yajin</author><author>Patel, Kunal</author><author>Liang, Zhenkai</author><author>Jiang, Xuxian</author></authors></contributors><titles><title>AirBag: Boosting Smartphone Resistance to Malware Infection</title><secondary-title>Proceedings of the 21th …</secondary-title></titles><periodical><full-title>Proceedings of the 21th …</full-title></periodical><pages>23-26</pages><issue>February</issue><keywords/><dates><year>2014</year></dates><isbn>1891562355</isbn><electronic-resource-num>10.14722/ndss.2014.23164</electronic-resource-num><urls><pdf-urls><url>internal-pdf://f6af261a88716980485638f2d06f94bbf2d4.pdf</url></pdf-urls><web-urls><url>http://www.csc.ncsu.edu/faculty/jiang/pubs/NDSS14_AIRBAG.pdf</url></web-urls></urls><abstract>Recent years have experienced explosive growth of smartphone sales. Inevitably, the rise in the popularity of smartphones also makes them an attractive target for attacks. In light of these threats, current mobile platform providers have developed various server-side vetting processes to block malicious applications (“apps”). While helpful, they are still far from ideal in achieving their goals. To make matters worse, the presence of alternative (less-regulated) mobile marketplaces also opens up new attack vectors, which necessitate client-side solutions (e.g., mobile anti-virus software) to run on mobile devices. However, existing client-side solutions still exhibit limitations in their capability or deployability. In this paper, we present AirBag, a lightweight OS-level virtualization approach to enhance the popular Android platform and boost our defense capability against mobile malware infection. Assuming a trusted smartphone OS kernel and the fact that untrusted apps will be eventually installed onto users’ phones, AirBag is designed to isolate and prevent them from infecting our normal systems (e.g., corrupting the phone firmware) or stealthily leaking private information. More specifically, by dynamically creating an isolated runtime environment with its own dedicated namespace and virtualized system resources, AirBag not only allows for transparent execution of untrusted apps, but also effectively mediates their access to various system resources or phone functionalities (e.g., SMSs or phone calls). We have implemented a proof-of-concept prototype on three representative mobile devices, i.e., Google Nexus One, Nexus 7, and Samsung Galaxy S III. The evaluation results with a number of untrusted apps, including real-world mobile malware, demonstrate its practicality and effectiveness</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Enck, William</author><author>Octeau, Damien</author><author>McDaniel, Patrick</author><author>Chaudhuri, Swarat</author></authors></contributors><titles><title>A Study of Android Application Security</title><secondary-title>USENIX Security Symposium</secondary-title></titles><periodical><full-title>USENIX Security Symposium</full-title></periodical><pages>21-21</pages><issue>August</issue><keywords/><dates><year>2011</year></dates><isbn>0025601008828</isbn><accession-num>20238212</accession-num><electronic-resource-num>10.1007/s00256-010-0882-8</electronic-resource-num><urls><pdf-urls><url>internal-pdf://eabd538d777556f3e87399959d05cefa1f69.pdf</url></pdf-urls><web-urls><url>http://www.usenix.org/event/sec11/tech/slides/enck.pdf</url></web-urls></urls><abstract>The fluidity of application markets complicate smartphone security. Although recent efforts have shed light on particular security issues, there remains little insight into broader security characteristics of smartphone applications. This paper seeks to better understand smartphone application security by studying 1,100 popular free Android applications. We introduce the ded decompiler, which recovers Android application source code directly from its installation image. We design and execute a horizontal study of smartphone applications based on static analysis of 21 million lines of recovered code. Our analysis uncovered pervasive use/misuse of personal/ phone identifiers, and deep penetration of advertising and analytics networks. However, we did not find evidence of malware or exploitable vulnerabilities in the studied applications. We conclude by considering the implications of these preliminary findings and offer directions for future analysis.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sanz, Borja</author><author>Santos, Igor</author><author>Laorden, Carlos</author><author>Ugarte-Pedrero, Xabier</author><author>Bringas, Pablo Garcia</author><author>Álvarez, Gonzalo</author></authors></contributors><titles><title>PUMA: Permission usage to detect malware in android</title><secondary-title>Advances in Intelligent Systems and Computing</secondary-title></titles><periodical><full-title>Advances in Intelligent Systems and Computing</full-title></periodical><pages>289-298</pages><volume>189 AISC</volume><keywords><keyword>Android</keyword><keyword>machine learning</keyword><keyword>malware detection</keyword><keyword>mobile malware</keyword></keywords><dates><year>2013</year></dates><isbn>9783642330179</isbn><electronic-resource-num>10.1007/978-3-642-33018-6_30</electronic-resource-num><urls><pdf-urls><url>internal-pdf://f73c89d5fb429d60e3a2ed1b4d0168ee5cbd.pdf</url></pdf-urls></urls><abstract>The presence of mobile devices has increased in our lives offering\nalmost the same functionality as a personal computer. Android devices\nhave appeared lately and, since then, the number of applications\navailable for this operating system has increased exponentially. Google\nalready has its Android Market where applications are offered and, as\nhappens with every popular media, is prone to misuse. In fact, malware\nwriters insert malicious applications into this market, but also among\nother alternative markets. Therefore, in this paper, we present PUMA, a\nnew method for detecting malicious Android applications through\nmachine-learning techniques by analysing the extracted permissions from\nthe application itself.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Schmidt, Aubrey-derrick</author><author>Bye, Rainer</author><author>Schmidt, Hans-gunther</author><author>Clausen, Jan</author><author>Kiraz, Osman</author></authors></contributors><titles><title>Static Analysis of Executables for Collaborative Malware Detection on Android Static Analysis of Executables for Collaborative Malware Detection on Android</title></titles><periodical/><issue>June</issue><keywords/><dates><year>2009</year></dates><isbn>9781424434350</isbn><electronic-resource-num>10.1109/ICC.2009.5199486</electronic-resource-num><urls><pdf-urls><url>internal-pdf://d0c06dbec7c0481aac69bdbb5fdf4b0ed1ec.pdf</url></pdf-urls></urls></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Chin, Erika</author><author>Felt, Ap</author><author>Greenwood, Kate</author><author>Wagner, David</author></authors></contributors><titles><title>Analyzing inter-application communication in Android</title><secondary-title>Proceedings of the 9th …</secondary-title></titles><periodical><full-title>Proceedings of the 9th …</full-title></periodical><pages>239-252</pages><keywords><keyword>android</keyword><keyword>intents</keyword><keyword>message passing</keyword><keyword>mobile phone security</keyword><keyword>test-tag</keyword></keywords><dates><year>2011</year></dates><isbn>9781450306430</isbn><electronic-resource-num>10.1145/1999995.2000018</electronic-resource-num><urls><pdf-urls><url>internal-pdf://caab8fb3bf1a39ae1b185c40843a2e78b7e9.pdf</url></pdf-urls><web-urls><url>http://www.eecs.berkeley.edu/~emc/papers/mobi168-chin.pdf%5Cnhttp://dl.acm.org/citation.cfm?id=2000018</url></web-urls></urls><abstract>Modern smartphone operating systems support the devel- opment of third-party applications with open system APIs. In addition to an open API, the Android operating system also provides a rich inter-application message passing sys- tem. This encourages inter-application collaboration and reduces developer burden by facilitating component reuse. Unfortunately, message passing is also an application at- tack surface. The content of messages can be sniffed, modi- fied, stolen, or replaced, which can compromise user privacy. Also, a malicious application can inject forged or otherwise malicious messages, which can lead to breaches of user data and violate application security policies. We examine Android application interaction and identify security risks in application components. We provide a tool, ComDroid, that detects application communication vulner- abilities. ComDroid can be used by developers to analyze their own applications before release, by application review- ers to analyze applications in the Android Market, and by end users. We analyzed 20 applications with the help of ComDroid and found 34 exploitable vulnerabilities; 12 of the 20 applications have at least one vulnerability.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Arzt, Steven</author><author>Rasthofer, Siegfried</author><author>Fritz, Christian</author><author>Bodden, Eric</author><author>Bartel, Alexandre</author><author>Klein, Jacques</author><author>Traon, Yves Le</author><author>Octeau, Damien</author><author>Mcdaniel, Patrick</author></authors></contributors><titles><title>FlowDroid : Precise Context , Flow , Field , Object-sensitive and Lifecycle-aware Taint Analysis for Android Apps</title><secondary-title>PLDI '14 Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation</secondary-title></titles><periodical><full-title>PLDI '14 Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation</full-title></periodical><pages>259-269</pages><keywords/><dates><year>2014</year></dates><isbn>9781450327848</isbn><electronic-resource-num>10.1145/2594291.2594299</electronic-resource-num><urls><pdf-urls><url>internal-pdf://e8b118efecb9f5b2056d84bf22253a2fb63c.pdf</url></pdf-urls></urls><abstract>Today’s smartphones are a ubiquitous source of private and confi- dential data. At the same time, smartphone users are plagued by carelessly programmed apps that leak important data by accident, and by malicious apps that exploit their given privileges to copy such data intentionally. While existing static taint-analysis approaches have the potential of detecting such data leaks ahead of time, all ap- proaches for Android use a number of coarse-grain approximations that can yield high numbers of missed leaks and false alarms. In this work we thus present FLOWDROID, a novel and highly precise static taint analysis for Android applications. A precise model of Android’s lifecycle allows the analysis to properly handle callbacks invoked by the Android framework, while context, flow, field and object-sensitivity allows the analysis to reduce the number of false alarms. Novel on-demand algorithms help FLOWDROID maintain high efficiency and precision at the same time. We also propose DROIDBENCH, an open test suite for evaluating the effectiveness and accuracy of taint-analysis tools specifically for Android apps. As we show through a set of experiments using SecuriBench Micro, DROIDBENCH, and a set of well-known An- droid test applications, FLOWDROID finds a very high fraction of data leaks while keeping the rate of false positives low. On DROIDBENCH, FLOWDROID achieves 93% recall and 86% pre- cision, greatly outperforming the commercial tools IBM AppScan Source and Fortify SCA. FLOWDROID successfully finds leaks in a subset of 500 apps from Google Play and about 1,000 malware apps from</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>He, Dongjing</author><author>Naveed, Muhammad</author><author>Gunter, Carl A</author><author>Nahrstedt, Klara</author></authors></contributors><titles><title>Security Concerns in Android mHealth Apps.</title><secondary-title>AMIA ... Annual Symposium proceedings / AMIA Symposium. AMIA Symposium</secondary-title></titles><periodical><full-title>AMIA ... Annual Symposium proceedings / AMIA Symposium. AMIA Symposium</full-title></periodical><pages>645-54</pages><volume>2014</volume><issue>November</issue><keywords><keyword>Computer Security</keyword><keyword>Internet</keyword><keyword>Mobile Applications</keyword><keyword>Privacy</keyword><keyword>Software</keyword><keyword>Telemedicine</keyword></keywords><dates><year>2014</year></dates><isbn>1942-597X</isbn><accession-num>25954370</accession-num><urls><pdf-urls><url>internal-pdf://d00e0c3084317f9060e27b1fdd8348bb89c2.pdf</url></pdf-urls><web-urls><url>http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=4419898&amp;tool=pmcentrez&amp;rendertype=abstract</url></web-urls></urls><abstract>Mobile Health (mHealth) applications lie outside of regulatory protection such as HIPAA, which requires a baseline of privacy and security protections appropriate to sensitive medical data. However, mHealth apps, particularly those in the app stores for iOS and Android, are increasingly handling sensitive data for both professionals and patients. This paper presents a series of three studies of the mHealth apps in Google Play that show that mHealth apps make widespread use of unsecured Internet communications and third party servers. Both of these practices would be considered problematic under HIPAA, suggesting that increased use of mHealth apps could lead to less secure treatment of health data unless mHealth vendors make improvements in the way they communicate and store data.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Afifi, Firdaus</author><author>Anuar, Nor Badrul</author><author>Shamshirband, Shahaboddin</author><author>Choo, Kim Kwang Raymond</author></authors></contributors><titles><title>DyHAP: Dynamic Hybrid ANFIS-PSO approach for predicting mobile malware</title><secondary-title>PLoS ONE</secondary-title></titles><periodical><full-title>PLoS ONE</full-title></periodical><pages>1-21</pages><volume>11</volume><issue>9</issue><keywords/><dates><year>2016</year></dates><electronic-resource-num>10.1371/journal.pone.0162627</electronic-resource-num><urls><pdf-urls><url>internal-pdf://3bc75d25d1bbc2ad212acaeeef65a4a33644.pdf</url></pdf-urls></urls><abstract>© 2016 Afifi et al.This is an open access article distributed under the terms of the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.To deal with the large number of malicious mobile applications (e.g. mobile malware), a number of malware detection systems have been proposed in the literature. In this paper, we propose a hybrid method to find the optimum parameters that can be used to facilitate mobile malware identification.We also present a multi agent system architecture comprising three system agents (i.e. sniffer, extraction and selection agent) to capture and manage the pcap file for data preparation phase. In our hybrid approach, we combine an adaptive neuro fuzzy inference system (ANFIS) and particle swarm optimization (PSO). Evaluations using data captured on a real-world Android device and the MalGenome dataset demonstrate the effectiveness of our approach, in comparison to two hybrid optimization methods which are differential evolution (ANFIS-DE) and ant colony optimization (ANFIS-ACO).</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Shabtai, Asaf</author><author>Kanonov, Uri</author><author>Elovici, Yuval</author><author>Glezer, Chanan</author><author>Weiss, Yael</author></authors></contributors><titles><title>&quot;Andromaly&quot;: A behavioral malware detection framework for android devices</title><secondary-title>Journal of Intelligent Information Systems</secondary-title></titles><periodical><full-title>Journal of Intelligent Information Systems</full-title></periodical><pages>161-190</pages><volume>38</volume><issue>1</issue><keywords><keyword>Android</keyword><keyword>Machine learning</keyword><keyword>Malware</keyword><keyword>Mobile devices</keyword><keyword>Security</keyword></keywords><dates><year>2012</year></dates><isbn>8242860610</isbn><electronic-resource-num>10.1007/s10844-010-0148-x</electronic-resource-num><urls><pdf-urls><url>internal-pdf://shabtai2011.pdf</url></pdf-urls></urls><abstract>This article presents Andromaly--a framework for detecting malware on Android mobile devices. The proposed framework realizes a Host-based Malware Detection System that continuously monitors various features and events obtained from the mobile device and then applies Machine Learning anomaly detectors to classify the collected data as normal (benign) or abnormal (malicious). Since no malicious applications are yet available for Android, we developed four malicious applications, and evaluated Andromaly's ability to detect new malware based on samples of known malware. We evaluated several combinations of anomaly detection algorithms, feature selection method and the number of top features in order to find the combination that yields the best performance in detecting new malware on Android. Empirical results suggest that the proposed framework is effective in detecting malware on mobile devices in general and on Android in particular.[PUBLICATION ABSTRACT]</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Petsas, Thanasis</author><author>Voyatzis, Giannis</author><author>Athanasopoulos, Elias</author><author>Polychronakis, Michalis</author><author>Ioannidis, Sotiris</author></authors></contributors><titles><title>Rage Against the Virtual Machine: Hindering Dynamic Analysis of Android Malware</title><secondary-title>Proceedings of the Seventh European Workshop on System Security</secondary-title></titles><periodical><full-title>Proceedings of the Seventh European Workshop on System Security</full-title></periodical><pages>5:1--5:6</pages><keywords/><dates><year>2014</year></dates><isbn>978-1-4503-2715-2</isbn><electronic-resource-num>10.1145/2592791.2592796</electronic-resource-num><urls><pdf-urls><url>internal-pdf://petsas2014.pdf</url></pdf-urls><web-urls><url>http://doi.acm.org.acces.bibl.ulaval.ca/10.1145/2592791.2592796</url></web-urls></urls><abstract>Antivirus companies, mobile application marketplaces, and the security research community, employ techniques based on dynamic code analysis to detect and analyze mobile malware. In this paper, we present a broad range of anti-analysis techniques that malware can employ to evade dynamic analysis in emulated Android environments. Our detection heuristics span three different categories based on (i) static properties, (ii) dynamic sensor information, and (iii) VM-related intricacies of the Android Emulator. To assess the effectiveness of our techniques, we incorporated them in real malware samples and submitted them to publicly available Android dynamic analysis systems, with alarming results. We found all tools and services to be vulnerable to most of our evasion techniques. Even trivial techniques, such as checking the value of the IMEI, are enough to evade some of the existing dynamic analysis frameworks. We propose possible countermeasures to improve the resistance of current dynamic analysis tools against evasion attempts.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Russello, Giovanni</author><author>Jimenez, Arturo Blas</author><author>Naderi, Habib</author><author>van der Mark, Wannes</author></authors></contributors><titles><title>FireDroid: hardening security in almost-stock Android</title><secondary-title>Acsac '13</secondary-title></titles><periodical><full-title>Acsac '13</full-title></periodical><pages>319-328</pages><keywords><keyword>android security enhancement</keyword><keyword>policy-based security</keyword><keyword>system call interposition</keyword></keywords><dates><year>2013</year></dates><isbn>9781450320153</isbn><electronic-resource-num>10.1145/2523649.2523678</electronic-resource-num><urls><pdf-urls><url>internal-pdf://russello2013.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2523678%5Cnhttp://dl.acm.org/citation.cfm?doid=2523649.2523678</url></web-urls></urls><abstract>Malware poses a serious threat to Android smartphones. Current security mechanisms offer poor protection and are often too inflexible to quickly mitigate new exploits. In this paper we present FireDroid, a policy-based framework for enforcing security policies by interleaving process system calls. The main advantage of FireDroid is that it is completely transparent to the applications as well as to the Android OS. FireDroid enforces security policies without modifying either the Android OS or its applications. FireDroid is able to perform security checks on third-party and pre-installed applications, as well as malicious native code. We have implemented a novel mechanism that is able to attach, identify, monitor and enforce polices for any process spawned by the Android's mother process Zygote. We have tested the effectiveness of FireDroid against real malware. Moreover, we show how FireDroid can be used as a swift solution for blocking OS and application vulnerabilities before patches are available. Finally, we provide an experimental evaluation of our approach showing that it has only a limited overhead. Given these facts, FireDroid represents a practical solution for strengthening security on Android smartphones.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Yerima, Suleiman Y</author><author>Sezer, Sakir</author><author>McWilliams, Gavin</author><author>Muttik, Igor</author></authors></contributors><titles><title>A New Android Malware Detection Approach Using Bayesian Classification</title><secondary-title>2013 IEEE 27th International Conference on Advanced Information Networking and Applications (AINA)</secondary-title></titles><periodical><full-title>2013 IEEE 27th International Conference on Advanced Information Networking and Applications (AINA)</full-title></periodical><pages>121-128</pages><keywords><keyword>Android</keyword><keyword>Android app marketplaces</keyword><keyword>Android malware detection approach</keyword><keyword>Bayesian classification</keyword><keyword>app characteristics</keyword><keyword>bayesian classification</keyword><keyword>data mining</keyword><keyword>digital signatures</keyword><keyword>invasive software</keyword><keyword>machine learning</keyword><keyword>malicious apps</keyword><keyword>malware detection</keyword><keyword>mobile computing</keyword><keyword>mobile malware</keyword><keyword>mobile platforms</keyword><keyword>mobile security</keyword><keyword>operating systems (computers)</keyword><keyword>program diagnostics</keyword><keyword>signature-based scanners</keyword><keyword>smart phones</keyword><keyword>smartphone usage</keyword><keyword>static analysis</keyword><keyword>static code analysis</keyword></keywords><dates><year>2013</year></dates><isbn>978-1-4673-5550-6</isbn><electronic-resource-num>10.1109/AINA.2013.88</electronic-resource-num><urls><pdf-urls><url>internal-pdf://yerima2013.pdf</url></pdf-urls><web-urls><url>http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6531746</url></web-urls></urls><abstract>Mobile malware has been growing in scale and complexity as smartphone usage continues to rise. Android has surpassed other mobile platforms as the most popular whilst also witnessing a dramatic increase in malware targeting the platform. A worrying trend that is emerging is the increasing sophistication of Android malware to evade detection by traditional signature-based scanners. As such, Android app marketplaces remain at risk of hosting malicious apps that could evade detection before being downloaded by unsuspecting users. Hence, in this paper we present an effective approach to alleviate this problem based on Bayesian classification models obtained from static code analysis. The models are built from a collection of code and app characteristics that provide indicators of potential malicious activities. The models are evaluated with real malware samples in the wild and results of experiments are presented to demonstrate the effectiveness of the proposed approach.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Grace, Michael</author><author>Zhou, Yajin</author><author>Zhang, Qiang</author><author>Zou, Shihong</author><author>Jiang, Xuxian</author></authors></contributors><titles><title>RiskRanker: Scalable and Accurate Zero-day Android Malware Detection</title><secondary-title>10th International Conference on Mobile Systems, Applications, and Services</secondary-title></titles><periodical><full-title>10th International Conference on Mobile Systems, Applications, and Services</full-title></periodical><pages>281-294</pages><keywords><keyword>android</keyword><keyword>malware</keyword><keyword>riskranker</keyword></keywords><dates><year>2012</year></dates><isbn>9781450313018</isbn><electronic-resource-num>10.1145/2307636.2307663</electronic-resource-num><urls><pdf-urls><url>internal-pdf://grace2012.pdf</url></pdf-urls></urls><abstract>Smartphone sales have recently experienced explosive growth. Their popularity also encourages malware authors to pene- trate various mobile marketplaces with malicious applica- tions (or apps). These malicious apps hide in the sheer number of other normal apps, which makes their detection challenging. Existing mobile anti-virus software are inade- quate in their reactive nature by relying on known malware samples for signature extraction. In this paper, we propose a proactive scheme to spot zero-day Android malware. With- out relying on malware samples and their signatures, our scheme is motivated to assess potential security risks posed by these untrusted apps. Specifically, we have developed an automated system called RiskRanker to scalably analyze whether a particular app exhibits dangerous behavior (e.g., launching a root exploit or sending background SMS mes- sages). The output is then used to produce a prioritized list of reduced apps that merit further investigation. When applied to examine 118 , 318 total apps collected from var- ious Android markets over September and October 2011, our system takes less than four days to process all of them and effectively reports 3281 risky apps. Among these re- ported apps, we successfully uncovered 718 malware samples (in 29 families) and 322 of them are zero-day (in 11 fami- lies). These results demonstrate the efficacy and scalability of RiskRanker to police Android markets of all stripes.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Gascon, Hugo</author><author>Yamaguchi, Fabian</author><author>Arp, Daniel</author><author>Rieck, Konrad</author></authors></contributors><titles><title>Structural detection of android malware using embedded call graphs</title><secondary-title>Proceedings of the 2013 ACM workshop on Artificial intelligence and security - AISec '13</secondary-title></titles><periodical><full-title>Proceedings of the 2013 ACM workshop on Artificial intelligence and security - AISec '13</full-title></periodical><pages>45-54</pages><keywords><keyword>graph kernels</keyword><keyword>machine learning</keyword><keyword>malware detection</keyword></keywords><dates><year>2013</year></dates><isbn>9781450324885</isbn><electronic-resource-num>10.1145/2517312.2517315</electronic-resource-num><urls><pdf-urls><url>internal-pdf://gascon2013.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2517312.2517315</url></web-urls></urls><abstract>They do machine learning to classify benign vs malware android apps. they first build the CG (using Androguard, no details specified), they then label each node using a bunch of 15 bits that identify the presence of instructions belonging to family x (where x goes from 1 to 15). They then do hashing of neighborhoods to come up with a label that represents/models subgraphs. Then, they apply some machine-learning magic and they use linear time graph-kernels, then they train SVN. They evaluate this with a lot of apps, and it works pretty well.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Jimenez, Lina M</author><author>Ochoa, Martín</author><author>Rueda, Sandra Julieta</author></authors></contributors><titles><title>Jif-Based Verification of Information Flow Policies for Android Apps.</title><secondary-title>Ijsse</secondary-title></titles><periodical><full-title>Ijsse</full-title></periodical><pages>28-42</pages><volume>8</volume><issue>1</issue><keywords><keyword>android</keyword><keyword>information flow security policies</keyword><keyword>jif</keyword><keyword>security-typed languages</keyword></keywords><dates><year>2017</year></dates><electronic-resource-num>10.4018/IJSSE.2017010102</electronic-resource-num><urls><pdf-urls><url>internal-pdf://08d19775ab5f11448a608c10556ed1ad7794.pdf</url></pdf-urls><web-urls><url>http://dblp.uni-trier.de/db/journals/ijsse/ijsse8.html#JimenezOR17</url></web-urls></urls></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Ozsoy, Meltem</author><author>Khasawneh, Khaled N</author><author>Donovick, Caleb</author><author>Gorelik, Iakov</author><author>Abu-Ghazaleh, Nael</author><author>Ponomarev, Dmitry V</author></authors></contributors><titles><title>Hardware-based Malware Detection using Low level Architectural Features</title></titles><periodical/><pages>1-14</pages><keywords/><urls><pdf-urls><url>internal-pdf://5fde2350f65272d7cad5965f74cff5cf4aca.pdf</url></pdf-urls></urls></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Yerima, Suleiman Y</author><author>Sezer, Sakir</author><author>Muttik, Igor</author></authors></contributors><titles><title>High accuracy android malware detection using ensemble learning.</title><secondary-title>IET Information Security</secondary-title></titles><periodical><full-title>IET Information Security</full-title></periodical><pages>313-320</pages><volume>9</volume><issue>6</issue><keywords><keyword>GOOGLE Inc.</keyword><keyword>INFORMATION &amp; communication technologies</keyword><keyword>MACHINE learning</keyword><keyword>MALWARE (Computer software)</keyword><keyword>SMARTPHONES</keyword></keywords><dates><year>2015</year></dates><electronic-resource-num>10.1049/iet-ifs.2014.0099</electronic-resource-num><urls><pdf-urls><url>internal-pdf://6fc1efbbf94a624dde792ca911e6687a4fd4.pdf</url></pdf-urls><web-urls><url>http://10.0.4.25/iet-ifs.2014.0099%5Cnhttp://search.ebscohost.com/login.aspx?direct=true&amp;db=iih&amp;AN=110259059&amp;lang=es&amp;site=ehost-live</url></web-urls></urls><abstract>With over 50 billion downloads and more than 1.3 million apps in Google's official market, Android has continued to gain popularity among smartphone users worldwide. At the same time there has been a rise in malware targeting the platform, with more recent strains employing highly sophisticated detection avoidance techniques. As traditional signature-based methods become less potent in detecting unknown malware, alternatives are needed for timely zero-day discovery. Thus, this study proposes an approach that utilises ensemble learning for Android malware detection. It combines advantages of static analysis with the efficiency and performance of ensemble machine learning to improve Android malware detection accuracy. The machine learning models are built using a large repository of malware samples and benign apps from a leading antivirus vendor. Experimental results and analysis presented shows that the proposed method which uses a large feature space to leverage the power of ensemble learning is capable of 97.3-99% detection accuracy with very low false positive rates. [ABSTRACT FROM AUTHOR]</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Alam, Shahid</author><author>Riley, Ryan</author><author>Chen, Yan</author></authors></contributors><titles><title>DroidNative : Semantic-Based Detection of Android Native Code Malware</title></titles><periodical/><keywords><keyword>android native</keyword><keyword>code</keyword><keyword>control flow analysis</keyword><keyword>data mining</keyword><keyword>end point security</keyword><keyword>malware analysis</keyword><keyword>malware variants detection</keyword></keywords><dates><year>2016</year></dates><urls><pdf-urls><url>internal-pdf://1602.04693.pdf</url></pdf-urls></urls></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Abdullah, Kabakus</author></authors></contributors><titles><title>APK Auditor : Permission ­ based Android malware detection system</title></titles><periodical/><pages>1-2</pages><volume>13</volume><keywords/><dates><year>2015</year></dates><electronic-resource-num>10.1016/j.diin.2015.01.001</electronic-resource-num><urls><pdf-urls><url>internal-pdf://6e7a9cbe1d45efd7b7ddc4845890235da73e.pdf</url></pdf-urls></urls></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Tripp, Omer</author><author>Pistoia, Marco</author><author>Ferrara, Pietro</author><author>Rubin, Julia</author></authors></contributors><titles><title>Pinpointing Mobile Malware Using Code Analysis</title><secondary-title>Proceedings of the International Workshop on Mobile Software Engineering and Systems</secondary-title></titles><periodical><full-title>Proceedings of the International Workshop on Mobile Software Engineering and Systems</full-title></periodical><pages>275-276</pages><keywords><keyword>classification</keyword><keyword>machine learning</keyword><keyword>malware detection</keyword><keyword>static analysis</keyword><keyword>trace features</keyword></keywords><dates><year>2016</year></dates><isbn>978-1-4503-4178-3</isbn><electronic-resource-num>10.1145/2897073.2897707</electronic-resource-num><urls><pdf-urls><url>internal-pdf://43f6fd50a33bf67a6554147e58dd366980da.pdf</url></pdf-urls><web-urls><url>http://doi.acm.org/10.1145/2897073.2897707</url></web-urls></urls></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sun, Mingshen</author><author>Wei, Tao</author><author>C.S.Lui, John</author></authors></contributors><titles><title>TaintART: A Practical Multi-level Information-Flow Tracking System for Android RunTime</title><secondary-title>Ccs</secondary-title></titles><periodical><full-title>Ccs</full-title></periodical><pages>331-342</pages><keywords/><dates><year>2016</year></dates><isbn>9781450341394</isbn><electronic-resource-num>10.1145/2976749.2978343</electronic-resource-num><urls><pdf-urls><url>internal-pdf://144c7810836017f542a2dd21047c2932f80e.pdf</url></pdf-urls><web-urls><url>http://www.cse.cuhk.edu.hk/~cslui/PUBLICATION/CCS16.pdf</url></web-urls></urls><abstract>Mobile operating systems like Android failed to provide sufficient protection on personal data, and privacy leakage becomes a major concern. To understand the security risks and privacy leakage, analysts have to carry out data-flow analysis. In 2014, Android upgraded with a fundamentally new design known as Android RunTime (ART) environment in Android 5.0. ART adopts ahead-of-time compilation strategy and replaces previous virtual-machine-based Dalvik. Unfortunately, many data-flow analysis systems like TaintDroid [19] were designed for the legacy Dalvik environ- ment. This makes data-flow analysis of new apps and malware infeasible. We design a multi-level information-flow tracking system for the new Android system called TaintART. TaintART employs a multi-level taint analysis technique to minimize the taint tag storage. Therefore, taint tags can be stored in processor registers to provide efficient taint propagation operations. We also customize the ART compiler to maximize performance gains of the ahead-of-time compilation optimizations. Based on the general design of TaintART, we also implement a multi-level privacy enforcement to prevent sensitive data leakage. We demonstrate that TaintART only incurs less than 15% overheads on a CPU-bound microbenchmark and negligible overhead on built-in or third-party applications. Compared to legacy Dalvik environment in Android 4.4, TaintART achieves about 99.7% faster performance for Java runtime benchmark.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sayfullina, Luiza</author><author>Eirola, Emil</author><author>Komashinsky, Dmitry</author><author>Palumbo, Paolo</author><author>Miche, Yoan</author><author>Lendasse, Amaury</author><author>Karhunen, Juha</author></authors></contributors><titles><title>Efficient detection of zero-day android malware using normalized bernoulli naive bayes</title><secondary-title>Proceedings - 14th IEEE International Conference on Trust, Security and Privacy in Computing and Communications, TrustCom 2015</secondary-title></titles><periodical><full-title>Proceedings - 14th IEEE International Conference on Trust, Security and Privacy in Computing and Communications, TrustCom 2015</full-title></periodical><pages>198-205</pages><volume>1</volume><keywords><keyword>Malware Classification</keyword><keyword>Naive Bayes</keyword><keyword>Security in Android</keyword></keywords><dates><year>2015</year></dates><isbn>9781467379519</isbn><electronic-resource-num>10.1109/Trustcom.2015.375</electronic-resource-num><urls><pdf-urls><url>internal-pdf://72d779aec5a56a2f4582ec1f0a52c880a882.pdf</url></pdf-urls></urls><abstract>According to a recent F-Secure report, 97% of mobile malware is designed for the Android platform which has a growing number of consumers. In order to protect consumers from downloading malicious applications, there should be an effective system of malware classification that can detect previously unseen viruses. In this paper, we present a scalable and highly accurate method for malware classification based on features extracted from Android application package (APK) files.We explored several techniques for tackling independence assumptions in Naive Bayes and proposed Normalized Bernoulli Naive Bayes classifier that resulted in an improved class sepa- ration and higher accuracy.We conducted a set of experiments on an up-to-date large dataset of APKs provided by F-Secure and achieved 0.1% false positive rate with overall accuracy of 91%.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Jang, Jae Wook</author><author>Kang, Hyunjae</author><author>Woo, Jiyoung</author><author>Mohaisen, Aziz</author><author>Kim, Huy Kang</author></authors></contributors><titles><title>Andro-Dumpsys: Anti-malware system based on the similarity of malware creator and malware centric information</title><secondary-title>Computers and Security</secondary-title></titles><periodical><full-title>Computers and Security</full-title></periodical><pages>125-138</pages><volume>58</volume><keywords><keyword>Android</keyword><keyword>Malware creator centric information</keyword><keyword>Mobile malware</keyword><keyword>Similarity</keyword><keyword>Volatile memory acquisition</keyword></keywords><dates><year>2016</year></dates><publisher>Elsevier Ltd</publisher><isbn>0167-4048</isbn><electronic-resource-num>10.1016/j.cose.2015.12.005</electronic-resource-num><urls><pdf-urls><url>internal-pdf://36c8655e807d451540ac80e0f274852892e3.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.cose.2015.12.005</url></web-urls></urls><abstract>With the fast growth in mobile technologies and the accompanied rise of the integration of such technologies into our everyday life, mobile security is viewed as one of the most prominent areas and is being addressed accordingly. For that, and especially to address the threat associated with malware, various malware-centric analysis methods are developed in the literature to identify, classify, and defend against mobile threats and malicious actors. However, along with this development, anti-malware analysis techniques, such as packing, dynamic loading, and dex encryption, have seen wide adoption, making existing malware-centric analysis methods less effective. In this paper, we propose a feature-rich hybrid anti-malware system, called Andro-Dumpsys, which leverages volatile memory acquisition for accurate malware detection and classification. Andro-Dumpsys is based on similarity matching of malware creator-centric and malware-centric information. Using Andro-Dumpsys, we detect and classify malware samples into similar behavior groups by exploiting their footprints, which are equivalent to unique behavior characteristics. Our experimental results demonstrate that Andro-Dumpsys is scalable, and performs well in detecting malware and classifying malware families with low false positives and false negatives, and is capable of responding zero-day threats.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Hu, Weiwei</author><author>Tan, Ying</author></authors></contributors><titles><title>Generating Adversarial Malware Examples for Black-Box Attacks Based on GAN</title></titles><periodical/><keywords/><dates><year>2017</year></dates><urls><pdf-urls><url>internal-pdf://1702.05983.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1702.05983</url></web-urls></urls><abstract>Machine learning has been used to detect new malware in recent years, while malware authors have strong motivation to attack such algorithms. Malware authors usually have no access to the detailed structures and parameters of the machine learning models used by malware detection systems, and therefore they can only perform black-box attacks. This paper proposes a generative adversarial network (GAN) based algorithm named MalGAN to generate adversarial malware examples, which are able to bypass black-box machine learning based detection models. MalGAN uses a substitute detector to fit the black-box malware detection system. A generative network is trained to minimize the generated adversarial examples' malicious probabilities predicted by the substitute detector. The superiority of MalGAN over traditional gradient based adversarial example generation algorithms is that MalGAN is able to decrease the detection rate to nearly zero and make the retraining based defensive method against adversarial examples hard to work.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bhandari, Shweta</author><author>Jaballah, Wafa Ben</author><author>Jain, Vineeta</author><author>Laxmi, Vijay</author><author>Zemmari, Akka</author><author>Gaur, Manoj Singh</author><author>Conti, Mauro</author></authors></contributors><titles><title>Android App Collusion Threat and Mitigation Techniques</title></titles><periodical/><pages>1-24</pages><keywords/><dates><year>2016</year></dates><urls><pdf-urls><url>internal-pdf://1611.10076.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1611.10076</url></web-urls></urls><abstract>With the digital breakthrough, smart phones have become very essential component. Mobile devices are very attractive attack surface for cyber thieves as they hold personal details (accounts, locations, contacts, photos) and have potential capabilities for eavesdropping (with cameras/microphone, wireless connections). Android, being the most popular, is the target of malicious hackers who are trying to use Android app as a tool to break into and control device. Android malware authors use many anti-analysis techniques to hide from analysis tools. Academic researchers and commercial anti-malware companies are putting great effort to detect such malicious apps. They are making use of the combinations of static, dynamic and behavior based analysis techniques. Despite of all the security mechanisms provided by Android, apps can carry out malicious actions through collusion. In collusion malicious functionality is divided across multiple apps. Each participating app accomplish its part and communicate information to another app through Inter Component Communication (ICC). ICC do not require any special permissions. Also, there is no compulsion to inform user about the communication. Each participating app needs to request a minimal set of privileges, which may make it appear benign to current state-of-the-art techniques that analyze one app at a time. There are many surveys on app analysis techniques in Android; however they focus on single-app analysis. This survey augments this through focusing only on collusion among multiple-apps. In this paper, we present Android vulnerabilities that may be exploited for a possible collusion attack. We cover the existing threat analysis, scenarios, and a detailed comparison of tools for intra and inter-app analysis. To the best of our knowledge this is the first survey on app collusion and state-of-the-art detection tools in Android.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Faruki, Parvez</author><author>Fereidooni, Hossein</author><author>Laxmi, Vijay</author><author>Conti, Mauro</author><author>and</author><author>Gaur, Manoj</author></authors></contributors><titles><title>Android Code Protection via Obfuscation Techniques: Past, Present and Future Directions</title><secondary-title>IJCAI International Joint Conference on Artificial Intelligence</secondary-title></titles><periodical><full-title>IJCAI International Joint Conference on Artificial Intelligence</full-title></periodical><pages>4207-4211</pages><volume>2015-Janua</volume><issue>00</issue><keywords><keyword>()</keyword></keywords><dates><year>2016</year></dates><isbn>9781577357384</isbn><accession-num>1000285845</accession-num><electronic-resource-num>10.1145/0000000.0000000</electronic-resource-num><urls><pdf-urls><url>internal-pdf://1611.10231.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1611.10231</url></web-urls></urls><abstract>Mobile devices have become ubiquitous due to centralization of private user information, contacts, messages and multiple sensors. Google Android, an open-source mobile Operating System (OS), is currently the market leader. Android popularity has motivated the malware authors to employ set of cyber attacks leveraging code obfuscation techniques. Obfuscation is an action that modifies an application (app) code, preserving the original semantics and functionality to evade anti-malware. Code obfuscation is a contentious issue. Theoretical code analysis techniques indicate that, attaining a verifiable and secure obfuscation is impossible. However, obfuscation tools and techniques are popular both among malware developers (to evade anti-malware) and commercial software developers (protect intellectual rights). We conducted a survey to uncover answers to concrete and relevant questions concerning Android code obfuscation and protection techniques. The purpose of this paper is to review code obfuscation and code protection practices, and evaluate efficacy of existing code de-obfuscation tools. In particular, we discuss Android code obfuscation methods, custom app protection techniques, and various de-obfuscation methods. Furthermore, we review and analyse the obfuscation techniques used by malware authors to evade analysis efforts. We believe that, there is a need to investigate efficiency of the defense techniques used for code protection. This survey would be beneficial to the researchers and practitioners, to understand obfuscation and de-obfuscation techniques to propose novel solutions on Android.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Chalise, Birendra</author></authors></contributors><titles><title>Android Permission</title></titles><periodical/><keywords><keyword>android permission</keyword><keyword>android update mechanism</keyword><keyword>feature based</keyword><keyword>malware bypassing</keyword><keyword>permission selection</keyword><keyword>poorly coded</keyword><keyword>programming</keyword><keyword>root access</keyword><keyword>steal of information</keyword></keywords><dates><year>2015</year></dates><urls><pdf-urls><url>internal-pdf://1607.04256.pdf</url></pdf-urls><web-urls><url>http://developer.android.com/guide/topics/manifest/permission-element.html</url></web-urls></urls></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Feng, Yu</author><author>Bastani, Osbert</author><author>Martins, Ruben</author><author>Dillig, Isil</author><author>Anand, Saswat</author></authors></contributors><titles><title>Automated Synthesis of Semantic Malware Signatures using Maximum Satisfiability</title></titles><periodical/><issue>March</issue><keywords/><dates><year>2016</year></dates><isbn>1891562460</isbn><electronic-resource-num>10.14722/ndss.2017.23379</electronic-resource-num><urls><pdf-urls><url>internal-pdf://1608.06254.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1608.06254</url></web-urls></urls><abstract>This paper proposes a technique for automatically learning semantic malware signatures for Android from very few samples of a malware family. The key idea underlying our technique is to look for a maximally suspicious common subgraph (MSCS) that is shared between all known instances of a malware family. An MSCS describes the shared functionality between multiple Android applications in terms of inter-component call relations and their semantic metadata (e.g., data-flow properties). Our approach identifies such maximally suspicious common subgraphs by reducing the problem to maximum satisfiability. Once a semantic signature is learned, our approach uses a combination of static analysis and a new approximate signature matching algorithm to determine whether an Android application matches the semantic signature characterizing a given malware family. We have implemented our approach in a tool called ASTROID and show that it has a number of advantages over state-of-the-art malware detection techniques. First, we compare the semantic malware signatures automatically synthesized by ASTROID with manually-written signatures used in previous work and show that the signatures learned by ASTROID perform better in terms of accuracy as well as precision. Second, we compare ASTROID against two state-of-the-art malware detection tools and demonstrate its advantages in terms of interpretability and accuracy. Finally, we demonstrate that ASTROID's approximate signature matching algorithm is resistant to behavioral obfuscation and that it can be used to detect zero-day malware. In particular, we were able to find 22 instances of zero-day malware in Google Play that are not reported as malware by existing tools.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wressnegger, Christian</author><author>Freeman, Kevin</author><author>Yamaguchi, Fabian</author><author>Rieck, Konrad</author></authors></contributors><titles><title>Automatically Inferring Malware Signatures for Anti-Virus Assisted Attacks</title><secondary-title>Asia Ccs</secondary-title></titles><periodical><full-title>Asia Ccs</full-title></periodical><pages>587-598</pages><issue>April 2, 2017</issue><keywords><keyword>Anti-Virus</keyword><keyword>Attacks</keyword><keyword>Malware</keyword><keyword>Signatures</keyword><keyword>anti-virus</keyword><keyword>attacks</keyword><keyword>malware</keyword><keyword>signatures</keyword></keywords><dates><year>2017</year></dates><isbn>9781450349444</isbn><electronic-resource-num>http://dx.doi.org/10.1145/3052973.3053002</electronic-resource-num><urls><pdf-urls><url>internal-pdf://1610.06022.pdf</url></pdf-urls></urls><abstract>Although anti-virus software has significantly evolved over the last decade, classic signature matching based on byte patterns is still a prevalent concept for identifying security threats. Anti-virus signatures are a simple and fast detection mechanism that can complement more sophisticated analysis strategies. However, if signatures are not designed with care, they can turn from a defensive mechanism into an instrument of attack. In this paper, we present a novel method for automatically deriving signatures from anti-virus software and discuss how the extracted signatures can be used to attack sensible data with the aid of the virus scanner itself. To this end, we study the practicability of our approach using four commercial products and exemplary demonstrate anti-virus assisted attacks in three different scenarios.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Grosse, Kathrin</author><author>Papernot, Nicolas</author><author>Manoharan, Praveen</author><author>Backes, Michael</author><author>McDaniel, Patrick</author></authors></contributors><titles><title>Adversarial Perturbations Against Deep Neural Networks for Malware Classification</title></titles><periodical/><keywords/><dates><year>2016</year></dates><urls><pdf-urls><url>internal-pdf://1606.04435.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1606.04435</url></web-urls></urls><abstract>Deep neural networks, like many other machine learning models, have recently been shown to lack robustness against adversarially crafted inputs. These inputs are derived from regular inputs by minor yet carefully selected perturbations that deceive machine learning models into desired misclassifications. Existing work in this emerging field was largely specific to the domain of image classification, since the high-entropy of images can be conveniently manipulated without changing the images' overall visual appearance. Yet, it remains unclear how such attacks translate to more security-sensitive applications such as malware detection - which may pose significant challenges in sample generation and arguably grave consequences for failure. In this paper, we show how to construct highly-effective adversarial sample crafting attacks for neural networks used as malware classifiers. The application domain of malware classification introduces additional constraints in the adversarial sample crafting problem when compared to the computer vision domain: (i) continuous, differentiable input domains are replaced by discrete, often binary inputs; and (ii) the loose condition of leaving visual appearance unchanged is replaced by requiring equivalent functional behavior. We demonstrate the feasibility of these attacks on many different instances of malware classifiers that we trained using the DREBIN Android malware data set. We furthermore evaluate to which extent potential defensive mechanisms against adversarial crafting can be leveraged to the setting of malware classification. While feature reduction did not prove to have a positive impact, distillation and re-training on adversarially crafted samples show promising results.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Chen, Zhenxiang</author><author>Han, Hongbo</author><author>Yan, Qiben</author><author>Yang, Bo</author><author>Peng, Lizhi</author><author>Zhang, Lei</author><author>Li, Jin</author></authors></contributors><titles><title>A first look at android malware traffic in first few minutes</title><secondary-title>Proceedings - 14th IEEE International Conference on Trust, Security and Privacy in Computing and Communications, TrustCom 2015</secondary-title></titles><periodical><full-title>Proceedings - 14th IEEE International Conference on Trust, Security and Privacy in Computing and Communications, TrustCom 2015</full-title></periodical><pages>206-213</pages><volume>1</volume><keywords><keyword>Malware</keyword><keyword>Raffic behavior</keyword><keyword>Traffic analysis</keyword></keywords><dates><year>2015</year></dates><isbn>9781467379519</isbn><electronic-resource-num>10.1109/Trustcom.2015.376</electronic-resource-num><urls><pdf-urls><url>internal-pdf://21578c44aeaae394f9414974ca81fb412ec1.pdf</url></pdf-urls></urls><abstract>With the advent of mobile era, mobile terminals are going through a trend of surpassing PC to become the most popular computing device. Meanwhile, the hackers and virus-writers are paying close attention to the mobile terminals, especially the Android platform. The growing of malwares on the Android system has drawn attentions from both the academia and security industry. Recently, mobile network traffic analysis has been used to identify the malware. But due to the lack of a large-scale malware repository and a systematic analysis of network traffic features, the existing research mostly remain in theory. In this paper, we design an Android malware traffic behavior monitoring scheme to capture traffic data generated by malware samples in a real Internet environment. We capture the network traffic from 5560 malware samples in the first 5 minutes, and analyze the major compositions of the traffic data. We discover that HTTP and DNS traffic are accounted for more than 99% on the application layer traffic. We then present an analysis of related network features: DNS query, HTTP packet length, ratio of downlink to uplink traffic amount, HTTP request and ad traffic feature. Our statistical results illustrate that: (1) more than 70% malwares generate malicious traffic in the first 5 minutes; (2) DNS query and HTTP request can be used to identify the malware, and the detection rate reaches 69.55% and 40.89% respectively; (3) ad traffic can greatly affect the malware detection. We believe our research provides an in-depth analysis into mobile malwares' network behaviors.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Rasthofer, Siegfried</author><author>Asrar, Irfan</author><author>Huber, Stephan</author><author>Bodden, Eric</author></authors></contributors><titles><title>How Current Android Malware Seeks to Evade Automated Code Analysis</title></titles><periodical/><issue>July 2014</issue><keywords><keyword>android malware</keyword><keyword>banking trojans</keyword><keyword>botnet</keyword><keyword>code analysis</keyword><keyword>vul-</keyword></keywords><urls><pdf-urls><url>internal-pdf://8756a4cf02c7ebe248f2be7360824952bcff.pdf</url></pdf-urls></urls></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Rasthofer, Siegfried</author><author>Arzt, Steven</author><author>Miltenberger, Marc</author><author>Bodden, Eric</author></authors></contributors><titles><title>Reverse engineering Android apps with CodeInspect</title><secondary-title>CEUR Workshop Proceedings</secondary-title></titles><periodical><full-title>CEUR Workshop Proceedings</full-title></periodical><pages>1-8</pages><volume>1575</volume><keywords/><dates><year>2016</year></dates><urls><pdf-urls><url>internal-pdf://3740c3d9c2d05e99eddef2569d5b50e298fb.pdf</url></pdf-urls></urls></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Narudin, Fairuz Amalina</author><author>Feizollah, Ali</author><author>Anuar, Nor Badrul</author><author>Gani, Abdullah</author></authors></contributors><titles><title>Evaluation of machine learning classifiers for mobile malware detection</title><secondary-title>Soft Computing</secondary-title></titles><periodical><full-title>Soft Computing</full-title></periodical><pages>343-357</pages><volume>20</volume><issue>1</issue><keywords><keyword>Android malware detection</keyword><keyword>Anomaly based</keyword><keyword>Intrusion detection system</keyword><keyword>Machine learning</keyword><keyword>Mobile device</keyword></keywords><dates><year>2016</year></dates><isbn>1432-7643</isbn><electronic-resource-num>10.1007/s00500-014-1511-6</electronic-resource-num><urls><pdf-urls><url>internal-pdf://5797d922678f0f03a8bbad96b0d7482d8c02.pdf</url></pdf-urls></urls><abstract>Mobile devices have become a significant part of people’s lives, leading to an increasing number of users involved with such technology. The rising number of users invites hackers to generate malicious applications. Besides, the security of sensitive data available on mobile devices is taken lightly. Relying on currently developed approaches is not sufficient, given that intelligent malware keeps modifying rapidly and as a result becomes more difficult to detect. In this paper, we propose an alternative solution to evaluating malware detection using the anomaly-based approach with machine learning classifiers. Among the various network traffic features, the four categories selected are basic information, content based, time based and connection based. The evaluation utilizes two datasets: public (i.e. MalGenome) and private (i.e. self-collected). Based on the evaluation results, both the Bayes network and random forest classifiers produced more accurate readings, with a 99.97 % true-positive rate (TPR) as opposed to the multi-layer perceptron with only 93.03 % on the MalGenome dataset. However, this experiment revealed that the k-nearest neighbor classifier efficiently detected the latest Android malware with an 84.57 % true-positive rate higher than other classifiers.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Afonso, Vitor Monte</author><author>de Amorim, Matheus Favero</author><author>Grégio, André Ricardo Abed</author><author>Junquera, Glauco Barroso</author><author>de Geus, Paulo Lício</author></authors></contributors><titles><title>Identifying Android malware using dynamically obtained features</title><secondary-title>Journal of Computer Virology and Hacking Techniques</secondary-title></titles><periodical><full-title>Journal of Computer Virology and Hacking Techniques</full-title></periodical><pages>9-17</pages><volume>11</volume><issue>1</issue><keywords/><dates><year>2015</year></dates><electronic-resource-num>10.1007/s11416-014-0226-7</electronic-resource-num><urls><pdf-urls><url>internal-pdf://5462a0e53902a6cf4a942aec7f81ac2e4e43.pdf</url></pdf-urls></urls><abstract>The constant evolution of mobile devices' resour-ces and features turned ordinary phones into powerful and portable computers, leading their users to perform payments, store sensitive information and even to access other accounts on remote machines. This scenario has contributed to the rapid rise of new malware samples targeting mobile plat-forms. Given that Android is the most widespread mobile operating system and that it provides more options regard-ing application markets (official and alternative stores), it has been the main target for mobile malware. As such, markets that publish Android applications have been used as a point of infection for many users, who unknowingly download some popular applications that are in fact disguised malware. Hence, there is an urge for techniques to analyze and identify malicious applications before they are published and able to harm users. In this article, we present a system to dynami-cally identify whether an Android application is malicious or not, based on machine learning and features extracted from Android API calls and system call traces. We evaluated our system with 7,520 apps, 3,780 for training and 3,740 for test-ing, and obtained a detection rate of 96.66 %.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Fernandes, Earlence</author><author>Chen, Qi Alfred</author><author>Paupore, Justin</author><author>Essl, Georg</author><author>Halderman, J. Alex</author><author>Mao, Z. Morley</author><author>Prakash, Atul</author></authors></contributors><titles><title>Android UI deception revisited: Attacks and defenses</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>41-59</pages><volume>9603 LNCS</volume><keywords/><dates><year>2017</year></dates><isbn>9783662549698</isbn><electronic-resource-num>10.1007/978-3-662-54970-4_3</electronic-resource-num><urls><pdf-urls><url>internal-pdf://dafcc2a0fbfffef599f9d9bc3e8cf7a143d7.pdf</url></pdf-urls></urls><abstract>{©} International Financial Cryptography Association 2017.App-based deception attacks are increasingly a problem on mobile devices and they are used to steal passwords, credit card numbers, text messages, etc. Current versions of Android are susceptible to these attacks. Recently, Bianchi et al. proposed a novel solution “What the App is That” that included a host-based system to identify apps to users via a security indicator and help assure them that their input goes to the identified apps [7]. Unfortunately, we found that the solution has a significant side channel vulnerability as well as susceptibility to clickjacking that allow non-privileged malware to completely compromise the defenses, and successfully steal passwords or other keyboard input. We discuss the vulnerabilities found, propose possible defenses, and then evaluate the defenses against different types of UI deception attacks.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Deo, Amit</author><author>Holloway, Royal</author><author>Suarez-Tangil, Guillermo</author><author>Cavallaro, Lorenzo</author></authors></contributors><titles><title>Prescience: Probabilistic Guidance on the Retraining Conundrum for Malware Detection Santanu Kumar Dash</title><secondary-title>Proceedings of the 2016 ACM Workshop on Artificial Intelligence and Security</secondary-title></titles><periodical><full-title>Proceedings of the 2016 ACM Workshop on Artificial Intelligence and Security</full-title></periodical><pages>71-82</pages><keywords><keyword>@BULLETComputing methodologies → Machine learning</keyword><keyword>Keywords Concept drift</keyword><keyword>Mobile platform secu-rity</keyword><keyword>malware detection</keyword><keyword>probabilistic prediction</keyword></keywords><dates><year>2016</year></dates><isbn>9781450345736</isbn><electronic-resource-num>10.1145/2996758.2996769</electronic-resource-num><urls><pdf-urls><url>internal-pdf://d48c0aa25b5f7c92a6327fe61a3b6a3f4273.pdf</url></pdf-urls><web-urls><url>https://pure.royalholloway.ac.uk/portal/files/27083979/aisec36_deoA.pdf</url></web-urls></urls><abstract>Malware evolves perpetually and relies on increasingly so-phisticated attacks to supersede defense strategies. Data-driven approaches to malware detection run the risk of be-coming rapidly antiquated. Keeping pace with malware requires models that are periodically enriched with fresh knowledge, commonly known as retraining. In this work, we propose the use of Venn-Abers predictors for assessing the quality of binary classification tasks as a first step to-wards identifying antiquated models. One of the key bene-fits behind the use of Venn-Abers predictors is that they are automatically well calibrated and offer probabilistic guid-ance on the identification of nonstationary populations of malware. Our framework is agnostic to the underlying clas-sification algorithm and can then be used for building better retraining strategies in the presence of concept drift. Results obtained over a timeline-based evaluation with about 90K samples show that our framework can identify when models tend to become obsolete.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Rahman, Mahmudur</author><author>Rahman, Mizanur</author><author>Carbunar, Bogdan</author><author>Chau, Duen Horng</author></authors></contributors><titles><title>Search Rank Fraud and Malware Detection in Google Play</title><secondary-title>IEEE Transactions on Knowledge and Data Engineering</secondary-title></titles><periodical><full-title>IEEE Transactions on Knowledge and Data Engineering</full-title></periodical><pages>1329-1342</pages><volume>29</volume><issue>6</issue><keywords><keyword>Android market</keyword><keyword>malware detection</keyword><keyword>search rank fraud</keyword></keywords><dates><year>2017</year></dates><isbn>9781510828117</isbn><electronic-resource-num>10.1109/TKDE.2017.2667658</electronic-resource-num><urls><pdf-urls><url>internal-pdf://95305165302dcb62edee9d7cd01be19a5e62.pdf</url></pdf-urls></urls><abstract>Fraudulent behaviors in Google Android app market fuel search rank abuse and malware proliferation. We present FairPlay, a novel system that uncovers both malware and search rank fraud apps, by picking out trails that fraudsters leave behind. To identify suspicious apps, FairPlay PCF algorithm correlates review activities and uniquely combines detected review relations with linguistic and behavioral signals gleaned from longitudinal Google Play app data. We contribute a new longitudinal app dataset to the community, which consists of over 87K apps, 2.9M reviews, and 2.4M reviewers, collected over half a year. FairPlay achieves over 95% accuracy in classifying gold standard datasets of malware, fraudulent and legitimate apps. We show that 75% of the identified malware apps engage in search rank fraud. FairPlay discovers hundreds of fraudulent apps that currently evade Google Bouncer detection technology, and reveals a new type of attack campaign, where users are harassed into writing positive reviews, and install and review other apps.</abstract></record><record><database name="My Collection_201to 300.enl" path="My Collection_201to 300.enl">My Collection_201to 300.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhang, Hao</author><author>Yao, Danfeng (Daphne)</author><author>Ramakrishnan, Naren</author></authors></contributors><titles><title>Causality-based Sensemaking of Network Traffic for Android Application Security</title><secondary-title>Proceedings of the 2016 ACM Workshop on Artificial Intelligence and Security - ALSec '16</secondary-title></titles><periodical><full-title>Proceedings of the 2016 ACM Workshop on Artificial Intelligence and Security - ALSec '16</full-title></periodical><pages>47-58</pages><keywords/><dates><year>2016</year></dates><isbn>9781450345736</isbn><electronic-resource-num>10.1145/2996758.2996760</electronic-resource-num><urls><pdf-urls><url>internal-pdf://d3a32de0efe29c09a47f41285eb9aade94b6.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2996758.2996760</url></web-urls></urls><abstract>Malicious Android applications pose serious threats to mo-bile security. They threaten the data confidentiality and sys-tem integrity on Android devices. Monitoring runtime activ-ities serves as an important technique for analyzing dynamic app behaviors. We design a triggering relation model for dy-namically analyzing network traffic on Android devices. Our model enables one to infer the dependency of outbound net-work requests from the device. We describe a new machine learning approach for discovering the dependency of network requests. These request-level dependence relations are used to detect stealthy malware activities. Malicious requests are identified due to the lack of dependency with legitimate trig-gers. Our prototype is evaluated on 14GB network traffic data and system logs collected from an Android tablet. Ex-perimental results show that our solution achieves a high accuracy (99.1%) in detecting malicious requests sent from new malicious apps.</abstract></record></records></xml>
