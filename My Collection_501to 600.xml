<?xml version="1.0" encoding="UTF-8"?><xml><records><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhang, Xiao</author><author>Ahlawat, Amit</author><author>Du, Wenliang</author></authors></contributors><titles><title>AFrame: isolating advertisements from mobile applications in Android</title><secondary-title>Proceedings of the 29th Annual Computer Security Applications Conference on - ACSAC '13</secondary-title></titles><periodical><full-title>Proceedings of the 29th Annual Computer Security Applications Conference on - ACSAC '13</full-title></periodical><pages>9-18</pages><keywords/><dates><year>2013</year></dates><isbn>9781450320153</isbn><electronic-resource-num>10.1145/2523649.2523652</electronic-resource-num><urls><pdf-urls><url>internal-pdf://acb4fc84922937aa79ceb926eeff9cc7f5a6.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2523652%5Cnhttp://dl.acm.org/citation.cfm?doid=2523649.2523652</url></web-urls></urls><abstract>Android uses a permission-based security model to restrict applications from accessing private data and privileged resources. However, the permissions are assigned at the application level, so even untrusted third-party libraries, such as advertisement, once incorporated, can share the same privileges as the entire application, leading to over-privileged problems. We present AFrame, a developer friendly method to isolate untrusted third-party code from the host applications. The isolation achieved by AFrame covers not only the process/permission isolation, but also the display and input isolation. Our AFrame framework is implemented through a minimal change to the existing Android code base; our eval- uation results demonstrate that it is effective in isolating the privileges of untrusted third-party code from applications with reasonable performance overhead.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Hu, Wenhui</author><author>Octeau, Damien</author><author>McDaniel, Patrick Drew</author><author>Liu, Peng</author></authors></contributors><titles><title>Duet: Library Integrity Verification for Android Applications</title><secondary-title>Proceedings of the 2014 ACM conference on Security and privacy in wireless &amp; mobile networks - WiSec '14</secondary-title></titles><periodical><full-title>Proceedings of the 2014 ACM conference on Security and privacy in wireless &amp; mobile networks - WiSec '14</full-title></periodical><pages>141-152</pages><keywords><keyword>android</keyword><keyword>library integrity verification</keyword><keyword>library-centric security threat</keyword><keyword>smartphone</keyword><keyword>third-party library</keyword></keywords><dates><year>2014</year></dates><isbn>9781450329729</isbn><electronic-resource-num>10.1145/2627393.2627404</electronic-resource-num><urls><pdf-urls><url>internal-pdf://a850732a1d948df5412b0be6d4189f9d8867 (1).pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2627393.2627404</url></web-urls></urls></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Blackshear, Sam</author><author>Gendreau, Alexandra</author><author>Chang, Bor-yuh Evan</author></authors></contributors><titles><title>Droidel: A General Approach to Android Framework Modeling</title><secondary-title>ACM SIGPLAN Workshop on State of the Art in Program Analysis (SOAP)</secondary-title></titles><periodical><full-title>ACM SIGPLAN Workshop on State of the Art in Program Analysis (SOAP)</full-title></periodical><pages>5</pages><keywords><keyword>Android</keyword><keyword>framework modeling</keyword><keyword>reflection</keyword><keyword>soundness</keyword><keyword>static analysis</keyword></keywords><dates><year>2015</year></dates><isbn>9781450335850</isbn><electronic-resource-num>10.1145/2771284.2771288</electronic-resource-num><urls><pdf-urls><url>internal-pdf://b17a8de187528529990e43f14280d420002f.pdf</url></pdf-urls><web-urls><url>http://www.cs.colorado.edu/~bec/papers/droidel-soap15.html</url></web-urls></urls><abstract>We present an approach and tool for general-purpose modeling of Android for static analysis. Our approach is to explicate the reflective bridge between the Android framework and an application to make the framework source amenable to static analysis. Our DROIDEL tool does this by automatically generating application-specific stubs that summarize the reflective behavior for a particular app. The result is a program with a single entry-point that can be processed by any existing Java analysis platform (e.g., Soot,WALA, Chord). We compared call graphs constructed using DROIDEL to call graphs constructed using a state-of-the-art Android model and found that DROIDEL captures more concrete behaviors.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Buhov, Damjan</author><author>Huber, Markus</author><author>Merzdovnik, Georg</author><author>Weippl, Edgar</author></authors></contributors><titles><title>Pin it! Improving Android network security at runtime</title><secondary-title>2016 IFIP Networking Conference (IFIP Networking) and Workshops, IFIP Networking 2016</secondary-title></titles><periodical><full-title>2016 IFIP Networking Conference (IFIP Networking) and Workshops, IFIP Networking 2016</full-title></periodical><pages>297-305</pages><keywords/><dates><year>2016</year></dates><isbn>9783901882838</isbn><electronic-resource-num>10.1109/IFIPNetworking.2016.7497238</electronic-resource-num><urls><pdf-urls><url>internal-pdf://b46eda6255e268bd4ce4c2b2e956c7f6a0fe.pdf</url></pdf-urls></urls><abstract>Smartphones are increasingly used worldwide and are now an essential tool for our everyday tasks. These tasks are supported by smartphone applications (apps) which commonly rely on network communication to provide a certain utility such as online banking. From a security and privacy point of view a properly secured (encrypted) communication channel is important in order to protect sensitive information against passive and active attacks. Previous research outlined that developers often fail to implement proper certificate validation in their custom SSL/TLS implementations and thus fail to secure the network communication. Previous research however proposed solutions for developers and not for the affected users. This global growth introduced drastic changes to the network utilization. In this paper we discuss this issue on the basis of Android apps. We analyzed over 50,000 Android apps, collected during two consecutive years, regarding the correct use of SSL/TLS protocols. Furthermore, we discuss the current situation. We propose dynamic certificate pinning, a device-based solution that overcomes the problem of broken SSL/TLS implementations in Android apps. To the best of our knowledge, we are the first to solve this problem by combining established techniques such as certificate pinning with dynamic instrumentation techniques to tackle one of the major security challenges in the network communication of smartphone applications.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Lin, Chia-chi</author><author>Li, Hongyang</author><author>Zhou, Xiaoyong</author><author>Wang, Xiaofeng</author></authors></contributors><titles><title>Screenmilker: How to Milk Your Android Screen for Secrets</title><secondary-title>Symposium on Network and Distributed System Security (NDSS)</secondary-title></titles><periodical><full-title>Symposium on Network and Distributed System Security (NDSS)</full-title></periodical><pages>23-26</pages><issue>February</issue><keywords/><dates><year>2014</year></dates><isbn>1891562355</isbn><urls><pdf-urls><url>internal-pdf://b15de6211d2831c8a78306b89e6ed9227fd7 (1).pdf</url></pdf-urls><web-urls><url>http://www.internetsociety.org/doc/screenmilker-how-milk-your-android-screen-secrets%5Cnpapers3://publication/uuid/86978FD8-3404-486B-890F-AC4F6566E314</url></web-urls></urls><abstract>Name-Screenmilker. They found that many apps on the store that say &quot;we can do screenshots&quot; were asking the user to install a component through ADB in an unsafe way. This leads to an unprivileged app able to take screenshots. They show how they can steal passwords.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>You, Wei</author><author>Liang, Bin</author><author>Li, Jingzhe</author><author>Shi, Wenchang</author><author>Zhang, Xiangyu</author></authors></contributors><titles><title>Android Implicit Information Flow Demystified</title><secondary-title>Asia Ccs</secondary-title></titles><periodical><full-title>Asia Ccs</full-title></periodical><pages>585-590</pages><keywords><keyword>android</keyword><keyword>exploitation</keyword><keyword>implicit information flow</keyword><keyword>mitigation</keyword></keywords><dates><year>2015</year></dates><isbn>978-1-4503-3245-3</isbn><electronic-resource-num>10.1145/2714576.2714604</electronic-resource-num><urls><pdf-urls><url>internal-pdf://b24e93565e6c7713ed2bc6e77924a51535ef.pdf</url></pdf-urls><web-urls><url>http://doi.acm.org/10.1145/2714576.2714604</url></web-urls></urls><abstract>In this paper, a comprehensive analysis of implicit infor-mation flow (IIF) on the Android bytecode is presented to identify all potential IIF forms, determine their exploitabil-ity, and mitigate the potential threat. By applying control-transfer-oriented semantic analysis of the bytecode language, we identify five IIF forms, some of which are not studied by existing IIF literature. We develop proof-of-concepts (PoCs) for each IIF form to demonstrate their exploitability. The experimental results show that all these PoCs can effectively and efficiently transmit sensitive data, as well as successful-ly evade the detection of a state-of-the-art privacy monitor TaintDroid. To mitigate the threat of IIF, we propose a so-lution to defending against IIF leveraging a special control dependence tracking technique and implement a prototype system. The evaluation shows that the prototype can effec-tively detect information leak by all the identified IIF forms and also real-world malware with an acceptable overhead. In summary, our study gives in-depth insight into Android IIF from both offensive and defensive perspectives, and provides a foundation for further research on Android IIF.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Pereira, André</author><author>Correia, Manuel</author><author>Brandão, Pedro</author></authors></contributors><titles><title>USB connection vulnerabilities on android smartphones: Default and vendors' customizations</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>19-32</pages><volume>8735 LNCS</volume><keywords><keyword>Android</keyword><keyword>Security</keyword><keyword>USB vulnerability</keyword><keyword>privileges escalation</keyword><keyword>vendor vulnerabilities</keyword></keywords><dates><year>2014</year></dates><isbn>9783662448847</isbn><electronic-resource-num>10.1007/978-3-662-44885-4_2</electronic-resource-num><urls><pdf-urls><url>internal-pdf://b67d3d2ecf209c0bd7cd5cfe0dd5a8f971fb.pdf</url></pdf-urls></urls><abstract>We expose an USB vulnerability in some vendors' customization of the android system, where the serial AT commands processed by the cellular modem are extended to allow other functionalities. We target that vulnerability for the specific vendor system and present a proof of concept of the attack in a realistic scenario environment. For this we use an apparently inoffensive smartphone charging station like the one that is now common at public places like airports. We unveil the implications of such vulnerability that culminate in flashing a compromised boot partition, root access, enable adb and install a sur-veillance application that is impossible to uninstall without re-flashing the an-droid boot partition. All these attacks are done without user consent or knowledge on the attacked mobile phone.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Yuan, Zhenlong</author><author>Lu, Yongqiang</author><author>Wang, Zhaoguo</author><author>Xue, Yibo</author></authors></contributors><titles><title>Droid-Sec : Deep Learning in Android Malware Detection</title><secondary-title>Sigcomm 2014</secondary-title></titles><periodical><full-title>Sigcomm 2014</full-title></periodical><pages>371-372</pages><keywords><keyword>a gen-</keyword><keyword>android malware</keyword><keyword>as it presents the</keyword><keyword>deep learning</keyword><keyword>detection</keyword><keyword>fashion and requires too</keyword><keyword>in a</keyword><keyword>much technical knowledge for</keyword><keyword>permissions of an app</keyword><keyword>stand-alone</keyword></keywords><dates><year>2014</year></dates><isbn>9781450328364</isbn><electronic-resource-num>10.1145/2619239.2631434</electronic-resource-num><urls><pdf-urls><url>internal-pdf://b41ef5371bed73214bb67a0e12829f0df220.pdf</url></pdf-urls></urls><abstract>As smartphones and mobile devices are rapidly becoming indispensable for many network users, mobile malware has become a serious threat in the network security and pri-vacy. Especially on the popular Android platform, many malicious apps are hiding in a large number of normal apps, which makes the malware detection more challenging. In this paper, we propose a ML-based method that utilizes more than 200 features extracted from both static analy-sis and dynamic analysis of Android app for malware de-tection. The comparison of modeling results demonstrates that the deep learning technique is especially suitable for Android malware detection and can achieve a high level of 96% accuracy with real-world Android application sets.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Li, Li</author><author>Bissyandé, Tegawendé F.</author><author>Klein, Jacques</author><author>Traon, Yves Le</author></authors></contributors><titles><title>An Investigation into the Use of Common Libraries in Android Apps</title></titles><periodical/><keywords/><dates><year>2015</year></dates><isbn>9781509018550</isbn><electronic-resource-num>10.1109/SANER.2016.52</electronic-resource-num><urls><pdf-urls><url>internal-pdf://b0d4d4d306cef89fcc02fe1e7da980502f24.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1511.06554</url></web-urls></urls><abstract>The packaging model of Android apps requires the entire code necessary for the execution of an app to be shipped into one single apk file. Thus, an analysis of Android apps often visits code which is not part of the functionality delivered by the app. Such code is often contributed by the common libraries which are used pervasively by all apps. Unfortunately, Android analyses, e.g., for piggybacking detection and malware detection, can produce inaccurate results if they do not take into account the case of library code, which constitute noise in app features. Despite some efforts on investigating Android libraries, the momentum of Android research has not yet produced a complete set of common libraries to further support in-depth analysis of Android apps. In this paper, we leverage a dataset of about 1.5 million apps from Google Play to harvest potential common libraries, including advertisement libraries. With several steps of refinements, we finally collect by far the largest set of 1,113 libraries supporting common functionalities and 240 libraries for advertisement. We use the dataset to investigates several aspects of Android libraries, including their popularity and their proportion in Android app code. Based on these datasets, we have further performed several empirical investigations to confirm the motivations behind our work.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Shao, Yuru</author><author>Ott, Jason</author><author>Jia, Yunhan Jack</author><author>Qian, Zhiyun</author><author>Mao, Z. Morley</author></authors></contributors><titles><title>The Misuse of Android Unix Domain Sockets and Security Implications</title><secondary-title>Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security - CCS'16</secondary-title></titles><periodical><full-title>Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security - CCS'16</full-title></periodical><pages>80-91</pages><keywords/><dates><year>2016</year></dates><isbn>9781450341394</isbn><electronic-resource-num>10.1145/2976749.2978297</electronic-resource-num><urls><pdf-urls><url>internal-pdf://b12f6d4ed17f1a93bf7c6e9b78c9117d1e76.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2976749.2978297</url></web-urls></urls><abstract>In this work, we conduct the first systematic study in understanding the security properties of the usage of Unix domain sockets by both Android apps and system daemons as an IPC (Inter-process Communication) mechanism, especially for cross-layer communications between the Java and native layers. We propose a tool called SInspector to ex- pose potential security vulnerabilities in using Unix domain sockets through the process of identifying socket addresses, detecting authentication checks, and performing data flow analysis. Our in-depth analysis revealed some serious vulnerabilities in popular apps and system daemons, such as root privilege escalation and arbitrary file access. Based on our findings, we propose countermeasures and improved practices for utilizing Unix domain sockets on Android.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Octeau, Damien</author><author>Luchaup, Daniel</author><author>Jha, Somesh</author><author>McDaniel, Patrick</author></authors></contributors><titles><title>Composite Constant Propagation and its Application to Android Program Analysis</title><secondary-title>IEEE Transactions on Software Engineering</secondary-title></titles><periodical><full-title>IEEE Transactions on Software Engineering</full-title></periodical><pages>999-1014</pages><volume>42</volume><issue>11</issue><keywords><keyword>Android application analysis</keyword><keyword>Composite constant</keyword><keyword>ICC</keyword><keyword>constant propagation</keyword><keyword>inter-component communication</keyword></keywords><dates><year>2016</year></dates><isbn>9781479919345</isbn><electronic-resource-num>10.1109/TSE.2016.2550446</electronic-resource-num><urls><pdf-urls><url>internal-pdf://ba0216308e34634a224f79aba38dd4f8fe72.pdf</url></pdf-urls></urls><abstract>Many program analyses require statically inferring the possible values of composite types. However, current approaches either do not account for correlations between object fields or do so in an ad hoc manner. In this paper, we introduce the problem of composite constant propagation. We develop the first generic solver that infers all possible values of complex objects in an interprocedural, flow and context-sensitive manner, taking field correlations into account. Composite constant propagation problems are specified using COAL, a declarative language. We apply our COAL solver to the problem of inferring Android Inter-Component Communication (ICC) values, which is required to understand how the components of Android applications interact. Using COAL, we model ICC objects in Android more thoroughly than the state-of-the-art. We compute ICC values for 460 applications from the Play store. The ICC values we infer are substantially more precise than previous work. The analysis is efficient, taking slightly over two minutes per application on average. While this work can be used as the basis for many whole-program analyses of Android applications, the COAL solver can also be used to infer the values of composite objects in many other contexts.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wei, Xuetao</author><author>Wolf, Michael</author><author>Guo, Lei</author><author>Lee, Kyu Hyung</author><author>Huang, Ming-chun</author><author>Niu, Nan</author></authors></contributors><titles><title>emphaSSL : Towards Emphasis as a Mechanism to Harden Android HTTPS Development</title></titles><periodical/><keywords/><urls><pdf-urls><url>internal-pdf://b70e65d9dd1865c55008fff2e8e920ba883c.pdf</url></pdf-urls></urls></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Rahman, Mahmuda</author></authors></contributors><titles><title>DroidMLN: A Markov Logic Network Approach to Detect Android Malware</title><secondary-title>Proceedings of the International Conference on Machine Learning and Applications</secondary-title></titles><periodical><full-title>Proceedings of the International Conference on Machine Learning and Applications</full-title></periodical><pages>2-5</pages><keywords><keyword>android</keyword><keyword>api</keyword><keyword>malware</keyword><keyword>markov logic network</keyword></keywords><dates><year>2013</year></dates><isbn>9780769551449</isbn><electronic-resource-num>10.1109/ICMLA.2013.184</electronic-resource-num><urls><pdf-urls><url>internal-pdf://b4415f8597e4ffb06c98f03ecc8b9cd359a6.pdf</url></pdf-urls></urls></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Gu, Jie</author><author>Xu, Yunjie</author><author>Xu, Heng</author><author>Ling, Hong</author></authors></contributors><titles><title>Interaction effects of contextual cues on privacy concerns: The case of android applications</title><secondary-title>Proceedings of the Annual Hawaii International Conference on System Sciences</secondary-title></titles><periodical><full-title>Proceedings of the Annual Hawaii International Conference on System Sciences</full-title></periodical><pages>3498-3507</pages><volume>2015-March</volume><issue>March 2013</issue><keywords/><dates><year>2015</year></dates><isbn>9781479973675</isbn><electronic-resource-num>10.1109/HICSS.2015.421</electronic-resource-num><urls><pdf-urls><url>internal-pdf://b15056d1276b99418369bacb603a7325468d (1).pdf</url></pdf-urls></urls><abstract>The prevalence of mobile applications poses a new challenge in privacy protection. To address privacy concerns, prior studies have identified the direct effects of contextual cues but few have revealed their interaction effects. In reality, contextual cues do not appear in isolation; existence of multiple contextual cues introduces an extra complexity in a user’s privacy decision-making. This study aims to address the research question of how contextual cues interactively shape privacy concerns. This study focuses on the Android application downloading context. Three contextual cues (i.e., app popularity, permission sensitivity, permission explanation) are identified. Our experimental study postulates both the direct effect and interaction effects of contextual cues on privacy concerns. This study contributes to literature with a better understanding of the combinatory effects of multiple contextual cues.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Batyuk, Leonid</author><author>Herpich, Markus</author><author>Camtepe, Seyit Ahmet</author><author>Raddatz, Karsten</author><author>Schmidt, Aubrey-Derrick</author><author>Albayrak, Sahin</author></authors></contributors><titles><title>Using static analysis for automatic assessment and mitigation of unwanted and malicious activities within Android applications</title><secondary-title>2011 6th International Conference on Malicious and Unwanted Software</secondary-title></titles><periodical><full-title>2011 6th International Conference on Malicious and Unwanted Software</full-title></periodical><pages>66-72</pages><keywords><keyword>Android Market application</keyword><keyword>Androids</keyword><keyword>Detectors</keyword><keyword>Humanoid robots</keyword><keyword>Privacy</keyword><keyword>Security</keyword><keyword>Smart phones</keyword><keyword>Software</keyword><keyword>application security</keyword><keyword>binary application package refactoring</keyword><keyword>coarse-grained permission</keyword><keyword>data privacy</keyword><keyword>digital signature</keyword><keyword>digital signatures</keyword><keyword>mobile computing</keyword><keyword>operating systems (computers)</keyword><keyword>privacy threat mitigation</keyword><keyword>reverse-engineering package</keyword><keyword>security threat mitigation</keyword><keyword>smart phone</keyword><keyword>software maintenance</keyword><keyword>static analysis</keyword><keyword>user interfaces</keyword><keyword>user security preference</keyword></keywords><dates><year>2011</year></dates><isbn>978-1-4673-0034-6</isbn><electronic-resource-num>10.1109/MALWARE.2011.6112328</electronic-resource-num><urls><pdf-urls><url>internal-pdf://batyuk2011.pdf</url></pdf-urls><web-urls><url>http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=6112328%5Cnhttp://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6112328</url></web-urls></urls><abstract>In the last decade, smartphones have gained widespread usage. Since the advent of online application stores, hundreds of thousands of applications have become instantly available to millions of smart-phone users. Within the Android ecosystem, application security is governed by digital signatures and a list of coarse-grained permissions. However, this mechanism is not fine-grained enough to provide the user with a sufficient means of control of the applications' activities. Abuse of highly sensible private information such as phone numbers without users' notice is the result. We show that there is a high frequency of privacy leaks even among widely popular applications. Together with the fact that the majority of the users are not proficient in computer security, this presents a challenge to the engineers developing security solutions for the platform. Our contribution is twofold: first, we propose a service which is able to assess Android Market applications via static analysis and provide detailed, but readable reports to the user. Second, we describe a means to mitigate security and privacy threats by automated reverse-engineering and refactoring binary application packages according to the users' security preferences.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Barros, Paulo</author><author>Just, René</author><author>Millstein, Suzanne</author><author>Vines, Paul</author><author>Dietl, Werner</author><author>D'amorim, Marcelo</author><author>Ernst, Michael D.</author></authors></contributors><titles><title>Static analysis of implicit control flow: Resolving Java reflection and android intents</title><secondary-title>Proceedings - 2015 30th IEEE/ACM International Conference on Automated Software Engineering, ASE 2015</secondary-title></titles><periodical><full-title>Proceedings - 2015 30th IEEE/ACM International Conference on Automated Software Engineering, ASE 2015</full-title></periodical><pages>669-679</pages><keywords><keyword>Android</keyword><keyword>Implicit Control Flow</keyword><keyword>Static Analysis</keyword><keyword>Type systems</keyword></keywords><dates><year>2016</year></dates><isbn>9781509000241</isbn><electronic-resource-num>10.1109/ASE.2015.69</electronic-resource-num><urls><pdf-urls><url>internal-pdf://b5524fbd94ce2c566629d3cd693bf636cab0.pdf</url></pdf-urls></urls><abstract>Implicit or indirect control flow is a transfer of control between procedures using some mechanism other than an explicit procedure call. Implicit control flow is a staple design pattern that adds flexibility to system design. However, it is challenging for a static analysis to compute or verify properties about a system that uses implicit control flow. This paper presents static analyses for two types of implicit control flow that frequently appear in Android apps: Java reflection and Android intents. Our analyses help to resolve where control flows and what data is passed. This information improves the precision of downstream analyses, which no longer need to make conservative assumptions about implicit control flow. We have implemented our techniques for Java. We enhanced an existing security analysis with a more precise treatment of reflection and intents. In a case study involving ten real-world Android apps that use both intents and reflection, the precision of the security analysis was increased on average by two orders of magnitude. The precision of two other downstream analyses was also improved.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Ali-gombe, Aisha</author><author>Iii, Golden G Richard</author><author>Ahmed, Irfan</author><author>Roussev, Vassil</author></authors></contributors><titles><title>Don ’ t Touch that Column : Portable , Fine-Grained Access Control for Android ’ s Native Content Providers</title><secondary-title>Proceedings of the 9th ACM Conference on Security and Privacy in Wireless and Mobile Networks</secondary-title></titles><periodical><full-title>Proceedings of the 9th ACM Conference on Security and Privacy in Wireless and Mobile Networks</full-title></periodical><pages>79-90</pages><keywords/><dates><year>2016</year></dates><isbn>9781450342704</isbn><electronic-resource-num>10.1145/2939918.2939927</electronic-resource-num><urls><pdf-urls><url>internal-pdf://b8400e78a1ab7a07a78e586bc165fcbc66b6.pdf</url></pdf-urls></urls><abstract>© 2016 ACM.Android applications access native SQLite databases through their Universal Resource Identifiers (URIs), exposed by the Content provider library. By design, the SQLite engine used in the Android system does not enforce access restrictions on database content nor does it log database accesses. In-stead, Android enforces read and write permissions on the native providers through which databases are accessed via the mandatory applications permissions system. This system is very coarse grained, however, and can allow applications far greater access to sensitive data than a user might intend. In this paper, we present a novel technique called priVy that merges static bytecode weaving and database query re-writing to achieve low-level access control for Android native providers at the application level. priVy defines access control for both database schema and entities and does not require any modifications to the underlying operating system and/or framework code. Instead, it provides a new Controller stub which is statically woven into the target application and a Controller interface for setting access levels, thus making it accessible and easily adoptable by average users. We provide an evaluation in terms of the resilience of applications to instrumentation as well as static and runtime instrumentation overhead. In our testing, priVy incurs an average of 1032 additional method calls or joinpoints created and it takes an average of 15 seconds to recompile an app and imposes virtually no runtime overhead.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wolfe, Britton</author><author>Elish, Karim O</author><author>Yao, Danfeng Daphne</author></authors></contributors><titles><title>Comprehensive behavior profiling for proactive Android malware detection</title><secondary-title>Information Security</secondary-title></titles><periodical><full-title>Information Security</full-title></periodical><pages>328-344</pages><keywords><keyword>android</keyword><keyword>machine learning</keyword><keyword>malware</keyword><keyword>mobile security</keyword></keywords><dates><year>2014</year></dates><isbn>9783319132563</isbn><electronic-resource-num>10.1007/978-3-319-13257-0_19</electronic-resource-num><urls><pdf-urls><url>internal-pdf://b319a0afb0214297ccff4b852f6b018ec79a.pdf</url></pdf-urls></urls><abstract>We present a new method of screening for malicious Android applications that uses two types of information about the application: the permissions that the application requests in its installation manifest and a metric called percentage of valid call sites (PVCS). PVCS measures the riskiness of the application based on a data flow graph. The information is used with machine learning algorithms to classify previously unseen applications as malicious or benign with a high degree of accuracy. Our classifier outperforms the previous state of the art by a significant margin, with particularly low false positive rates. Furthermore, the classifier evaluation is performed on malware families that were not used in the training phase, simulating the accuracy of the classifier on malware yet to be developed. We found that our PVCS metric and the SEND_SMS permission are the specific pieces of information that are most useful to the classifier.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Stirparo, Pasquale</author><author>Fovino, Igor Nai</author><author>Kounelis, Ioannis</author></authors></contributors><titles><title>Data-in-use leakages from Android memory---Test and analysis</title><secondary-title>Wireless and Mobile Computing, Networking and Communications (WiMob), 2013 IEEE 9th International Conference on</secondary-title></titles><periodical><full-title>Wireless and Mobile Computing, Networking and Communications (WiMob), 2013 IEEE 9th International Conference on</full-title></periodical><pages>701-708</pages><keywords><keyword>memory analysis</keyword><keyword>mobile privacy</keyword><keyword>mobileak</keyword><keyword>security</keyword></keywords><dates><year>2013</year></dates><isbn>9781479904280</isbn><urls><pdf-urls><url>internal-pdf://c4de30a54f9a9ffd63dface4d8ffe2b0ea54.pdf</url></pdf-urls></urls></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Arnatovich, Yauhen Leanidavich</author><author>Tan, Hee Kuan</author><author>Shar, Lwin Khin</author></authors></contributors><titles><title>Empirical Comparison of Intermediate Representations for Android Applications</title><secondary-title>SEKE '14 (26th International Conference on Software Engineering and Knowledge Engineering)</secondary-title></titles><periodical><full-title>SEKE '14 (26th International Conference on Software Engineering and Knowledge Engineering)</full-title></periodical><pages>205-210</pages><keywords><keyword>-intermediate representation</keyword><keyword>android computing</keyword><keyword>event-based testing</keyword><keyword>jasmin</keyword><keyword>program behaviors</keyword><keyword>smali</keyword></keywords><dates><year>2014</year></dates><urls><pdf-urls><url>internal-pdf://be19c6d5275d218c16920b1c572a4b6cb32c (1).pdf</url></pdf-urls></urls></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Shaerpour, Kaveh</author><author>Dehghantanha, Ali</author><author>Mahmod, Ramlan</author></authors></contributors><titles><title>Trends in Android Malware Detection.</title><secondary-title>Journal of Digital Forensics, Security &amp; Law</secondary-title></titles><periodical><full-title>Journal of Digital Forensics, Security &amp; Law</full-title></periodical><pages>21-40</pages><volume>8</volume><issue>3</issue><keywords><keyword>android</keyword><keyword>malware behavior</keyword><keyword>malware detection</keyword><keyword>static analysis</keyword></keywords><dates><year>2013</year></dates><isbn>978-3-319-20226-6 978-3-319-20227-3</isbn><electronic-resource-num>10.1145/3003816</electronic-resource-num><urls><pdf-urls><url>internal-pdf://c0b15ff02d9684715726987d0647f2d8c43b.pdf</url></pdf-urls></urls><abstract>This paper analyzes different Android malware detection techniques from several research papers, some of these techniques are novel while others bring a new perspective to the research work done in the past. The techniques are of various kinds ranging from detection using host based frameworks and static analysis of executable to feature extraction and behavioral patterns. Each paper is reviewed extensively and the core features of each technique are highlighted and contrasted with the others. The challenges faced during the development of such techniques are also discussed along with the future prospects for Android malware detection. The findings of the review have been well documented in this paper to aid those making an effort to research in the area of Android malware detection by understanding the current scenario and developments that have happened in the field thus far.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>D.a, Barrera</author><author>D.b, McCarney</author><author>J.b, Clark</author><author>P.C.a, Van Oorschot</author></authors></contributors><titles><title>Baton: Certificate agility for android's decentralized signing infrastructure</title><secondary-title>WiSec 2014 - Proceedings of the 7th ACM Conference on Security and Privacy in Wireless and Mobile Networks</secondary-title></titles><periodical><full-title>WiSec 2014 - Proceedings of the 7th ACM Conference on Security and Privacy in Wireless and Mobile Networks</full-title></periodical><pages>1-12</pages><keywords><keyword>android</keyword><keyword>application signing</keyword><keyword>mobile operating systems</keyword></keywords><dates><year>2014</year></dates><isbn>9781450329729 (ISBN)</isbn><electronic-resource-num>10.1145/2627393.2627397</electronic-resource-num><urls><pdf-urls><url>internal-pdf://c4ef4809c8c488fd16b7f5960c2dcb7608b4.pdf</url></pdf-urls><web-urls><url>http://www.scopus.com/inward/record.url?eid=2-s2.0-84907409539&amp;partnerID=40&amp;md5=4298d379986c29528ffab21df16cd16d</url></web-urls></urls><abstract>Android's trust-on-first-use application signing model associates developers with a fixed code signing certificate, but lacks a mechanism to enable transparent key updates or certificate renewals. The model allows application updates to be recognized as authorized by a party with access to the original signing key. However, changing keys or certificates requires that end users manually uninstall/reinstall apps, losing all non-backed up user data. In this paper, we show that with appropriate OS support, developers can securely and without user intervention transfer signing authority to a new signing key. Our proposal, Baton, modifies Android's app installation framework enabling key agility while preserving backwards compatibility with current apps and current Android releases. Baton is designed to work consistently with current UID sharing and signature permission requirements. We discuss technical details of the Android-specific implementation, as well as the applicability of the Baton protocol to other decentralized environments. © 2014 ACM.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Kaplan, David</author><author>Kedmi, Sagi</author><author>Hay, Roee</author><author>Dayan, Avi</author></authors></contributors><titles><title>Attacking the Linux PRNG on Android - Weaknesses in Seeding of Entropic Pools and Low Boot-Time Entropy</title><secondary-title>Proceedings of the 8th USENIX Workshop on Offensive Technologies - WOOT '14</secondary-title></titles><periodical><full-title>Proceedings of the 8th USENIX Workshop on Offensive Technologies - WOOT '14</full-title></periodical><pages>14</pages><keywords/><dates><year>2014</year></dates><urls><pdf-urls><url>internal-pdf://bcdddc251c288770d0377dd84c2a17b52114.pdf</url></pdf-urls></urls><abstract>Android is the most prevalent Linux-based mobile Op-erating System in the market today. Many features of the platform security (such as stack protection, key gen-eration, etc.) are based on values provided by the Linux Pseudorandom Number Generator (LPRNG) and weak-nesses in the LPRNG could therefore directly affect platform security. Much literature has been published previously investigating and detailing such weaknesses in the LPRNG. We build upon this prior work and show that -given a leak of a random value extracted from the LPRNG -a practical, inexpensive attack against the LPRNG internal state in early boot is feasible. Furthermore, the version of the Linux kernel vulnerable to such an attack is used in the majority of Android-based mobile devices in circulation. We also present two real-world exploitation vectors that could be enabled by such an attack. Finally, we mention current mitigations and highlight lessons that can be learned in respect to the design and use of future PRNGs for security features on embedded platforms.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Chen, Kai</author><author>Wang, Xueqiang</author><author>Chen, Yi</author><author>Wang, Peng</author><author>Lee, Yeonjoon</author><author>Wang, Xiaofeng</author><author>Ma, Bin</author><author>Wang, Aohui</author><author>Zhang, Yingjun</author><author>Zou, Wei</author></authors></contributors><titles><title>Following Devil's Footprints: Cross-Platform Analysis of Potentially Harmful Libraries on Android and iOS</title><secondary-title>Proceedings - 2016 IEEE Symposium on Security and Privacy, SP 2016</secondary-title></titles><periodical><full-title>Proceedings - 2016 IEEE Symposium on Security and Privacy, SP 2016</full-title></periodical><pages>357-376</pages><keywords/><dates><year>2016</year></dates><isbn>9781509008247</isbn><electronic-resource-num>10.1109/SP.2016.29</electronic-resource-num><urls><pdf-urls><url>internal-pdf://be6e0bb64d4792610d08bae06f6c11aec0c7.pdf</url></pdf-urls></urls><abstract>—It is reported recently that legitimate libraries are repackaged for propagating malware. An in-depth analysis of such potentially-harmful libraries (PhaLibs) , however, has never been done before, due to the challenges in identifying those libraries whose code can be unavailable online (e.g., removed from the public repositories, spreading underground, etc.). Par-ticularly, for an iOS app, the library it integrates cannot be trivially recovered from its binary code and cannot be analyzed by any publicly available anti-virus (AV) systems. In this paper, we report the first systematic study on PhaLibs across Android and iOS, based upon a key observation that many iOS libraries have Android versions that can potentially be used to understand their behaviors and the relations between the libraries on both sides. To this end, we utilize a methodology that first clusters similar packages from a large number of popular Android apps to identify libraries, and strategically analyze them using AV systems to find PhaLibs. Those libraries are then used to search for their iOS counterparts within Apple apps based upon the invariant features shared cross platforms. On each discovered iOS PhaLib, our approach further identifies its suspicious behaviors that also appear on its Android version and uses the AV system on the Android side to confirm that it is indeed potentially harmful. Running our methodology on 1.3 million Android apps and 140,000 popular iOS apps downloaded from 8 markets, we discovered 117 PhaLibs with 1008 variations on Android and 23 PhaLibs with 706 variations on iOS. Altogether, the Android PhaLibs is found to infect 6.84% of Google Play apps and the iOS libraries are embedded within thousands of iOS apps, 2.94% among those from the official Apple App Store. Looking into the behaviors of the PhaLibs, not only do we discover the recently reported suspicious iOS libraries such as mobiSage, but also their Android counterparts and 6 other back-door libraries never known before. Those libraries are found to contain risky behaviors such as reading from their host apps' keychain, stealthily recording audio and video and even attempting to make phone calls. Our research shows that most Android-side harmful behaviors have been preserved on their corresponding iOS libraries, and further identifies new evidence about libraries repackaging for harmful code propagations on both sides.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Kantchelian, Alex</author><author>Tschantz, Michael Carl</author><author>Afroz, Sadia</author><author>Miller, Brad</author><author>Shankar, Vaishaal</author><author>Bachwani, Rekha</author><author>Joseph, Anthony D</author><author>Tygar, J D</author></authors></contributors><titles><title>Better Malware Ground Truth: Techniques for Weighting Anti-Virus Vendor Labels</title><secondary-title>Proceedings of the 8th ACM Workshop on Artificial Intelligence and Security</secondary-title></titles><periodical><full-title>Proceedings of the 8th ACM Workshop on Artificial Intelligence and Security</full-title></periodical><pages>45-56</pages><keywords><keyword>aggregating labels</keyword><keyword>anti-virus vendors</keyword><keyword>expectation-maximization</keyword><keyword>labeling problem</keyword></keywords><dates><year>2015</year></dates><isbn>978-1-4503-3826-4</isbn><electronic-resource-num>10.1145/2808769.2808780</electronic-resource-num><urls><pdf-urls><url>internal-pdf://c98a13db1959e45bfdd6c6760741fa49947d.pdf</url></pdf-urls><web-urls><url>http://doi.acm.org/10.1145/2808769.2808780</url></web-urls></urls><abstract>We examine the problem of aggregating the results of multiple anti-virus (AV) vendors' detectors into a single authoritative ground-truth label for every binary. To do so, we adapt a well-known generative Bayesian model that postulates the existence of a hidden ground truth upon which the AV labels depend. We use training based on Expectation Maximization for this fully unsupervised technique. We evaluate our method using 279,327 distinct binaries from VirusTotal, each of which appeared for the first time between January 2012 and June 2014. Our evaluation shows that our statistical model is consistently more accurate at predicting the future-derived ground truth than all unweighted rules of the form &quot;k out of n&quot; AV detections. In addition, we evaluate the scenario where partial ground truth is available for model building. We train a logistic regression predictor on the partial label information. Our results show that as few as a 100 randomly selected training instances with ground truth are enough to achieve 80% true positive rate for 0.1% false positive rate. In comparison, the best unweighted threshold rule provides only 60% true positive rate at the same false positive rate.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Gates, Chris</author><author>Nita-Rotaru, Cristina</author><author>Molloy, Ian</author><author>Peng, Hao</author><author>Gates, Chris</author><author>Sarma, Bhaskar</author><author>Li, Ninghui</author><author>Qi, Yuan</author><author>Potharaju, Rahul</author><author>Nita-Rotaru, Cristina</author><author>Molloy, Ian</author></authors></contributors><titles><title>Using Probabilistic Generative Models for Ranking Risks of Android Apps</title><secondary-title>Proceedings of the 2012 ACM Conference on Computer and Communications Security</secondary-title></titles><periodical><full-title>Proceedings of the 2012 ACM Conference on Computer and Communications Security</full-title></periodical><pages>241-252</pages><keywords><keyword>data mining</keyword><keyword>malware</keyword><keyword>mobile</keyword><keyword>risk</keyword><keyword>statical</keyword></keywords><dates><year>2012</year></dates><isbn>9781450316514</isbn><electronic-resource-num>10.1145/2382196.2382224</electronic-resource-num><urls><pdf-urls><url>internal-pdf://c6acc71816a8d13d1b741ab88fbb2195832c.pdf</url></pdf-urls><web-urls><url>http://doi.acm.org/10.1145/2382196.2382224</url></web-urls></urls><abstract>One of Android's main defense mechanisms against malicious apps is a risk communication mechanism which, before a user installs an app, warns the user about the permissions the app requires, trusting that the user will make the right decision. This approach has been shown to be ineffective as it presents the risk information of each app in a &quot;tand-alone&quot; ashion and in a way that requires too much technical knowledge and time to distill useful information. We introduce the notion of risk scoring and risk ranking for Android apps, to improve risk communication for Android apps, and identify three desiderata for an effective risk scoring scheme. We propose to use probabilistic generative models for risk scoring schemes, and identify several such models, ranging from the simple Naive Bayes, to advanced hierarchical mixture models. Experimental results conducted using real-world datasets show that probabilistic general models significantly outperform existing approaches, and that Naive Bayes models give a promising risk scoring approach.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Gasior, Wade</author><author>Yang, Li</author></authors></contributors><titles><title>Network covert channels on the Android platform</title><secondary-title>Proceedings of the Seventh Annual Workshop on Cyber Security and Information Intelligence Research</secondary-title></titles><periodical><full-title>Proceedings of the Seventh Annual Workshop on Cyber Security and Information Intelligence Research</full-title></periodical><pages>61</pages><keywords><keyword>android</keyword><keyword>covert channels</keyword><keyword>mobile</keyword><keyword>security</keyword></keywords><dates><year>2011</year></dates><isbn>9781450309455</isbn><electronic-resource-num>10.1145/2179298.2179367</electronic-resource-num><urls><pdf-urls><url>internal-pdf://bbe97b1ab9c217afbb3cea91e08c6fa0a929.pdf</url></pdf-urls></urls><abstract>Network covert channels are used to exfiltrate information from a secured environment in such a way that an observer cannot detect that communication is taking place at all. These secret channels have been identified as an important security threat to governments and the private sector, and several research efforts have focused on the design, detection, and prevention of such channels in enterprise-type environments. Mobile devices such as smartphones and tablets have become an ubiquitous computing platform, and are storing or have access to an increasingly large amount of sensitive information. As such, these devices have become prime targets of attackers with malicious intents. This paper discusses the implementation of network covert channels on the Android mobile platform, and shows that data can be leaked from these devices in a manner undetectable by the user, the phone's security features, or network security between the mobile device and the outside network. Understanding the threat of covert channels to mobile devices will allow the development of proactive protection mechanisms. Copyright © 2011 ACM.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Ali-Gombe, Aisha</author><author>Ahmed, Irfan</author><author>Richard III, Golden G</author><author>Roussev, Vassil</author><author>Gombe, Aisha Ali</author><author>Ahmed, Irfan</author><author>III, Golden G Richard</author><author>Roussev, Vassil</author></authors></contributors><titles><title>OpSeq: Android Malware Fingerprinting</title><secondary-title>Proceedings of the 5th Program Protection and Reverse Engineering Workshop</secondary-title></titles><periodical><full-title>Proceedings of the 5th Program Protection and Reverse Engineering Workshop</full-title></periodical><pages>7:1--7:12</pages><keywords><keyword>Android</keyword><keyword>Fingerprinting</keyword><keyword>Malware</keyword><keyword>Obfuscation</keyword><keyword>Opcode-Sequence</keyword><keyword>Static Analysis</keyword></keywords><dates><year>2015</year></dates><isbn>978-1-4503-3642-0</isbn><electronic-resource-num>10.1145/2843859.2843860</electronic-resource-num><urls><pdf-urls><url>internal-pdf://c9745f5d1c8d5278b4e3cf5c8eff7d65b85d.pdf</url></pdf-urls><web-urls><url>http://doi.acm.org/10.1145/2843859.2843860</url></web-urls></urls><abstract>© 2015 ACM.Android malware are often created by injecting malicious payloads into benign applications. They employ code and string obfuscation techniques to hide their presence from antivirus scanners. Recent studies have shown that common antivirus software and static analysis tools are not resilient to such obfuscation techniques. To address this problem, we develop a robust fingerprinting approach that can deal with complex obfuscation with a high degree of accuracy. Our approach, called OpSeq, scores similarity as a function of normalized opcode sequences found in sensitive functional modules as well as app permission requests. This combination of structural and behavioral features results in a distinctive fingerprint for a malware sample, thereby improving our model's overall recall rate. We tested our prototype on 1,192 known malware samples belonging to 25 different families, 359 benign apps, and 207 new obfuscated malware variants. The empirical results show that OpSeq can correctly detect known malware with an F-Score of 98%.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Mulliner, Collin</author><author>Robertson, William</author><author>Kirda, Engin</author></authors></contributors><titles><title>VirtualSwindle: An Automated Attack Against In-App Billing on Android</title><secondary-title>Proceedings of the 9th ACM symposium on Information, computer and communications security - ASIA CCS '14</secondary-title></titles><periodical><full-title>Proceedings of the 9th ACM symposium on Information, computer and communications security - ASIA CCS '14</full-title></periodical><pages>459-470</pages><keywords><keyword>app protection</keyword><keyword>mobile application</keyword><keyword>payment</keyword><keyword>smart-</keyword></keywords><dates><year>2014</year></dates><isbn>9781450328005</isbn><electronic-resource-num>10.1145/2590296.2590335</electronic-resource-num><urls><pdf-urls><url>internal-pdf://bc27086c238cffc45b1c56c08811c9be86fa.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2590296.2590335</url></web-urls></urls><abstract>Since its introduction, Android's in-app billing service has quickly gained popularity. The in-app billing service allows users to pay for options, services, subscriptions, and virtual goods from within mobile apps themselves. In-app billing is attractive for developers because it is easy to integrate, and has the advantage that the devel-oper does not need to be concerned with managing financial trans-actions. In this paper, we present the first fully-automated attack against the in-app billing service on Android. Using our prototype, we conducted a robustness study against our attack, analyzing 85 of the most popular Android apps that make use of in-app billing. We found that 60% of these apps were easily and automatically crack-able. We were able to bypass highly popular and prominent games such as Angry Birds and Temple Run, each of which have millions of users. Based on our study, we developed a defensive technique that specifically counters automated attacks against in-app billing. Our technique is lightweight and can be easily added to existing applications.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Li, Yong</author><author>Hui, Pan</author><author>Jin, Depeng</author><author>Su, Li</author><author>Zeng, Lieguang</author></authors></contributors><titles><title>Optimal distributed malware defense in mobile networks with heterogeneous devices</title><secondary-title>IEEE Transactions on Mobile Computing</secondary-title></titles><periodical><full-title>IEEE Transactions on Mobile Computing</full-title></periodical><pages>377-391</pages><volume>13</volume><issue>2</issue><keywords><keyword>Distributed algorithm</keyword><keyword>Heterogeneous mobile networks</keyword><keyword>Mobile malware</keyword><keyword>Security threat</keyword></keywords><dates><year>2014</year></dates><isbn>9781457700934</isbn><electronic-resource-num>10.1109/TMC.2012.255</electronic-resource-num><urls><pdf-urls><url>internal-pdf://ca8ec4c9c7083f01ae90f4a143924f512b3c.pdf</url></pdf-urls></urls><abstract>As malware attacks become more frequent in mobile networks, deploying an efficient defense system to protect against infection and to help the infected nodes to recover is important to contain serious spreading and outbreaks. The technical challenges are that mobile devices are heterogeneous in terms of operating systems, and the malware can infect the targeted system in any opportunistic fashion via local and global connectivity, while the to-be-deployed defense system on the other hand would be usually resource limited. In this paper, we investigate the problem of optimal distribution of content-based signatures of malware to minimize the number of infected nodes, which can help to detect the corresponding malware and to disable further propagation. We model the defense system with realistic assumptions addressing all the above challenges, which have not been addressed in previous analytical work. Based on the proposed framework of optimizing the system welfare utility through the signature allocation, we provide an encounter-based distributed algorithm based on Metropolis sampler. Through extensive simulations with both synthetic and real mobility traces, we show that the distributed algorithm achieves the optimal solution, and performs efficiently in realistic environments.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Götzfried, Johannes</author><author>Müller, Tilo</author></authors></contributors><titles><title>Analysing Android's Full Disk Encryption Feature</title><secondary-title>Journal of Wireless Mobile Networks, Ubiquitous Computing, and Dependable Applications</secondary-title></titles><periodical><full-title>Journal of Wireless Mobile Networks, Ubiquitous Computing, and Dependable Applications</full-title></periodical><pages>84-100</pages><volume>5</volume><issue>1</issue><keywords><keyword>android</keyword><keyword>cold boot</keyword><keyword>cpu-bound encryption</keyword><keyword>evil maid</keyword></keywords><dates><year>2014</year></dates><isbn>9780769547138</isbn><electronic-resource-num>10.1109/MDM.2012.31</electronic-resource-num><urls><pdf-urls><url>internal-pdf://ca4394e1f4728f35af4cf077f3d5f3a77c4f.pdf</url></pdf-urls><web-urls><url>http://isyou.info/jowua/papers/jowua-v5n1-4.pdf</url></web-urls></urls><abstract>Since Android 4.0, which was released in October 2011, users of Android smartphones are pro-vided with a built-in encryption feature to protect their home partitions. In the work at hand, we give a structured analysis of this software-based encryption solution. For example, software-based encryption always requires at least a small part of the disk to remain unencrypted; in Android this is the entire system partition. Unencrypted parts of a disk can be read out and are open to system manipulations. We present a tool named EvilDroid to show that with physical access to an encrypted smartphone only (i.e., without user level privileges), the Android system partition can be subverted with keylogging. Additionally, as it was exemplary shown by attacks against Galaxy Nexus devices in 2012, Android-driven ARM devices are vulnerable to cold boot attacks. Data recovery tools like FROST exploit the remanence effect of RAM to recover data from encrypted smartphones, at worst the disk encryption key. With a Linux kernel module named Armored, we demonstrate that Android's software encryption can be improved to withstand cold boot attacks by performing AES entirely on the CPU without RAM. As a consequence, cold boot attacks on encryption keys can be defeated. We present both a detailed security and a performance analysis of Armored.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Su, X.</author><author>Chuah, M.</author><author>Tan, G.</author></authors></contributors><titles><title>Smartphone dual defense protection framework: Detecting malicious applications in android markets</title><secondary-title>Proceedings - 2012 8th International Conference on Mobile Ad Hoc and Sensor Networks, MSN 2012</secondary-title></titles><periodical><full-title>Proceedings - 2012 8th International Conference on Mobile Ad Hoc and Sensor Networks, MSN 2012</full-title></periodical><pages>153-160</pages><keywords><keyword>android security</keyword><keyword>data mining</keyword><keyword>network traffic monitor</keyword><keyword>system call monitor</keyword></keywords><dates><year>2012</year></dates><isbn>9780769549613</isbn><electronic-resource-num>10.1109/MSN.2012.43</electronic-resource-num><urls><pdf-urls><url>internal-pdf://d7bcbad7dcd63c089755209d240715343062.pdf</url></pdf-urls></urls><abstract>#SDDP. They do syscall analysis and network traffic analysis by using machine learning approaches to detect malicious behavior.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Gibler, Clint</author><author>Stevens, Ryan</author><author>Crussell, Jonathan</author><author>Chen, Hao</author><author>Zang, Hui</author><author>Choi, Heesook</author></authors></contributors><titles><title>AdRob: Examining the Landscape and Impact of Android Application Plagiarism</title><secondary-title>Proc. of MobiSys</secondary-title></titles><periodical><full-title>Proc. of MobiSys</full-title></periodical><pages>431</pages><keywords><keyword>advertising</keyword><keyword>android</keyword><keyword>choi</keyword><keyword>com</keyword><keyword>heesook</keyword><keyword>mo-</keyword><keyword>plagiarism</keyword><keyword>sprint</keyword><keyword>underground economy</keyword></keywords><dates><year>2013</year></dates><isbn>9781450316729</isbn><electronic-resource-num>10.1145/2462456.2464461</electronic-resource-num><urls><pdf-urls><url>internal-pdf://d7d86a05a8e9e226ccd0ebe9fb72da966e16.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2462456.2464461</url></web-urls></urls><abstract>#AdRob. They study what's the impact of plagiarism on the original developer. They run a similarity tool to check for cloned apps, and they then extract from the app (and from network traces) the AD's client ID. Cloned apps will have a different client ID. This is how they detect the fraud.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Ikram, Muhammad</author><author>Vallina-Rodriguez, Narseo</author><author>Seneviratne, Suranga</author><author>Kaafar, Mohamed Ali</author><author>Paxson, Vern</author></authors></contributors><titles><title>An Analysis of the Privacy and Security Risks of Android VPN Permission-enabled Apps</title><secondary-title>Proceedings of the 2016 ACM on Internet Measurement Conference - IMC '16</secondary-title></titles><periodical><full-title>Proceedings of the 2016 ACM on Internet Measurement Conference - IMC '16</full-title></periodical><pages>349-364</pages><keywords/><dates><year>2016</year></dates><isbn>9781450345262</isbn><electronic-resource-num>10.1145/2987443.2987471</electronic-resource-num><urls><pdf-urls><url>internal-pdf://c7c9315fc077930cdd13850a540a808931b8.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2987443.2987471</url></web-urls></urls><abstract>Millions of users worldwide resort to mobile VPN clients to either circumvent censorship or to access geo-blocked con-tent, and more generally for privacy and security purposes. In practice, however, users have little if any guarantees about the corresponding security and privacy settings, and perhaps no practical knowledge about the entities accessing their mo-bile traffic. In this paper we provide a first comprehensive analysis of 283 Android apps that use the Android VPN permission, which we extracted from a corpus of more than 1.4 million apps on the Google Play store. We perform a number of passive and active measurements designed to investigate a wide range of security and privacy features and to study the behavior of each VPN-based app. Our analysis includes in-vestigation of possible malware presence, third-party library embedding, and traffic manipulation, as well as gauging user perception of the security and privacy of such apps. Our ex-periments reveal several instances of VPN apps that expose users to serious privacy and security vulnerabilities, such as use of insecure VPN tunneling protocols, as well as IPv6 and DNS traffic leakage. We also report on a number of apps actively performing TLS interception. Of particular con-cern are instances of apps that inject JavaScript programs for tracking, advertising, and for redirecting e-commerce traffic to external partners.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bartel, Alexandre</author><author>Klein, Jacques</author><author>Monperrus, Martin</author><author>Allix, Kevin</author><author>Traon, Yves Le</author></authors></contributors><titles><title>[JJ]Improving Privacy on Android Smartphones Through In-Vivo Bytecode Instrumentation</title><secondary-title>arXiv preprint arXiv:1208.4536</secondary-title></titles><periodical><full-title>arXiv preprint arXiv:1208.4536</full-title></periodical><keywords/><dates><year>2012</year></dates><urls><pdf-urls><url>internal-pdf://c67d27ea02fb5499d4b2eb992abf3a7fcf8b (1).pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1208.4536</url></web-urls></urls></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Ng, Yi Ying</author><author>Zhou, Hucheng</author><author>Ji, Zhiyuan</author><author>Luo, Huan</author><author>Dong, Yuan</author></authors></contributors><titles><title>Which android app store can be trusted in China?</title><secondary-title>Proceedings - International Computer Software and Applications Conference</secondary-title></titles><periodical><full-title>Proceedings - International Computer Software and Applications Conference</full-title></periodical><pages>509-518</pages><keywords><keyword>APK</keyword><keyword>Android</keyword><keyword>app store</keyword><keyword>severity ranking</keyword><keyword>trustworthy</keyword></keywords><dates><year>2014</year></dates><isbn>VO  -</isbn><electronic-resource-num>10.1109/COMPSAC.2014.95</electronic-resource-num><urls><pdf-urls><url>internal-pdf://c5be6a0ed2b53e2ede6ca49c5bd1b6e685be (1).pdf</url></pdf-urls></urls><abstract>China has the world's largest Android population with 270 million active users. However, Google Play is only accessible by about 30% of them, and third-party app stores are thus used by 70% of them for daily Android apps (applications) discovery. The trustworthiness of Android app stores in China is still an open question. In this paper, we present a comprehensive study on the trustworthy level of top popular Android app stores in China, by discovering the identicalness and content differences between the APK files hosted in the app stores and the corresponding official APK files. First, we have selected 25 top apps that have the highest installations in China and have the corresponding official ones downloaded from their official websites as oracle, and have collected total 506 APK files across 21 top popular app stores (20 top third party stores as well as Google Play). Afterwards, APK identical checking and APK difference analysis are conducted against the corresponding official versions. Next, assessment is applied to rank the severity of APK files. All the apps are classified into 3 severity levels, ranging from safe (identical and higher level), warning (lower version or modifications on resource related files) to critical (modifications on permission file and/or application codes). Finally, the severity levels contribute to the final trustworthy ranking score of the 21 stores. The study indicates that about only 26.09% of level APK files are safe, 37.74% of them are at warning level, and 36.17% of them are surprisingly at critical level. We have also found out that 10 (about 2%) APK files are modified and resigned by unknown third-parties. In addition, the average trustworthy ranking score (47.37 over 100) has also highlighted that the trustworthy level of the Android app stores in China is relatively low. In conclusion, we suggest Android users to download APK files from its corresponding official websites or use the highest ranked third-party app stores, - nd we appeal app stores to ensure all hosting APK files are trustworthy enough to provide a &quot;safe-to-download&quot; environment.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Aron, Luk????</author><author>Han????ek, Petr</author></authors></contributors><titles><title>Introduction to android 5 security</title><secondary-title>CEUR Workshop Proceedings</secondary-title></titles><periodical><full-title>CEUR Workshop Proceedings</full-title></periodical><pages>103-111</pages><volume>1326</volume><keywords/><dates><year>2015</year></dates><isbn>1430215968</isbn><urls><pdf-urls><url>internal-pdf://d4bcc505dd8f935e264e7b67cffbd50336c0.pdf</url></pdf-urls></urls><abstract>This paper discusses the basic introduction into Android security. It is focused on the last version of Android platform. In the world of numbers it means Android 5.0 with code-name Lollipop. This paper covers description of SELinux and impact on mobile platform, Android Application Sandbox and the whole new virtual machine ART, which was introduced in Android 4.4. The aim of this paper is to introduce the researchers of security principles on Android into new version of thsi operating systems and it’s new technologies related to security.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>El-harake, Khalil</author><author>Jerad, Wassim</author><author>Langet, Mattieu</author><author>El-harake, Khalil</author><author>Jerad, Wassim</author><author>Langet, Mattieu</author><author>Blocking, Mariem Mamlouk</author><author>El-harake, Khalil</author></authors></contributors><titles><title>Blocking Advertisements on Android Devices using Monitoring Techniques To cite this version : Blocking Advertisements on Android Devices</title></titles><periodical/><keywords/><dates><year>2015</year></dates><urls><pdf-urls><url>internal-pdf://cf9685dd039dabc42f755cbfb5c209295fa4.pdf</url></pdf-urls></urls></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhang, Xiao</author><author>Ying, Kailiang</author><author>Aafer, Yousra</author><author>Qiu, Zhenshen</author><author>Du, Wenliang</author></authors></contributors><titles><title>Life after App Uninstallation: Are the Data Still Alive? Data Residue Attacks on Android</title><secondary-title>Ndss</secondary-title></titles><periodical><full-title>Ndss</full-title></periodical><pages>21-24</pages><issue>February</issue><keywords/><dates><year>2016</year></dates><isbn>189156241X</isbn><electronic-resource-num>10.14722/ndss.2016.23061</electronic-resource-num><urls><pdf-urls><url>internal-pdf://d006cadd4fcc9eedbcfe1bcc86399514758a.pdf</url></pdf-urls></urls><abstract>—Uninstalling apps from mobile devices is among the most common user practices on smartphones. It may sound trivial, but the entire process involves multiple system components coordinating to remove the data belonging to the uninstalled app. Despite its frequency and complexity, little has been done to understand the security risks in the app's uninstallation process. In this project, we have conducted the first systematic analysis of Android's data cleanup mechanism during the app's uninstallation process. Our analysis reveals that data residues are pervasive in the system after apps are uninstalled. For each identified data residue instance, we have formulated hypotheses and designed experiments to see whether it can be exploited to compromise the system security. The results are surprising: we have found 12 instances of vulnerabilities caused by data residues. By exploiting them, adversaries can steal user's online-account credentials, access other app's private data, escalate privileges, eavesdrop on user's keystrokes, etc. We call these attacks the data residue attacks. To evaluate the real-world impact of the attacks, we have conducted an analysis on the top 100 apps in each of the 27 categories from GooglePlay. The result shows that a large portion of the apps can be the target of the data residue attacks. We have further evaluated the effectiveness of popular app markets (GooglePlay, Amazon appstore and Samsung appstore) in preventing our attacking apps from reaching their markets. Moreover, we have studied the data residue attacks on 10 devices from different vendors to see how vendor customization can affect our attacks. Google has acknowledged all our findings, and is working with us to get the problems fixed.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhauniarovich, Yury</author><author>Ahmad, Maqsood</author><author>Gadyatskaya, Olga</author><author>Crispo, Bruno</author><author>Massacci, Fabio</author></authors></contributors><titles><title>StaDynA: Addressing the Problem of Dynamic Code Updates in the Security Analysis of Android Applications</title><secondary-title>Proceedings of the 5th ACM Conference on Data and Application Security and Privacy - CODASPY '15</secondary-title></titles><periodical><full-title>Proceedings of the 5th ACM Conference on Data and Application Security and Privacy - CODASPY '15</full-title></periodical><pages>37-48</pages><keywords><keyword>android</keyword><keyword>dynamic code updates</keyword><keyword>security analysis</keyword></keywords><dates><year>2015</year></dates><isbn>9781450331913</isbn><electronic-resource-num>10.1145/2699026.2699105</electronic-resource-num><urls><pdf-urls><url>internal-pdf://cf53f24b2d4b7de4b069a7256fcd9f0b4502.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2699026.2699105</url></web-urls></urls><abstract>Static analysis of Android applications can be hindered by the presence of the popular dynamic code update techniques: dynamic class loading and reflection. Recent Android malware samples do actually use these mechanisms to conceal their malicious behavior from static analyzers. These techniques defuse even the most recent static analyzers (e.g., [12, 21, 31]) that usually operate under the “closed world” assumption (the targets of reflective calls can be resolved at analysis time; only classes reachable from the class path at analysis time are used at runtime). Our proposed solution allows existing static analyzers to remove this assumption. This is achieved by combining static and dynamic analysis of applications in order to reveal the hidden/updated behavior and extend static analysis results with this information. This paper presents design, implementation and preliminary evaluation results of our solution called StaDynA.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><titles><title>Darkdroid : Exposing the Dark Side of Android Marketplaces</title></titles><periodical/><issue>June</issue><keywords/><dates><year>2016</year></dates><urls><pdf-urls><url>internal-pdf://d2212e359ea20c5211730e89831024890e24.pdf</url></pdf-urls></urls></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Reaves, Bradley</author><author>Bowers, Jasmine</author><author>Albert, Sigmund</author><author>Iii, Gorski</author><author>Carolina, North</author><author>Anise, Olabode</author><author>Bobhate, Rahul</author><author>Cho, Raymond</author><author>Das, Hiranava</author><author>Hussain, Sharique</author><author>Karachiwala, Hamza</author><author>Scaife, Nolen</author><author>Wright, Byron</author><author>Butler, Kevin</author><author>Traynor, Patrick</author></authors></contributors><titles><title>* droid : Assessment and Evaluation of Android Application Analysis Tools</title><secondary-title>ACM Computing Surveys</secondary-title></titles><periodical><full-title>ACM Computing Surveys</full-title></periodical><pages>1-30</pages><volume>49</volume><issue>3</issue><keywords/><dates><year>2016</year></dates><electronic-resource-num>10.1145/2996358</electronic-resource-num><urls><pdf-urls><url>internal-pdf://d3f69c30240e2f66616ad0f29fd3b8f3e157.pdf</url></pdf-urls></urls><abstract>The security research community has invested significant effort in improving the security of Android ap-plications over the past half decade. This effort has addressed a wide range of problems and resulted in the creation of many tools for application analysis. In this article, we perform the first systematization of Android security research that analyzes applications, characterizing the work published in more than 17 top venues since 2010. We categorize each paper by the types of problems they solve, highlight areas that have received the most attention, and note whether tools were ever publicly released for each effort. Of the released tools, we then evaluate a representative sample to determine how well application developers can apply the results of our community's efforts to improve their products. We find not only that significant work remains to be done in terms of research coverage but also that the tools suffer from significant issues ranging from lack of maintenance to the inability to produce functional output for applications with known vulnerabilities. We close by offering suggestions on how the community can more successfully move forward.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wang, Chiwei</author><author>Shieh, Shiuhpyng Winston</author></authors></contributors><titles><title>DROIT: Dynamic alternation of dual-level tainting for malware analysis</title><secondary-title>Journal of Information Science and Engineering</secondary-title></titles><periodical><full-title>Journal of Information Science and Engineering</full-title></periodical><pages>111-129</pages><volume>31</volume><issue>1</issue><keywords><keyword>Android operating system</keyword><keyword>Binary translation</keyword><keyword>Dalvik virtual machine</keyword><keyword>Information flow tracking</keyword><keyword>Malware analysis</keyword><keyword>Mobile security</keyword><keyword>Taint analysis</keyword></keywords><dates><year>2015</year></dates><urls><pdf-urls><url>internal-pdf://cc2206d5440673e0f5ae0a944ef3ad1a6a39.pdf</url></pdf-urls></urls><abstract>Taint analysis for Android malware has received much attention in recent research.\r\nExisting taint techniques operate either at Java object level or at deeper instruction level.\r\nObject-level tracking is suitable for malware written in Java byte-code, but not for native\r\nones. Instruction-level tracking captures the finest data flow. However, it leads to obscure\r\nsemantic reconstruction and low performance. In this paper, we present DROIT, a\r\ntaint tracker which dynamically alternates between object-level and instruction-level\r\ntracking on demands. DROIT tracks data flow at Java object level in general. When its\r\nDalvik VM exits the byte-code execution, DROIT automatically switches to instructionlevel\r\ntracking, and vice versa. The trigger-based DROIT can alternate between the two\r\nlevels in an efficient manner, and can provide dual-level whole image of the data flow,\r\nrather than fragments. Tracking at the dual levels also eases the semantic reconstruction\r\nsignificantly. The experiment with Android information-stealing trojans showed that\r\nDROIT can handle Java-based malware, those composed in native code, and those alternating\r\nbetween the two levels (e.g., DroidKungFu), respectively. </abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Yagemann, Carter</author><author>Du, Wenliang</author></authors></contributors><titles><title>Latin for intent of the machine . Ex Machina is an acronym meaning Extensible Mandatory Access Control Hook Integrating Normal Applications .</title></titles><periodical/><keywords/><urls><pdf-urls><url>internal-pdf://d235f20d82bec2baf814fbe79bf6bbdfbc1e.pdf</url></pdf-urls></urls></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bagheri, Hamid</author><author>Sadeghi, Alireza</author><author>Jabbarvand, Reyhaneh</author><author>Malek, Sam</author></authors></contributors><titles><title>Practical, formal synthesis and automatic enforcement of security policies for android</title><secondary-title>Proceedings - 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks, DSN 2016</secondary-title></titles><periodical><full-title>Proceedings - 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks, DSN 2016</full-title></periodical><pages>514-525</pages><keywords/><dates><year>2016</year></dates><isbn>9781467388917</isbn><electronic-resource-num>10.1109/DSN.2016.53</electronic-resource-num><urls><pdf-urls><url>internal-pdf://d6015bb217b9db75c4b4f713c401b30de674.pdf</url></pdf-urls></urls><abstract>© 2016 IEEE. As the dominant mobile computing platform, Android has become a prime target for cyber-security attacks. Many of these attacks are manifested at the application level, and through the exploitation of vulnerabilities in apps downloaded from the popular app stores. Increasingly, sophisticated attacks exploit the vulnerabilities in multiple installed apps, making it extremely difficult to foresee such attacks, as neither the app developers nor the store operators know a priori which apps will be installed together. This paper presents an approach that allows the end-users to safeguard a given bundle of apps installed on their device from such attacks. The approach, realized in a tool, called SEPAR, combines static analysis with lightweight formal methods to automatically infer security-relevant properties from a bundle of apps. It then uses a constraint solver to synthesize possible security exploits, from which fine-grained security policies are derived and automatically enforced to protect a given device. In our experiments with over 4,000 Android apps, SEPAR has proven to be highly effective at detecting previously unknown vulnerabilities as well as preventing their exploitation.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sanz, Borja</author><author>Santos, Igor</author><author>Ugarte-pedrero, Xabier</author><author>Laorden, Carlos</author><author>Nieves, Javier</author><author>Bringas, Pablo G</author></authors></contributors><titles><title>Instance-based Anomaly Method for Android Malware Detection</title><secondary-title>10th International Conference on Security and Cryptography</secondary-title></titles><periodical><full-title>10th International Conference on Security and Cryptography</full-title></periodical><pages>387- 394</pages><keywords/><dates><year>2013</year></dates><isbn>9789898565730</isbn><electronic-resource-num>10.1007/978-3-319-01854-6</electronic-resource-num><urls><pdf-urls><url>internal-pdf://d73c3fa3c691c517e3c531ab632c37ee8a33.pdf</url></pdf-urls></urls><abstract>The usage of mobile phones has increased in our lives because they offer nearly the same functionality as a personal computer. Besides, the number of applications available for Android-based mobile devices has increased. Android application distribution is based on a centralized market where the developers can upload and sell their applications. However, as it happens with any popular service, it is prone to misuse and, in particular, malware writers can use this market to upload their malicious creations. In this paper, we propose a new method that, based upon several features that are extracted from the AndroidManifest file of the legitimate applications, builds an anomaly detection system able to detect malware. Copyright © 2013 SCITEPRESS.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Fernandes, Earlence</author><author>Aluri, Ajit</author><author>Crowell, Alexander</author><author>Prakash, Atul</author></authors></contributors><titles><title>Decomposable Trust for Android Applications</title><secondary-title>Proceedings of the International Conference on Dependable Systems and Networks</secondary-title></titles><periodical><full-title>Proceedings of the International Conference on Dependable Systems and Networks</full-title></periodical><pages>343-354</pages><volume>2015-Septe</volume><keywords><keyword>Android</keyword><keyword>Root Exploits</keyword><keyword>Trust Decomposition</keyword><keyword>Virtualization</keyword></keywords><dates><year>2015</year></dates><isbn>9781479986293</isbn><electronic-resource-num>10.1109/DSN.2015.15</electronic-resource-num><urls><pdf-urls><url>internal-pdf://d16ee4b4e5be69ba82d1445457851164a764.pdf</url></pdf-urls></urls></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Ho, Tsung-Hsuan</author><author>Dean, Daniel</author><author>Gu, Xiaohui</author><author>Enck, William</author></authors></contributors><titles><title>PREC: Practical Root Exploit Containment for Android Devices</title><secondary-title>Proceedings of the 4th ACM Conference on Data and Application Security and Privacy</secondary-title></titles><periodical><full-title>Proceedings of the 4th ACM Conference on Data and Application Security and Privacy</full-title></periodical><pages>187-198</pages><keywords><keyword>android</keyword><keyword>dynamic analysis</keyword><keyword>host intrusion detection</keyword><keyword>mal-</keyword></keywords><dates><year>2014</year></dates><isbn>9781450322782</isbn><electronic-resource-num>10.1145/2557547.2557563</electronic-resource-num><urls><pdf-urls><url>internal-pdf://d22dfae33f3e00f025305e3e931c4950a51f (1).pdf</url></pdf-urls></urls><abstract>Application markets such as the Google Play Store and the Apple App Store have become the de facto method of dis- tributing software to mobile devices. While official markets dedicate significant resources to detecting malware, state- of-the-art malware detection can be easily circumvented us- ing logic bombs or checks for an emulated environment. We present a Practical Root Exploit Containment (PREC) framework that protects users from such conditional mali- cious behavior. PREC can dynamically identify system calls fromhigh-risk components (e.g., third-party native libraries) and execute those systemcalls within isolated threads. Hence, PREC can detect and stop root exploits with high accuracy while imposing low interference to benign applications. We have implemented PREC and evaluated our methodology on 140 most popular benign applications and 10 root ex- ploit malicious applications. Our results show that PREC can successfully detect and stop all the tested malware while reducing the false alarm rates by more than one order of magnitude over traditional malware detection algorithms. PREC is light-weight, which makes it practical for runtime on-device root exploit detection and containment. Categories</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Kashefi, Iman</author><author>Kassiri, Maryam</author><author>Salleh, Mazleena</author></authors></contributors><titles><title>Preventing collusion attack in android</title><secondary-title>International Arab Journal of Information Technology</secondary-title></titles><periodical><full-title>International Arab Journal of Information Technology</full-title></periodical><pages>719-727</pages><volume>12</volume><issue>6A</issue><keywords><keyword>Android security</keyword><keyword>Colluding applications</keyword><keyword>Collusion attacks</keyword><keyword>Over-privileged applications</keyword></keywords><dates><year>2015</year></dates><urls><pdf-urls><url>internal-pdf://db2818a1c59e28a9457ca61e1ef2bbff9cec.pdf</url></pdf-urls></urls></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhou, Yajin</author></authors></contributors><titles><title>Hybrid User-level Sandboxing of Third-party Android Apps</title><secondary-title>AsiaCCS</secondary-title></titles><periodical><full-title>AsiaCCS</full-title></periodical><pages>19-30</pages><keywords><keyword>android</keyword><keyword>dalvik hooking</keyword><keyword>software fault isolation</keyword></keywords><dates><year>2015</year></dates><isbn>9781450332453</isbn><electronic-resource-num>10.1145/2714576.2714598</electronic-resource-num><urls><pdf-urls><url>internal-pdf://d56ff683614e8f08ea95d63d5f28b0a01cba.pdf</url></pdf-urls></urls><abstract>Users of Android phones increasingly entrust personal information to third-party apps. However, recent studies reveal that many apps, even benign ones, could leak sensitive information without user awareness or consent. Previous solutions either require to modify the Android framework thus significantly impairing their practical deployment, or could be easily defeated by malicious apps using a native library. In this paper, we propose AppCage, a system that thoroughly confines the run-time behavior of third-party Android apps without requiring framework modifications or root privilege. AppCage leverages two complimentary user-level sandboxes to interpose and regulate an app’s access to sensitive APIs. Specifically, dex sandbox hooks into the app’s Dalvik virtual machine instance and redirects each sensitive framework API to a proxy which strictly en- forces the user-defined policies, and native sandbox leverages software fault isolation to prevent the app’s native libraries from directly accessing the protected APIs or subverting the dex sandbox. We have implemented a prototype of AppCage. Our evaluation shows that AppCage can successfully detect and block attempts to leak private information by third-party apps, and the performance overhead caused by AppCage is negligible for apps without native libraries and minor for apps with them.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Narayanan, Annamalai</author><author>Chandramohan, Mahinthan</author><author>Chen, Lihui</author><author>Liu, Yang</author></authors></contributors><titles><title>Context-aware, Adaptive and Scalable Android Malware Detection through Online Learning (extended version)</title></titles><periodical/><keywords><keyword>graph kernels</keyword><keyword>malware</keyword><keyword>online learning</keyword></keywords><dates><year>2017</year></dates><electronic-resource-num>10.1109/TETCI.2017.2699220</electronic-resource-num><urls><pdf-urls><url>internal-pdf://d9d10b102ae6b6a4743fccd981c4fa6c2e97.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1706.00947</url></web-urls></urls><abstract>It is well-known that Android malware constantly evolves so as to evade detection. This causes the entire malware population to be non-stationary. Contrary to this fact, most of the prior works on Machine Learning based Android malware detection have assumed that the distribution of the observed malware characteristics (i.e., features) does not change over time. In this work, we address the problem of malware population drift and propose a novel online learning based framework to detect malware, named CASANDRA (Contextaware, Adaptive and Scalable ANDRoid mAlware detector). In order to perform accurate detection, a novel graph kernel that facilitates capturing apps' security-sensitive behaviors along with their context information from dependency graphs is proposed. Besides being accurate and scalable, CASANDRA has specific advantages: i) being adaptive to the evolution in malware features over time ii) explaining the significant features that led to an app's classification as being malicious or benign. In a large-scale comparative analysis, CASANDRA outperforms two state-of-the-art techniques on a benchmark dataset achieving 99.23% F-measure. When evaluated with more than 87,000 apps collected in-the-wild, CASANDRA achieves 89.92% accuracy, outperforming existing techniques by more than 25% in their typical batch learning setting and more than 7% when they are continuously retained, while maintaining comparable efficiency.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Feng, Yu</author><author>Dillig, Isil</author><author>Anand, Saswat</author><author>Aiken, Alex</author></authors></contributors><titles><title>Apposcopy: Automated Detection of Android Malware (Invited Talk)</title><secondary-title>Proceedings of the 2Nd International Workshop on Software Development Lifecycle for Mobile</secondary-title></titles><periodical><full-title>Proceedings of the 2Nd International Workshop on Software Development Lifecycle for Mobile</full-title></periodical><pages>13-14</pages><keywords><keyword>Android</keyword><keyword>Inter-component Call Graph</keyword><keyword>Taint Analysis</keyword></keywords><dates><year>2014</year></dates><isbn>978-1-4503-3225-5</isbn><electronic-resource-num>10.1145/2661694.2661697</electronic-resource-num><urls><pdf-urls><url>internal-pdf://db8653c1d2834ab2345e50bda260dadeb65e.pdf</url></pdf-urls><web-urls><url>http://doi.acm.org/10.1145/2661694.2661697</url></web-urls></urls><abstract>We present Apposcopy, a new semantics-based approach for detecting Android malware that steal private information. Apposcopy incorporates (i) a high-level language for specifying malware signatures and (ii) a static analysis for deciding if a given application matches a given signature. We have evaluated Apposcopy on a corpus of real-world Android applications and show that it can effectively pinpoint malicious applications that belong to certain malware families. </abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sanz, Borja</author><author>Santos, Igor</author><author>Ugarte-Pedrero, Xabier</author><author>Laorden, Carlos</author><author>Nieves, Javier</author><author>Bringas, PabloGarcía</author></authors></contributors><titles><title>Anomaly Detection Using String Analysis for Android Malware Detection</title><secondary-title>International Joint Conference SOCO’13-CISIS’13-ICEUTE’13</secondary-title></titles><periodical><full-title>International Joint Conference SOCO’13-CISIS’13-ICEUTE’13</full-title></periodical><pages>469-478</pages><volume>239</volume><keywords><keyword>Android</keyword><keyword>anomaly detection</keyword><keyword>malware detection</keyword><keyword>mobile malware</keyword></keywords><dates><year>2014</year></dates><isbn>978-3-319-01853-9</isbn><electronic-resource-num>10.1007/978-3-319-01854-6_48</electronic-resource-num><urls><pdf-urls><url>internal-pdf://d94087c6abfe094fa136d3146e9dd2eb801e.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1007/978-3-319-01854-6_48</url></web-urls></urls><abstract>The usage of mobile phones has increased in our lives because they offer nearly the same functionality as a personal computer. Specifically, Android is one of the most widespread mobile operating systems. Indeed, its app store is one of the most visited and the number of applications available for this platform has also increased. However, as it happens with any popular service, it is prone to misuse, and the number of malware samples has increased dramatically in the last months. Thus, we propose a new method based on anomaly detection that extracts the strings contained in application files in order to detect malware</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wang, Zhaohui</author><author>Murmuria, Rahul</author><author>Stavrou, Angelos</author></authors></contributors><titles><title>Implementing and optimizing an encryption filesystem on Android</title><secondary-title>Proceedings - 2012 IEEE 13th International Conference on Mobile Data Management, MDM 2012</secondary-title></titles><periodical><full-title>Proceedings - 2012 IEEE 13th International Conference on Mobile Data Management, MDM 2012</full-title></periodical><pages>52-62</pages><keywords><keyword>Encrypted filesystem</keyword><keyword>Full disk encryption</keyword><keyword>I/O performance</keyword><keyword>Smart handheld devices</keyword></keywords><dates><year>2012</year></dates><isbn>9780769547138</isbn><electronic-resource-num>10.1109/MDM.2012.31</electronic-resource-num><urls><pdf-urls><url>internal-pdf://d710196859e550ab2a63aad8070036214a04.pdf</url></pdf-urls></urls><abstract>The recent surge in popularity of smart handheld devices, including smart-phones and tablets, has given rise to new challenges in protection of Personal Identifiable Information (PII). Indeed, modern mobile devices store PII for applications that span from email to SMS and from social media to location-based services increasing the concerns of the end user's privacy. Therefore, there is a clear need and expectation for PII data to be protected in the case of loss, theft, or capture of the portable device. In this paper, we present a novel FUSE (File system in User space) encryption file system to protect the removable and persistent storage on heterogeneous smart gadget devices running the Android platform. The proposed file system leverages NIST certified cryptographic algorithms to encrypt the data-at-rest. We present an analysis of the security and performance trade-offs in a wide-range of usage and load scenarios. Using existing known micro benchmarks in devices using encryption without any optimization, we show that encrypted operations can incur negligible overhead for read operations and up to twenty (20) times overhead for write operations for I/O-intensive programs. In addition, we quantified the database transaction performance and we observed a 50% operation time slowdown on average when using encryption. We further explore generic and device specific optimizations and gain 10% to 60% performance for different operations reducing the initial cost of encryption. Finally, we show that our approach is easy to install and configure across all Android platforms including mobile phones, tablets, and small notebooks without any user perceivable delay for most of the regular Android applications.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wangen, Gaute</author></authors></contributors><titles><title>The role of malware in reported cyber espionage: A review of the impact and mechanism</title><secondary-title>Information (Switzerland)</secondary-title></titles><periodical><full-title>Information (Switzerland)</full-title></periodical><pages>183-211</pages><volume>6</volume><issue>2</issue><keywords><keyword>Advanced persistent threat (APT)</keyword><keyword>Cyber-espionage</keyword><keyword>Review</keyword></keywords><dates><year>2015</year></dates><electronic-resource-num>10.3390/info6020183</electronic-resource-num><urls><pdf-urls><url>internal-pdf://db169e8593a9bce7028cba948f7c22fee5d6.pdf</url></pdf-urls></urls><abstract>The recent emergence of the targeted use of malware in cyber espionage versus industry requires a systematic review for better understanding of its impact and mechanism. This paper proposes a basic taxonomy to document major cyber espionage incidents, describing and comparing their impacts (geographic or political targets, origins and motivations) and their mechanisms (dropper, propagation, types of operating systems and infection rates). This taxonomy provides information on recent cyber espionage attacks that can aid in defense against cyber espionage by providing both scholars and experts a solid foundation of knowledge about the topic. The classification also provides a systematic way to document known and future attacks to facilitate research activities. Geopolitical and international relations researchers can focus on the impacts, and malware and security experts can focus on the mechanisms. We identify several dominant patterns (e.g., the prevalent use of remote access Trojan and social engineering). This article concludes that the research and professional community should collaborate to build an open data set to facilitate the geopolitical and/or technical analysis and synthesis of the role of malware in cyber espionage.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Narayanan, Annamalai</author><author>Chandramohan, Mahinthan</author><author>Chen, Lihui</author><author>Liu, Yang</author></authors></contributors><titles><title>Context-aware, Adaptive and Scalable Android Malware Detection through Online Learning (extended version)</title></titles><periodical/><pages>1-19</pages><volume>11</volume><issue>4</issue><keywords/><dates><year>2017</year></dates><electronic-resource-num>10.1109/TETCI.2017.2699220</electronic-resource-num><urls><pdf-urls><url>internal-pdf://d75257627e93ef0303f2b4cdc5cef9ed6f4d.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1706.00947</url></web-urls></urls><abstract>It is well-known that Android malware constantly evolves so as to evade detection. This causes the entire malware population to be non-stationary. Contrary to this fact, most of the prior works on Machine Learning based Android malware detection have assumed that the distribution of the observed malware characteristics (i.e., features) does not change over time. In this work, we address the problem of malware population drift and propose a novel online learning based framework to detect malware, named CASANDRA (Contextaware, Adaptive and Scalable ANDRoid mAlware detector). In order to perform accurate detection, a novel graph kernel that facilitates capturing apps' security-sensitive behaviors along with their context information from dependency graphs is proposed. Besides being accurate and scalable, CASANDRA has specific advantages: i) being adaptive to the evolution in malware features over time ii) explaining the significant features that led to an app's classification as being malicious or benign. In a large-scale comparative analysis, CASANDRA outperforms two state-of-the-art techniques on a benchmark dataset achieving 99.23% F-measure. When evaluated with more than 87,000 apps collected in-the-wild, CASANDRA achieves 89.92% accuracy, outperforming existing techniques by more than 25% in their typical batch learning setting and more than 7% when they are continuously retained, while maintaining comparable efficiency.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Beekman, Jethro G</author><author>Thompson, Christopher</author></authors></contributors><titles><title>Breaking Cell Phone Authentication: Vulnerabilities in AKA, IMS and Android</title><secondary-title>7th USENIX Workshop on Offensive Technologies</secondary-title></titles><periodical><full-title>7th USENIX Workshop on Offensive Technologies</full-title></periodical><pages>1-10</pages><keywords/><dates><year>2013</year></dates><urls><pdf-urls><url>internal-pdf://d75360e41eeb13a3ce22e5829369f2b283e5.pdf</url></pdf-urls></urls><abstract>Next generation IP telephony such as the IP Multime-dia Subsystem (IMS) framework has been used to create Internet calling services which let cellular users make and receive calls even when without cellular reception. In this paper, we look at the security aspects of Inter-net calling services and other systems that use the 3GPP Authentication and Key Agreement (AKA) protocol for authentication, particularly focusing on the context of cellular authentication in Android. We describe a new man-in-the-middle attack on T-Mobile's Wi-Fi Calling service, which is installed on millions of T-Mobile An-droid smartphones. We also describe three new attacks on AKA in the context of Internet calling and Android. We have worked with T-Mobile to fix the man-in-the-middle vulnerability, and we present clear and actionable solutions to fix the remaining vulnerabilities.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Mohamed, Manar</author><author>Shrestha, Babins</author><author>Saxena, Nitesh</author></authors></contributors><titles><title>SMASheD: Sniffing and Manipulating Android Sensor Data for Offensive Purposes</title><secondary-title>IEEE Transactions on Information Forensics and Security</secondary-title></titles><periodical><full-title>IEEE Transactions on Information Forensics and Security</full-title></periodical><pages>901-913</pages><volume>12</volume><issue>4</issue><keywords><keyword>Authentication</keyword><keyword>computer security</keyword><keyword>permissions</keyword></keywords><dates><year>2017</year></dates><isbn>9781450339353</isbn><electronic-resource-num>10.1109/TIFS.2016.2620278</electronic-resource-num><urls><pdf-urls><url>internal-pdf://d6459b0a30e53bf98b0640206b793b3fec56.pdf</url></pdf-urls></urls><abstract>Abstract—The current Android sensor security model either allows only restrictive read access to sensitive sensors (e.g., an app can only read its own touch data) or requires special install-time permissions (e.g., to read microphone, camera or GPS). Moreover, Android does not allow write access to any of the sensors. Sensingbased security and non-security applications therefore crucially rely upon the sanity of the Android sensor security model. In this paper, we show that such a model can be effectively circumvented. Specifically, we build SMASheD, a legitimate framework under the current Android ecosystem that can be used to stealthily sniff as well as manipulate many of the Android’s restricted sensors (even touch input). SMASheD exploits the Android Debug Bridge (ADB) functionality and enables a malicious app with only the INTERNET permission to read, and write to, multiple different sensor data files at will. SMASheD is the first framework, to our knowledge, that can sniff and manipulate protected sensors on unrooted Android devices, without user awareness, without constant device-PC connection and without the need to infect the PC. The primary contributions of this work are two-fold. First, we design and develop the SMASheD framework, and evaluate its effectiveness on multiple Android devices, including phones, watches and glasses. Second, as an offensive implication of the SMASheD framework, we introduce a wide array of potentially devastating attacks. Our attacks against the touchsensor range from accurately logging the touchscreen input (TouchLogger) to injecting touch events for accessing restricted sensors and resources, installing and granting special permissions to other malicious apps, accessing user accounts, and authenticating on behalf of the user — essentially almost doing whatever the device user can do (secretively). Our attacks against various physical sensors (motion, position and environmental) can subvert the functionality provided by numerous existing sensing-based security and non-security applications, including those used for (continuous) authentication, authorization, safety, and elderly care.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>As??voae, Irina Mariuca</author><author>Blasco, Jorge</author><author>Chen, Thomas M.</author><author>Kalutarage, Harsha Kumara</author><author>Muttik, Igor</author><author>Nguyen, Hoang Nga</author><author>Roggenbach, Markus</author><author>Shaikh, Siraj Ahmed</author></authors></contributors><titles><title>Towards automated Android app collusion detection</title><secondary-title>CEUR Workshop Proceedings</secondary-title></titles><periodical><full-title>CEUR Workshop Proceedings</full-title></periodical><pages>29-37</pages><volume>1575</volume><keywords/><dates><year>2016</year></dates><urls><pdf-urls><url>internal-pdf://e7a706b5c1db5fc87358e589662b73f9a9d8.pdf</url></pdf-urls></urls><abstract>Android OS supports multiple communication methods between apps. This opens the possibility to carry out threats in a collaborative fashion, c.f. the Soundcomber example from 2011. In this paper we provide a concise definition of collusion and report on a number of automated detection approaches, developed in co-operation with Intel Security.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Vila, José</author><author>Rodríguez, Ricardo J.</author></authors></contributors><titles><title>Practical experiences on NFC relay attacks with Android: Virtual pickpocketing revisited</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>87-103</pages><volume>9440</volume><keywords><keyword>Android</keyword><keyword>Contactless payment</keyword><keyword>NFC</keyword><keyword>Relay attacks</keyword><keyword>Security</keyword></keywords><dates><year>2015</year></dates><isbn>9783319248363</isbn><electronic-resource-num>10.1007/978-3-319-24837-0_6</electronic-resource-num><urls><pdf-urls><url>internal-pdf://e3c5929b14c73b37c3f19c5070ce530f7c19.pdf</url></pdf-urls></urls><abstract>Near Field Communication (NFC) is a short-range contact- less communication standard recently emerging as cashless payment tech- nology. However, NFC has been proved vulnerable to several threats, such as eavesdropping, data modification, and relay attacks. A relay at- tack forwards the entire wireless communication, thus communicating over larger distances. In this paper, we review and discuss feasibility limitations when performing these attacks in Google’s Android OS. We also perform an in-depth review of the Android implementation of the NFC stack. We show an experiment proving its feasibility using off-the- shelf NFC-enabled Android devices (i.e., no custom firmware nor root required). Thus, Android NFC-capable malicious software might appear before long to virtually pickpocket contactless payment cards within its proximity.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Fledel, Yuval</author><author>Shabtai, Asaf</author><author>Potashnik, Dennis</author><author>Elovici, Yuval</author></authors></contributors><titles><title>Google Android: An Updated Security Review</title><secondary-title>Mobile Computing, Applications, and Services</secondary-title></titles><periodical><full-title>Mobile Computing, Applications, and Services</full-title></periodical><pages>401-414</pages><volume>76</volume><keywords><keyword>Android</keyword><keyword>Google</keyword><keyword>Mobile devices</keyword><keyword>Security</keyword></keywords><dates><year>2012</year></dates><isbn>978-3-642-29335-1</isbn><electronic-resource-num>10.1007/978-3-642-29336-8_29</electronic-resource-num><urls><pdf-urls><url>internal-pdf://e1d27ff7bc73f9a6234fd82fb06868193243 (1).pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1007/978-3-642-29336-8_29</url></web-urls></urls><abstract>Among the most significant smartphone operating systems that have arisen recently is Google’s Android framework. Google’s Android is a software framework for mobile communication devices. The Android framework includes an operating system, middleware and a set of key applications. Designed as open, programmable, networked devices, Android is vulnerable to various types of threats. This paper provides a security assessment of the Android framework and the security mechanisms incorporated into it. In addition, a review of recent academic and commercial solutions in the area of smartphone security in general and Android in particular is presented.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhang, Hang</author><author>She, Dongdong</author><author>Qian, Zhiyun</author></authors></contributors><titles><title>Android Root and Its Providers: A Double-Edged Sword</title><secondary-title>Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS)</secondary-title></titles><periodical><full-title>Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS)</full-title></periodical><pages>1093-1104</pages><keywords><keyword>android root exploit</keyword><keyword>root provider</keyword></keywords><dates><year>2015</year></dates><isbn>978-1-4503-3832-5</isbn><electronic-resource-num>10.1145/2810103.2813714</electronic-resource-num><urls><pdf-urls><url>internal-pdf://e2eae37955f324e4cde113e7811a76724f67.pdf</url></pdf-urls><web-urls><url>http://doi.acm.org/10.1145/2810103.2813714</url></web-urls></urls><abstract>They analyze apps used to root. Type: (7 in depth) they are shifting from generic kernel to vendor-specific kernel/drivers, it is also possible to have exploits in library used by priviled processes, but most common is against privileged processes at application level. This app adapts known/unknown exploits to different versions to be very compatible. Some obfuscate, some retireve exploits from remote backed. In other cases an attacker can just get exploits on-demand from the backend, if obfuscation broken. Some offer PC side rooting. Big provider: exploits are remote, small: exploits are local. They find brand-new exploits (against device driver) and adapted one (becuase they would not work without adaptation). Some bypass selinux. Most exploits are not detect by antivirus even when unpackaged from the provider.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Karami, Mohammad</author><author>Elsabagh, Mohamed</author><author>Najafiborazjani, Parnian</author><author>Stavrou, Angelos</author></authors></contributors><titles><title>Behavioral Analysis of Android Applications Using Automated Instrumentation</title><secondary-title>2013 IEEE Seventh International Conference on Software Security and Reliability Companion</secondary-title></titles><periodical><full-title>2013 IEEE Seventh International Conference on Software Security and Reliability Companion</full-title></periodical><pages>182-187</pages><keywords/><dates><year>2013</year></dates><isbn>978-1-4799-2925-2</isbn><electronic-resource-num>10.1109/SERE-C.2013.35</electronic-resource-num><urls><pdf-urls><url>internal-pdf://e0dc960372907f7ba3e9ef65b4f77eada2a9.pdf</url></pdf-urls><web-urls><url>http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6616342</url></web-urls></urls><abstract>Google's Android operating system has become one the most popular operating system for hand-held devices. Dueto its ubiquitous use, open source nature and wide-spread popularity, it has become the target of recent mobile malware. In this paper, we present our efforts on effective security inspection mechanisms for identification of malicious applications for Android mobile applications. To achieve that, we developed a comprehensive software inspection framework. Moreover, to identify potential software reliability flaws and to triggermalware, we develop a transparent instrumentation system for automating user interactions with an Android application that does not require source code. Additionally, for run-time behavior analysis of an application, we monitor the I/O system calls generated the by application under monitoring to the underlying Linux kernel. As a case study, we present two Android malware samples found in the wild to experimentally evaluate the applicability of our proposed system for uncovering potential malicious activities.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Husted, Nathaniel</author><author>Myers, Steven</author></authors></contributors><titles><title>Why mobile-to-mobile wireless malware won't cause a storm</title><secondary-title>Proceedings of the 4th USENIX conference on Large-scale exploits and emergent threats</secondary-title></titles><periodical><full-title>Proceedings of the 4th USENIX conference on Large-scale exploits and emergent threats</full-title></periodical><pages>7</pages><keywords/><dates><year>2011</year></dates><urls><pdf-urls><url>internal-pdf://e0f937c8ec53ef2b23fc0be3fe0325793ed7 (1).pdf</url></pdf-urls><web-urls><url>http://0-dl.acm.org.alpha2.latrobe.edu.au/citation.cfm?id=1972441.1972451</url></web-urls></urls><abstract>The enhanced capabilities of smartphones are creating the opportunity\nfor new forms of malware to spread directly between mobile devices\nover short-range radio. This has been observed already in Bluetooth\nradios, and WiFi capabilities of smartphones provide an opportune\nnew spreading vector. The increasing complexity of phone operating\nsystems coupled with disclosed vulnerabilities suggest it is simply\na matter of time before WiFi based worms are possible. Works that\nhave considered this problem for Bluetooth suggest outbreaks would\nresult in epidemics [11,28,32]. We use traditional epidemiological\nmodeling tools and high-fidelity realistic human mobility data to\nstudy the spreading speed of this emergent threat. As opposed to\nother works, we take in to account the effects of exposure times,\nwireless propagation radii, and limited population susceptibility.\nImportantly, we find that lowering the susceptibility of the population\nto infection gives significant herd immunity as with biological infections,\nbut unlike traditional Internet worms, making such threats unlikely\nin the near to medium term. Specifically, with susceptibility rates\nbelow 10% the result is near total immunity of the population. We\nfind exposure times, and wireless transmission radii have no significant\neffect on outbreaks.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Ma, Siyuan</author><author>Tang, Zhushou</author><author>Xiao, Qiuyu</author><author>Liu, Jiafa</author><author>Duong, Tran Triet</author><author>Lin, Xiaodong</author><author>Zhu, Haojin</author></authors></contributors><titles><title>Detecting GPS information leakage in Android applications</title><secondary-title>GLOBECOM - IEEE Global Telecommunications Conference</secondary-title></titles><periodical><full-title>GLOBECOM - IEEE Global Telecommunications Conference</full-title></periodical><pages>826-831</pages><keywords/><dates><year>2013</year></dates><isbn>9781479913534</isbn><electronic-resource-num>10.1109/GLOCOM.2013.6831175</electronic-resource-num><urls><pdf-urls><url>internal-pdf://ddaa8b1f8b662b367024b868710297d57b6c.pdf</url></pdf-urls></urls><abstract>Location Based Service(LBS) becomes very popular in mobile computing platforms, such as Android. However, it could also leak highly personal information about the phone owner if used by Malwares. It has been witnessed that an increased number of malicious Android applications use LBS to obtain users' locations and transmit them to attackers without users' acknowledgement, causing users' privacy breach. In this paper, we first discuss the common way in which privacy can be breached in Android applications, and then define a classification algorithm for GPS information leakage. Furthermore, we develop a location information leakage detection tool named Brox. Brox is based on dalvik-opcode specification, which uses data flow analysis framework equipped with flow-sensitive, context-sensitive, and inter-procedure techniques to detect potential information leakage path in Android malicious applications. Specifically, Brox uses inter-procedure analysis and dependency calculation to understand the intention for each sensitive operation; by using reachable analysis, connection between privacy access operation and leakage operation is established. More importantly, Brox confirms whether the sending out operation contains location information or not using static taint analysis. At last, we classify the detection results with the help of identification of interaction and non-user interaction entry points in order to discover stealthy leaks of GPS location. The extensive experiments results show that the proposed method can effectively detect privacy leakage in Android applications with a high accuracy rate. © 2013 IEEE.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Lu, Long</author><author>Li, Zhichun</author><author>Wu, Zhenyu</author><author>Lee, Wenke</author><author>Jiang, Guofei</author></authors></contributors><titles><title>CHEX: statically vetting Android apps for component hijacking vulnerabilities</title><secondary-title>ACM Conference on Computer and Communications Security</secondary-title></titles><periodical><full-title>ACM Conference on Computer and Communications Security</full-title></periodical><pages>229-240</pages><keywords><keyword>app splitting</keyword><keyword>component hijacking vulnerability</keyword><keyword>static analysis</keyword></keywords><dates><year>2012</year></dates><isbn>9781450316514</isbn><electronic-resource-num>10.1145/2382196.2382223</electronic-resource-num><urls><pdf-urls><url>internal-pdf://ec1cbc1d9241489c27d9b0001cdaef676480.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2382196.2382223</url></web-urls></urls><abstract>An enormous number of apps have been developed for Android in recent years, making it one of the most popular mobile operating systems. However, the quality of the booming apps can be a concern [4]. Poorly engineered apps may contain security vulnerabilities that can severally undermine users' security and privacy. In this paper, we study a general category of vulnerabilities found in Android apps, namely the component hijacking vulnerabilities. Several types of previously reported app vulnerabilities, such as permission leakage, unauthorized data access, intent spoofing, and etc., belong to this category. We propose CHEX, a static analysis method to automatically vet Android apps for component hijacking vulnerabilities. Modeling these vulnerabilities from a data-flow analysis perspective, CHEX analyzes Android apps and detects possible hijack-enabling flows by conducting low-overhead reachability tests on customized system dependence graphs. To tackle analysis challenges imposed by Android's special programming paradigm, we employ a novel technique to discover component entry points in their completeness and introduce app splitting to model the asynchronous executions of multiple entry points in an app. We prototyped CHEX based on Dalysis, a generic static analysis framework that we built to support many types of analysis on Android app bytecode. We evaluated CHEX with 5,486 real Android apps and found 254 potential component hijacking vulnerabilities. The median execution time of CHEX on an app is 37.02 seconds, which is fast enough to be used in very high volume app vetting and testing scenarios.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhang, Xiaolu</author><author>Breitinger, Frank</author><author>Baggili, Ibrahim</author></authors></contributors><titles><title>Rapid Android Parser for Investigating DEX files (RAPID)</title><secondary-title>Digital Investigation</secondary-title></titles><periodical><full-title>Digital Investigation</full-title></periodical><pages>28-39</pages><volume>17</volume><keywords><keyword>Android malware</keyword><keyword>DEX</keyword><keyword>Dalvik EXecutable</keyword><keyword>Decompiler</keyword><keyword>Parsing android applications</keyword><keyword>Smali code/Baksmali</keyword></keywords><dates><year>2016</year></dates><electronic-resource-num>10.1016/j.diin.2016.03.002</electronic-resource-num><urls><pdf-urls><url>internal-pdf://df6111cebc1a8302bd242cfc391d95d52931.pdf</url></pdf-urls></urls><abstract>Android malware is a well-known challenging problem and many researchers/vendors/practitioners have tried to address this issue through application analysis techniques. In order to analyze Android applications, tools decompress APK files and extract relevant data from the Dalvik EXecutable (DEX) files. To acquire the data, investigators either use decompiled intermediate code generated by existing tools, e.g., Baksmali or Dex2jar or write their own parsers/dissemblers. Thus, they either need additional time because of decompiling the application into an intermediate representation and then parsing text files, or they reinvent the wheel by implementing their own parsers. In this article, we present Rapid Android Parser for Investigating DEX files (RAPID) which is an open source and easy-to-use Java library for parsing DEX files. RAPID comes with well-documented APIs which allow users to query data directly from the DEX binary files. Our experiments reveal that RAPID outperforms existing approaches in terms of runtime efficiency, provides better reliability (does not crash) and can support dynamic analysis by finding critical offsets. Notably, the processing time for our sample set of 22.35 GB was only 1.5 h with RAPID while the traditional approaches needed about 23 h (parsing and querying).</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Dini, Gianluca</author><author>Martinelli, Fabio</author><author>Matteucci, Ilaria</author><author>Petrocchi, Marinella</author><author>Saracino, Andrea</author><author>Sgandurra, Daniele</author></authors></contributors><titles><title>A multi-criteria-based evaluation of android applications</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>67-82</pages><volume>7711 LNCS</volume><issue>Dvm</issue><keywords/><dates><year>2012</year></dates><isbn>9783642353703</isbn><electronic-resource-num>10.1007/978-3-642-35371-0_7</electronic-resource-num><urls><pdf-urls><url>internal-pdf://eba7830f81b6cc420da40e93f49442da4e93.pdf</url></pdf-urls></urls><abstract>Android users can face the risk of downloading and installing bad applications on their devices. In fact, many applications may either hide malware, or their expected behavior do not fully follow the user’s expectation. This happens because, at install-time, even if the user is warned with the potential security threat of the application, she often skips this alert message. On Android this is due to the complexity of the permission system, which may be tricky to fully understand. We propose a multi-criteria evaluation of Android applications, to help the user to easily understand the trustworthiness degree of an application, both from a security and a functional side. We validate our approach by testing it on more than 180 real applications found either on official and unofficial markets.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Fang, Zheran</author><author>Han, Weili</author><author>Li, Dong</author><author>Guo, Zeqing</author><author>Guo, Danhao</author><author>Wang, Xiaoyang Sean</author><author>Chen, Hao</author></authors></contributors><titles><title>revDroid : Code Analysis of the Side Effects after Dynamic Permission Revocation of Android Apps</title><secondary-title>ASIA CCS '16 Proceedings of the 11th ACM on Asia Conference on Computer and Communications Security</secondary-title></titles><periodical><full-title>ASIA CCS '16 Proceedings of the 11th ACM on Asia Conference on Computer and Communications Security</full-title></periodical><pages>747-758</pages><keywords><keyword>android security</keyword><keyword>permission over-claim</keyword><keyword>permission revo-</keyword></keywords><dates><year>2016</year></dates><isbn>9781450342339</isbn><electronic-resource-num>10.1145/2897845.2897914</electronic-resource-num><urls><pdf-urls><url>internal-pdf://ecb35f23594136e553d8e69065c4e6161398.pdf</url></pdf-urls></urls><abstract>© 2016 ACM.Dynamic revocation of permissions of installed Android applications has been gaining popularity, because of the increasing concern of security and privacy in the Android platform. However, applications often crash or misbehave when their permissions are revoked, rendering applications completely unusable. Even though Google has officially introduced the new permission mechanism in Android 6.0 to explicitly support dynamic permission revocation, the issue still exists. In this paper, we conduct an empirical study to understand the latest application practice post Android 6.0. Specifically, we design a practical tool, referred to as revDroid, to help us to empirically analyze how often the undesirable side effects, especially application crash, can occur in off-the-shelf Android applications. From the analysis of 248 popular applications from Google Play Store, revDroid finds out that 70% applications and 46% permission-relevant calls do not appropriately catch exceptions caused by permission revocation, while third-party libraries pay much more attention to permission revocation. We also use revDroid to analyze 132 recent malware samples. The result shows that only 27% malwares and 36% permission-relevant API calls of malwares fail to consider the permission revocation. In fact, many of them perform specialized handling of permission revocation to keep the core malicious logic running. Finally, revDroid can be used to help developers uncover the unhan-dled permission revocations during development time and greatly improve the application quality.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Salovaara, Antti</author><author>Lyytinen, Kalle</author><author>Penttinen, Esko</author></authors></contributors><titles><title>Flexibility vs. structure: How to manage reliably continuously emerging threats in malware protection</title><secondary-title>Proceedings of the Annual Hawaii International Conference on System Sciences</secondary-title></titles><periodical><full-title>Proceedings of the Annual Hawaii International Conference on System Sciences</full-title></periodical><pages>4980-4989</pages><volume>2015-March</volume><keywords><keyword>Flexibility</keyword><keyword>High reliability organizations</keyword><keyword>Malware</keyword><keyword>Structure</keyword></keywords><dates><year>2015</year></dates><isbn>9781479973675</isbn><electronic-resource-num>10.1109/HICSS.2015.590</electronic-resource-num><urls><pdf-urls><url>internal-pdf://eb2a332e9c6cf25fe7f6f3092807f6d90621.pdf</url></pdf-urls></urls><abstract>High Reliability Organizations (HROs) operate in risky and safety-critical environments where failure avoidance overrides cost efficiency and other traditional performance measures. Research on military, air traffic control, and similar domains has identified five key HRO characteristics: preoccupation with failure, reluctance to simplify interpretations, sensitivity to operations, commitment to resilience, and under specification of structures. There are fewer studies on digital technologies' role in HRO operations. We address this gap with a case study in a leading malware (e.g., Anti-virus) protection firm, which must establish high reliability in its digital operations. While the daily influx of millions of samples and the continuous mutation of malware attacks requires large-scale automation in malware protection, it also calls for continuous fine-tuning and re-engineering through human intervention. We examine the constant balancing of automated and human effort driven by the preoccupation with potential hidden vulnerabilities. This provides a starting point for conceptualizing &quot;digital HROs&quot; as a new research domain for organizational research.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Meyer, Ulrike</author></authors></contributors><titles><title>Messing with Android ’ s Permission Model</title></titles><periodical/><keywords/><dates><year>2012</year></dates><isbn>9780769547459</isbn><electronic-resource-num>10.1109/TrustCom.2012.203</electronic-resource-num><urls><pdf-urls><url>internal-pdf://e49ee6427dccd3e59a062575fded356407ea (1).pdf</url></pdf-urls></urls></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhou, Xiaoyong</author><author>Demetriou, Soteris</author><author>He, Dongjing</author><author>Naveed, Muhammad</author><author>Pan, Xiaorui</author><author>Wang, XiaoFeng</author><author>Gunter, Carl a.</author><author>Nahrstedt, Klara</author></authors></contributors><titles><title>Identity, location, disease and more: inferring your secrets from android public resources</title><secondary-title>Proceedings of the 2013 ACM SIGSAC conference on Computer &amp; communications security - CCS '13</secondary-title></titles><periodical><full-title>Proceedings of the 2013 ACM SIGSAC conference on Computer &amp; communications security - CCS '13</full-title></periodical><pages>1017-1028</pages><keywords><keyword>information leaks</keyword><keyword>mobile security</keyword><keyword>privacy</keyword></keywords><dates><year>2013</year></dates><isbn>9781450324779</isbn><electronic-resource-num>10.1145/2508859.2516661</electronic-resource-num><urls><pdf-urls><url>internal-pdf://e121e39818196b33bb4b240c02a82772b42f.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2508859.2516661</url></web-urls></urls><abstract>The design of Android is based on a set of unprotected shared resources, including those inherited from Linux (e.g., Linux public directories). However, the dramatic development in Android applications (app for short) makes available a large amount of public background information (e.g., social networks, public online services), which can potentially turn such originally harmless resource sharing into serious privacy breaches. In this paper, we report our work on this important yet understudied problem. We discovered three unexpected channels of information leaks on Android: per-app data-usage statistics, ARP information, and speaker status (on or off). By monitoring these channels, an app without any permission may acquire sensitive information such as smartphone user's identity, the disease condition she is interested in, her geo-locations and her driving route, from top-of-the-line Android apps. Furthermore, we show that using existing and new techniques, this zero-permission app can both determine when its target (a particular application) is running and send out collected data stealthily to a remote adversary. These findings call into question the soundness of the design assumptions on shared resources, and demand effective solutions. To this end, we present a mitigation mechanism for achieving a delicate balance between utility and privacy of such resources.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Damopoulos, Dimitrios</author><author>Kambourakis, Georgios</author><author>Gritzalis, Stefanos</author><author>Park, Sang Oh</author></authors></contributors><titles><title>Exposing mobile malware from the inside (or what is your mobile app really doing?)</title><secondary-title>Peer-to-Peer Networking and Applications</secondary-title></titles><periodical><full-title>Peer-to-Peer Networking and Applications</full-title></periodical><pages>687-697</pages><volume>7</volume><issue>4</issue><keywords><keyword>Behavior-based detection</keyword><keyword>Dynamic analysis</keyword><keyword>Malware</keyword><keyword>Smartphone</keyword><keyword>iOS</keyword></keywords><dates><year>2014</year></dates><isbn>1936-6442</isbn><electronic-resource-num>10.1007/s12083-012-0179-x</electronic-resource-num><urls><pdf-urls><url>internal-pdf://e61219a3d42264241e65bef5b6be4e3ad60e.pdf</url></pdf-urls></urls><abstract>It is without a doubt that malware especially designed for modern mobile platforms is rapidly becoming a serious threat. The problem is further multiplexed by the growing convergence of wired, wireless and cellular networks, since virus writers can now develop sophisticated malicious software that is able to migrate across network domains. This is done in an effort to exploit vulnerabilities and services specific to each network. So far, research in dealing with this risk has concentrated on the Android platform and mainly considered static solutions rather than dynamic ones. Compelled by this fact, in this paper, we contribute a fully-fledged tool able to dynamically analyze any iOS software in terms of method invocation (i.e., which API methods the application invokes and under what order), and produce exploitable results that can be used to manually or automatically trace software’s behavior to decide if it contains malicious code or not. By employing real life malware we assessed our tool both manually, as well as, via heuristic techniques and the results we obtained seem highly accurate in detecting malicious code.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Huang, Jianjun</author><author>Li, Zhichun</author><author>Xiao, Xusheng</author><author>Wu, Zhenyu</author><author>Lu, Kangjie</author><author>Zhang, Xiangyu</author><author>Jiang, Guofei</author></authors></contributors><titles><title>SUPOR: Precise and Scalable Sensitive User Input Detection for Android Apps</title><secondary-title>24th USENIX Security Symposium (USENIX Security 15)</secondary-title></titles><periodical><full-title>24th USENIX Security Symposium (USENIX Security 15)</full-title></periodical><pages>977-992</pages><keywords/><dates><year>2015</year></dates><isbn>978-1-931971-232</isbn><urls><pdf-urls><url>internal-pdf://e81fe800e622da3915fbc1b1fec10c922d77 (1).pdf</url></pdf-urls><web-urls><url>https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/huang</url></web-urls></urls><abstract>While smartphones and mobile apps have been an essential part of our lives, privacy is a serious concern. Previous mobile privacy related research efforts have largely focused on predefined known sources managed by smartphones. Sensitive user inputs through UI (User Interface), another information source that may contain a lot of sensitive information, have been mostly neglected. In this paper, we examine the possibility of scalably detecting sensitive user inputs from mobile apps. In particular, we design and implement SUPOR, a novel static analysis tool that automatically examines the UIs to identify sensitive user inputs containing critical user data, such as user credentials, finance, and medical data. SUPOR enables existing privacy analysis approaches to be applied on sensitive user inputs as well. To demonstrate the usefulness of SUPOR, we build a system that detects privacy disclosures of sensitive user inputs by combining SUPOR with off-the-shelf static taint analysis We apply the system to 16,000 popular Android apps, and conduct a measurement study on the privacy disclosures. SUPOR achieves an average precision of 97.3% and an average recall of 97.3% for sensitive user input identification. SUPOR finds 355 apps with privacy disclosures and the false positive rate is 8.7%. We discover interesting cases related to national ID, username/password, credit card and health information.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Rahman, Mahmudur</author><author>Rahman, Mizanur</author><author>Carbunar, Bogdan</author><author>Chau, Duen Horng</author></authors></contributors><titles><title>FairPlay: Fraud and Malware Detection in Google Play</title></titles><periodical/><pages>1329-1342</pages><volume>29</volume><issue>6</issue><keywords/><dates><year>2017</year></dates><isbn>9781510828117</isbn><urls><pdf-urls><url>internal-pdf://f7e05cf28028ba9ed127d73c50f0abdb9fb2.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1703.02002</url></web-urls></urls><abstract>Fraudulent behaviors in Google Android app market fuel search rank abuse and malware proliferation. We present FairPlay, a novel system that uncovers both malware and search rank fraud apps, by picking out trails that fraudsters leave behind. To identify suspicious apps, FairPlay PCF algorithm correlates review activities and uniquely combines detected review relations with linguistic and behavioral signals gleaned from longitudinal Google Play app data. We contribute a new longitudinal app dataset to the community, which consists of over 87K apps, 2.9M reviews, and 2.4M reviewers, collected over half a year. FairPlay achieves over 95% accuracy in classifying gold standard datasets of malware, fraudulent and legitimate apps. We show that 75% of the identified malware apps engage in search rank fraud. FairPlay discovers hundreds of fraudulent apps that currently evade Google Bouncer detection technology, and reveals a new type of attack campaign, where users are harassed into writing positive reviews, and install and review other apps.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Hou, Shifu</author><author>Ye, Yanfang</author><author>Song, Yangqiu</author><author>Abdulhayoglu, Melih</author></authors></contributors><titles><title>HinDroid</title><secondary-title>Proceedings of the 23rd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining  - KDD '17</secondary-title></titles><periodical><full-title>Proceedings of the 23rd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining  - KDD '17</full-title></periodical><pages>1507-1515</pages><keywords><keyword>- Artiï¬cial Intelligence  -&gt; General</keyword><keyword>- Database applications  -&gt; Data mining</keyword><keyword>- Security and Protection  -&gt; Invasive Software</keyword><keyword>acm reference format</keyword><keyword>android malware detection</keyword><keyword>application programming interface</keyword><keyword>calls</keyword><keyword>heterogeneous information network</keyword><keyword>relation analysis</keyword></keywords><dates><year>2017</year></dates><isbn>9781450348874</isbn><electronic-resource-num>10.1145/3097983.3098026</electronic-resource-num><urls><pdf-urls><url>internal-pdf://f4a4a2ab960cd73c23b5d068a0403876843f(1).pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=3097983.3098026</url></web-urls></urls></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sabt, Mohamed</author><author>Traorè, Jacques</author></authors></contributors><titles><title>Breaking into the keystore: A practical forgery attack against android keystore</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>531-548</pages><volume>9879 LNCS</volume><issue>Esorics</issue><keywords><keyword>Android keystore</keyword><keyword>Authenticated encryption</keyword><keyword>Integrity</keyword></keywords><dates><year>2016</year></dates><isbn>9783319457406</isbn><electronic-resource-num>10.1007/978-3-319-45741-3_27</electronic-resource-num><urls><pdf-urls><url>internal-pdf://f9f4901091ce5f005899cacb15d12ab599e0.pdf</url></pdf-urls></urls><abstract>We analyze the security of Android KeyStore, a system service whose purpose is to shield users credentials and cryptographic keys. The KeyStore protects the integrity and the confidentiality of keys by using a particular encryption scheme. Our main results are twofold. First, we formally prove that the used encryption scheme does not pro- vide integrity, which means that an attacker is able to undetectably modify the stored keys. Second, we exploit this flaw to define a forgery attack breaching the security guaranteed by the KeyStore. In particular, our attack allows a malicious application to make mobile apps to unwit- tingly perform secure protocols using weak keys. The threat is concrete: the attacker goes undetected while compromising the security of users. Our findings highlight an important fact: intuition often goes wrong when security is concerned. Unfortunately, system designers still tend to choose cryptographic schemes not for their proved security but for their appar- ent simplicity. We show, once again, that this is not a good choice, since it usually results in severe consequences for the whole underlying system. Keywords:</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wang, Wei</author><author>Wang, Xing</author><author>Feng, Dawei</author><author>Liu, Jiqiang</author><author>Han, Zhen</author><author>Zhang, Xiangliang</author></authors></contributors><titles><title>Exploring permission-induced risk in android applications for malicious application detection</title><secondary-title>IEEE Transactions on Information Forensics and Security</secondary-title></titles><periodical><full-title>IEEE Transactions on Information Forensics and Security</full-title></periodical><pages>1869-1882</pages><volume>9</volume><issue>11</issue><keywords><keyword>Android security</keyword><keyword>Android system</keyword><keyword>Intrusion detection</keyword><keyword>Malware detection</keyword><keyword>Permission usage analysis</keyword></keywords><dates><year>2014</year></dates><isbn>1556-6013 VO - 9</isbn><electronic-resource-num>10.1109/TIFS.2014.2353996</electronic-resource-num><urls><pdf-urls><url>internal-pdf://f1ba6c96801d103ac6e9b51e08be132abe63 (1).pdf</url></pdf-urls></urls><abstract>Android has been a major target of malicious applications (malapps). How to detect and keep the malapps out of the app markets is an ongoing challenge. One of the central design points of Android security mechanism is permission control that restricts the access of apps to core facilities of devices. However, it imparts a significant responsibility to the app developers with regard to accurately specifying the requested permissions and to the users with regard to fully understanding the risk of granting certain combinations of permissions. Android permissions requested by an app depict the app's behavioral patterns. In order to help understanding Android permissions, in this paper, we explore the permission-induced risk in Android apps on three levels in a systematic manner. First, we thoroughly analyze the risk of an individual permission and the risk of a group of collaborative permissions. We employ three feature ranking methods, namely, mutual information, correlation coefficient, and T-test to rank Android individual permissions with respect to their risk. We then use sequential forward selection as well as principal component analysis to identify risky permission subsets. Second, we evaluate the usefulness of risky permissions for malapp detection with support vector machine, decision trees, as well as random forest. Third, we in depth analyze the detection results and discuss the feasibility as well as the limitations of malapp detection based on permission requests. We evaluate our methods on a very large official app set consisting of 310 926 benign apps and 4868 real-world malapps and on a third-party app sets. The empirical results show that our malapp detectors built on risky permissions give satisfied performance (a detection rate as 94.62% with a false positive rate as 0.6%), catch the malapps' essential patterns on violating permission access regulations, and are universally applicable to unknown malapps (detection rate as 74.03%).</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhang, Xiao</author><author>Du, Wenliang</author></authors></contributors><titles><title>Attacks on Android clipboard</title><secondary-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</secondary-title></titles><periodical><full-title>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</full-title></periodical><pages>72-91</pages><volume>8550 LNCS</volume><keywords/><dates><year>2014</year></dates><isbn>9783319085081</isbn><electronic-resource-num>10.1007/978-3-319-08509-8_5</electronic-resource-num><urls><pdf-urls><url>internal-pdf://f6c6037aeaaefd78c8e01bcd5de999c35fcf.pdf</url></pdf-urls></urls><abstract>Abstract. In this paper, we perform a thorough study on the risks imposed by the globally accessible Android Clipboard. Based on the risk assessment, we formulate a series of attacks and categorize them into two groups, i.e., manipulation and stealing. Clipboard data manipulation may lead to common code injection attacks, like JavaScript injection and command injection. Furthermore, it can also cause phishing attacks, including web phishing and app phishing. Data stealing happens when sensitive data copied into the clipboard is accessed by malicious applications. For each category of attack, we analyze a large number of candidate apps and show multiple [...]</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Ghallali, M</author><author>Ouadghiri, D El</author></authors></contributors><titles><title>Mobile phones security: the spread of malware via MMS and Bluetooth, prevention methods</title><secondary-title>Proceedings of the 9th …</secondary-title></titles><periodical><full-title>Proceedings of the 9th …</full-title></periodical><pages>256-259</pages><volume>2013</volume><issue>Figure 2</issue><keywords><keyword>bluetooth infection</keyword><keyword>in mobile phones</keyword><keyword>malwares</keyword><keyword>mms infection</keyword><keyword>mobile phones security</keyword><keyword>state of the art</keyword></keywords><dates><year>2011</year></dates><isbn>9781450307857</isbn><electronic-resource-num>10.1145/2095697.2095750</electronic-resource-num><urls><pdf-urls><url>internal-pdf://fb20a50dabcb64a84702b43b27eda6dca8ee (1).pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?id=2095750</url></web-urls></urls></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Damopoulos, Dimitrios</author><author>Kambourakis, Georgios</author><author>Gritzalis, Stefanos</author></authors></contributors><titles><title>iSAM: An iPhone stealth airborne malware</title><secondary-title>IFIP Advances in Information and Communication Technology</secondary-title></titles><periodical><full-title>IFIP Advances in Information and Communication Technology</full-title></periodical><pages>17-28</pages><volume>354 AICT</volume><keywords><keyword>Airborne</keyword><keyword>Jailbreak</keyword><keyword>Malware</keyword><keyword>Rootkit</keyword><keyword>Stealth</keyword><keyword>iOS</keyword><keyword>iPhone</keyword></keywords><dates><year>2011</year></dates><isbn>9783642214233</isbn><electronic-resource-num>10.1007/978-3-642-21424-0_2</electronic-resource-num><urls><pdf-urls><url>internal-pdf://f3b1758bcbf162b11bb14041a654314c3faa.pdf</url></pdf-urls></urls><abstract>Modern and powerful mobile devices comprise an attractive target for any potential intruder or malicious code. The usual goal of an attack is to acquire user's sensitive data or compromise the device so as to use it as a stepping stone (or bot) to unleash a number of attacks to other targets. In this paper, we focus on the popular iPhone device. We create a new stealth and airborne malware namely iSAM able to wirelessly infect and self-propagate to iPhone devices. iSAM incorporates six different malware mechanisms, and is able to connect back to the iSAM bot master server to update its programming logic or to obey commands and unleash a synchronized attack. Our analysis unveils the internal mechanics of iSAM and discusses the way all iSAM components contribute towards achieving its goals. Although iSAM has been specifically designed for iPhone it can be easily modified to attack any iOS-based device.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Centre, Philips</author><author>Technology, Industrial</author></authors></contributors><titles><title>1 Introduction</title></titles><periodical/><pages>1-5</pages><keywords/><dates><year>2010</year></dates><isbn>9783527409402</isbn><urls><pdf-urls><url>internal-pdf://fbd983a4dc9770dd58f44974683835500990.pdf</url></pdf-urls></urls></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Tse, Daniel W K</author><author>Jin, X X</author><author>Pan, Y N</author><author>Hu, Y Q</author><author>Lin, F</author><author>Liu, S Y</author></authors></contributors><titles><title>Cross-Sectional Examination on Android Security</title><secondary-title>PACIS 2014 Proceedings</secondary-title></titles><periodical><full-title>PACIS 2014 Proceedings</full-title></periodical><keywords><keyword>android security</keyword><keyword>google</keyword><keyword>mobile carrier</keyword><keyword>third-party security applications</keyword><keyword>user behavior</keyword></keywords><dates><year>2014</year></dates><urls><pdf-urls><url>internal-pdf://fa6ee20e36f5a1455d7e9f8eca4d1a3eed7f (1).pdf</url></pdf-urls><web-urls><url>http://aisel.aisnet.org/pacis2014/274</url></web-urls></urls></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Conference Proceedings">3</ref-type><contributors><authors><author>Emirates, United Arab</author></authors></contributors><titles><title>Preface</title><secondary-title>2012 5th International Conference on New Technologies, Mobility and Security (NTMS)</secondary-title></titles><periodical><full-title>2012 5th International Conference on New Technologies, Mobility and Security (NTMS)</full-title></periodical><pages>i-i</pages><issue>April</issue><keywords/><dates><year>2012</year></dates><isbn>978-1-4673-0229-6</isbn><electronic-resource-num>10.1109/NTMS.2012.6203934</electronic-resource-num><urls><pdf-urls><url>internal-pdf://ed3ed51703a42338cdb183216e0d0473d037.pdf</url></pdf-urls><web-urls><url>http://ieeexplore.ieee.org/document/6203934/</url></web-urls></urls><abstract>The proceedings contain 70 papers. The topics discussed include: a comparison of forensic acquisition techniques for android devices: a case study investigation of or web browsing sessions; a cross-layer based packet scheduling scheme for multimedia traffic in satellite LTE networks; a distributed joint channel and slot assignment for convergecast in wireless sensor networks; a factorial space for a system-based detection of botcloud activity; a layer 2 wired-wireless interworking model to achieve throughput improvement; a new business model and architecture for context-aware applications provisioning in the cloud; a reasoning system for composition verification and security validation; a secure client side deduplication scheme in cloud storage environments; and a self-disclosure framework for social mobile applications.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Rashidi, Bahman</author><author>Fung, Carol</author><author>Vu, Tam</author></authors></contributors><titles><title>Dude, ask the experts!: Android resource access permission recommendation with RecDroid</title><secondary-title>Proceedings of the 2015 IFIP/IEEE International Symposium on Integrated Network Management, IM 2015</secondary-title></titles><periodical><full-title>Proceedings of the 2015 IFIP/IEEE International Symposium on Integrated Network Management, IM 2015</full-title></periodical><pages>296-304</pages><keywords/><dates><year>2015</year></dates><isbn>9783901882760</isbn><electronic-resource-num>10.1109/INM.2015.7140304</electronic-resource-num><urls><pdf-urls><url>internal-pdf://efe1b8826366a591492d79667daa417f3c11.pdf</url></pdf-urls></urls><abstract>With the exponential growth of smartphone apps, it is prohibitive for apps market places, such as Google App Store for example, to thoroughly verify if an app is legitimate or malicious. As a result, mobile users are left to decide for themselves whether an app is safe to use. Even worse, recent studies have shown that most apps in markets request to collect data irrelevant to the main functions of the apps, which could cause leaking of private information or inefficient use of mobile resources. To assist users to make a right decision as for whether a permission request should be accepted, we propose RecDroid. RecDroid is a crowdsourcing recommendation framework that collects apps' permission requests and users' permission responses, from which a ranking algorithm is used to evaluate the expertise level of users and a voting algorithm is used to compute an appropriate response to the permission request (accept or reject). To bootstrap the recommendation system, RecDroid relies on a small set of seed expert users that could make reliable recommendations for a small set of application. Our evaluation results show that RecDroid can provide high accuracy and satisfying coverage with careful selection of parameters. The results also show that a small coverage from seed experts is sufficient for RecDroid to cover the majority of the app requests.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Fratantonio, Yanick</author><author>Bianchi, Antonio</author><author>Robertson, William</author><author>Kirda, Engin</author><author>Kruegel, Christopher</author><author>Vigna, Giovanni</author></authors></contributors><titles><title>TriggerScope: Towards Detecting Logic Bombs in Android Applications</title><secondary-title>Proceedings - 2016 IEEE Symposium on Security and Privacy, SP 2016</secondary-title></titles><periodical><full-title>Proceedings - 2016 IEEE Symposium on Security and Privacy, SP 2016</full-title></periodical><pages>377-396</pages><keywords><keyword>Mobile Security</keyword><keyword>Static Analysis</keyword></keywords><dates><year>2016</year></dates><isbn>9781509008247</isbn><electronic-resource-num>10.1109/SP.2016.30</electronic-resource-num><urls><pdf-urls><url>internal-pdf://f04102587b50387a62a38e0e706b1c8d1f7f.pdf</url></pdf-urls></urls><abstract>—Android is the most popular mobile platform today, and it is also the mobile operating system that is most heavily targeted by malware. Existing static analyses are effective in detecting the presence of most malicious code and unwanted information flows. However, certain types of malice are very dif-ficult to capture explicitly by modeling permission sets, suspicious API calls, or unwanted information flows. One important type of such malice is malicious application logic, where a program (often subtly) modifies its outputs or per-forms actions that violate the expectations of the user. Malicious application logic is very hard to identify without a specification of the &quot; normal, &quot; expected functionality of the application. We refer to malicious application logic that is executed, or triggered, only under certain (often narrow) circumstances as a logic bomb. This is a powerful mechanism that is commonly employed by targeted malware, often used as part of APTs and state-sponsored attacks: in fact, in this scenario, the malware is designed to target specific victims and to only activate under certain circumstances. In this paper, we make a first step towards detecting logic bombs. In particular, we propose trigger analysis, a new static analysis technique that seeks to automatically identify triggers in Android applications. Our analysis combines symbolic execu-tion, path predicate reconstruction and minimization, and inter-procedural control-dependency analysis to enable the precise detection and characterization of triggers, and it overcomes several limitations of existing approaches. We implemented a prototype of our analysis, called TRIG-GERSCOPE, and we evaluated it over a large corpus of 9,582 benign apps from the Google Play Store and a set of trigger-based malware, including the recently-discovered HackingTeam's RCSAndroid advanced malware. Our system is capable of automatically identify several interesting time-, location-, and SMS-related triggers, is affected by a low false positive rate (0.38%), and it achieves 100% detection rate on the malware set. We also show how existing approaches, specifically when tasked to detect logic bombs, are affected by either a very high false positive rate or false negative rate. Finally, we discuss the logic bombs identified by our analysis, including two previously-unknown backdoors in benign apps.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bhattacharya, Prabir</author><author>Yang, Li</author><author>Guo, Minzhe</author><author>Qian, Kai</author><author>Yang, Ming</author></authors></contributors><titles><title>Learning Mobile Security with Labware</title><secondary-title>IEEE Security &amp; Privacy</secondary-title></titles><periodical><full-title>IEEE Security &amp; Privacy</full-title></periodical><pages>69-72</pages><volume>12</volume><issue>1</issue><keywords><keyword>Android</keyword><keyword>Android (operating system)</keyword><keyword>Android devices</keyword><keyword>Androids</keyword><keyword>Humanoid robots</keyword><keyword>Mobile communication</keyword><keyword>Mobile handsets</keyword><keyword>Network security</keyword><keyword>attackers</keyword><keyword>best practices</keyword><keyword>classroom settings</keyword><keyword>computer aided instruction</keyword><keyword>computer crime</keyword><keyword>computer science education</keyword><keyword>computer security</keyword><keyword>education needs</keyword><keyword>educational activities</keyword><keyword>educational institutions</keyword><keyword>emerging industry</keyword><keyword>information security education</keyword><keyword>labware</keyword><keyword>mobile computing</keyword><keyword>mobile devices prevalence</keyword><keyword>mobile security</keyword><keyword>mobile security learning</keyword><keyword>mobile threats</keyword><keyword>mobile-security education</keyword><keyword>mobile-security personnel shortage</keyword><keyword>school computing curriculum</keyword><keyword>smart mobile devices</keyword><keyword>smart phones</keyword><keyword>student interests</keyword><keyword>student learning</keyword><keyword>student self-efficacy</keyword><keyword>telecommunication computing</keyword><keyword>telecommunication engineering education</keyword><keyword>telecommunication security</keyword></keywords><dates><year>2014</year></dates><isbn>9781450318686</isbn><electronic-resource-num>10.1109/MSP.2014.6</electronic-resource-num><urls><pdf-urls><url>internal-pdf://f2412dbf230ab41fdf6b3ab53676d98abddf (2).pdf</url></pdf-urls><web-urls><url>http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6756847</url></web-urls></urls><abstract>As smart mobile devices become increasingly popular, so do the incentives for attackers. Mobile devices' prevalence and mobile threats' rapid growth have resulted in a shortage of mobile-security personnel. We need educational activities to promote mobile-security education and meet the emerging industry and education needs. However, mobile security is a relatively weak area in most schools' computing curriculum. To remedy this, educators are exploring an approach to mobile-security education that exploits the benefits of mobile devices and best practices in information security education. The approach aims to promote students' interests and increase their self-efficacy. To improve student learning, the educators developed a collection of labware using Android devices and tested it in classroom settings.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Mahmood, Riyadh</author><author>Esfahani, Naeem</author><author>Kacem, Thabet</author><author>Mirzaei, Nariman</author><author>Malek, Sam</author><author>Stavrou, Angelos</author></authors></contributors><titles><title>A Whitebox Approach for Automated Security Testing of Android Applications on the Cloud</title><secondary-title>Proceedings of the 2012 IEEE 6th International Conference on Software Security and Reliability Companion, SERE-C 2012</secondary-title></titles><periodical><full-title>Proceedings of the 2012 IEEE 6th International Conference on Software Security and Reliability Companion, SERE-C 2012</full-title></periodical><pages>35-36</pages><keywords><keyword>-android</keyword><keyword>program analysis</keyword><keyword>security testing</keyword></keywords><dates><year>2012</year></dates><isbn>978-1-4673-1822-8</isbn><electronic-resource-num>10.1109/SERE-C.2012.39</electronic-resource-num><urls><pdf-urls><url>internal-pdf://f336042ac299430728be10dd63bd57680081.pdf</url></pdf-urls><web-urls><url>http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6228986</url></web-urls></urls><abstract>By changing the way software is delivered to end-users, markets for mobile apps create a false sense of security: apps are downloaded from a market that can potentially be regulated. In practice, this is far from truth and instead, there has been evidence that security is not one of the primary design tenets for the mobile app stores. Recent studies have indicated mobile markets are harboring apps that are either malicious or vulnerable leading to compromises of millions of devices. The key technical obstacle for the organizations overseeing these markets is the lack of practical and automated mechanisms to assess the security of mobile apps, given that thousands of apps are added and updated on a daily basis. In this paper, we provide an overview of a multi-faceted project targeted at automatically testing the security and robustness of Android apps in a scalable manner. We describe an Android-specific program analysis technique capable of generating a large number of test cases for fuzzing an app, as well as a test bed that given the generated test cases, executes them in parallel on numerous emulated Androids running on the cloud.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sayfullina, Luiza</author><author>Eirola, Emil</author><author>Komashinsky, Dmitry</author><author>Palumbo, Paolo</author><author>Karhunen, Juha</author></authors></contributors><titles><title>Android Malware detection: Building useful representations</title><secondary-title>Proceedings - 2016 15th IEEE International Conference on Machine Learning and Applications, ICMLA 2016</secondary-title></titles><periodical><full-title>Proceedings - 2016 15th IEEE International Conference on Machine Learning and Applications, ICMLA 2016</full-title></periodical><pages>201-206</pages><keywords><keyword>Android</keyword><keyword>Dimensionality reduction</keyword><keyword>Feature selection</keyword><keyword>Logistic regression</keyword><keyword>Malware classification</keyword><keyword>Random projection</keyword></keywords><dates><year>2017</year></dates><isbn>9781509061662</isbn><electronic-resource-num>10.1109/ICMLA.2016.41</electronic-resource-num><urls><pdf-urls><url>internal-pdf://f134c5df4e44437f1666517f0c1746a972e2.pdf</url></pdf-urls></urls><abstract>The problem of proactively detecting Android Malware has proven to be a challenging one. The challenges stem from a variety of issues, but recent literature has shown that this task is hard to solve with high accuracy when only a restricted set of features, like permissions or similar fixed sets of features, are used. The opposite approach of including all available features is also problematic, as it causes the features space to grow beyond reasonable size. In this paper we focus on finding an efficient way to select a representative feature space, preserving its discriminative power on unseen data. We go beyond traditional approaches like Principal Component Analysis, which is too heavy for large-scale problems with millions of features. In particular we show that many feature groups that can be extracted from Android application packages, like features extracted from the manifest file or strings extracted from the Dalvik Executable (DEX), should be filtered and used in classification separately. Our proposed dimensionality reduction scheme is applied to each group separately and consists of raw string preprocessing, feature selection via log-odds and finally applying random projections. With the size of the feature space growing exponentially as a function of the training set's size, our approach drastically decreases the size of the feature space of several orders of magnitude, this in turn allows accurate classification to become possible in a real world scenario. After reducing the dimensionality we use the feature groups in a light-weight ensemble of logistic classifiers. We evaluated the proposed classification scheme on real malware data provided by the antivirus vendor and achieved state-of-the-art 88.24% true positive and reasonably low 0.04% false positive rates with a significantly compressed feature space on a balanced test set of 10,000 samples.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Yang, Chao</author><author>Yang, Guangliang</author><author>Gehani, Ashish</author><author>Yegneswaran, Vinod</author><author>Tariq, Dawood</author><author>Gu, Guofei</author></authors></contributors><titles><title>Using provenance patterns to vet sensitive behaviors in android apps</title><secondary-title>Lecture Notes of the Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering, LNICST</secondary-title></titles><periodical><full-title>Lecture Notes of the Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering, LNICST</full-title></periodical><pages>58-77</pages><volume>164</volume><keywords/><dates><year>2015</year></dates><isbn>9783319288642</isbn><electronic-resource-num>10.1007/978-3-319-28865-9_4</electronic-resource-num><urls><pdf-urls><url>internal-pdf://ffa0e10886e931c2811787c1600c71c03e2a.pdf</url></pdf-urls></urls></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Rajput, Toshima Singh</author></authors></contributors><titles><title>Evolving Threat Agents : Ransomware and their Variants</title></titles><periodical/><pages>28-34</pages><volume>164</volume><issue>7</issue><keywords/><dates><year>2017</year></dates><urls><pdf-urls><url>internal-pdf://fcd7013e3f984ff33008824af4ee68d92800.pdf</url></pdf-urls></urls></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Falsina, Luca</author><author>Fratantonio, Yanick</author><author>Zanero, Stefano</author><author>Kruegel, Christopher</author><author>Vigna, Giovanni</author><author>Maggi, Federico</author></authors></contributors><titles><title>Grab ’n Run : Secure and Practical Dynamic Code Loading for Android Applications</title><secondary-title>Proceedings of the 31st Annual Computer Security Applications Conference (ACSAC)</secondary-title></titles><periodical><full-title>Proceedings of the 31st Annual Computer Security Applications Conference (ACSAC)</full-title></periodical><pages>201-210</pages><keywords><keyword>android</keyword><keyword>dexclassloader</keyword><keyword>dynamic code loading</keyword></keywords><dates><year>2015</year></dates><isbn>9781450336826</isbn><electronic-resource-num>10.1145/2818000.2818042</electronic-resource-num><urls><pdf-urls><url>internal-pdf://f220bab89ced3aa6e6c2400f77923790894d.pdf</url></pdf-urls></urls><abstract>Safe loading of dynamic code. Safe Retrival (https), Safe Storage (private folder), AUto Verification (hash). THey automatically rewrite app to download/verify code (using SafeDexClassloader). Code can be over HTTP but certificate is over HTTPS (or stored in the phone). They also test that 75% of developers (out of 12) load over HTTP and 100% fail to securely verify downloaded code. Using the library is easier for 11/12 and takes 37 instead of 139 minutes. Performance +84.00ms.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Fiore, Ugo</author><author>Palmieri, Francesco</author><author>Castiglione, Aniello</author><author>Loia, Vincenzo</author><author>De Santis, Alfredo</author></authors></contributors><titles><title>Multimedia-based battery drain attacks for android devices</title><secondary-title>2014 IEEE 11th Consumer Communications and Networking Conference, CCNC 2014</secondary-title></titles><periodical><full-title>2014 IEEE 11th Consumer Communications and Networking Conference, CCNC 2014</full-title></periodical><pages>145-150</pages><issue>Ccnc</issue><keywords><keyword>Android OS</keyword><keyword>Battery Drain Attack</keyword><keyword>Energy-Based Denial of Service</keyword><keyword>HTML5</keyword><keyword>Mobile Computing</keyword><keyword>Mobile Security</keyword><keyword>Multimedia-Based Energy Attack</keyword></keywords><dates><year>2014</year></dates><isbn>9781479923557</isbn><electronic-resource-num>10.1109/CCNC.2014.6866562</electronic-resource-num><urls><pdf-urls><url>internal-pdf://fiore2014 (1).pdf</url></pdf-urls></urls><abstract>People using smartphones to connect to the Internet for day-life activities has overtaken the number of people using canonical PCs. This lead to a huge quantity of security threats that usually tend to penetrate the defenses of a smartphone in order to gain control of its resources. Differently, energy-based attacks have the objective of increasing the energy consumption of the victim device. It is important to highlight that this objective could be possibly achieved by just activating the system’s defenses as a consequence of canonical attacks and letting the system defenses detect and (try to) defeat them. These activities consume additional energy and could led the mobile device to its complete uselessness. In this paper, an energy-based attack based on soliciting hardware-level encoding/decoding functions through properly crafted multimedia files is analyzed and its impact evaluated. Such kind of attacks are performed without accessing the device by taking advantage of the new HTML5 functionalities. A series of experiments have been performed in order to understand which are the codecs that have a more relevant impact on energy consumption, and, as a consequence, that make the attack more effective.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Smutz, Charles</author><author>Stavrou, Angelos</author></authors></contributors><titles><title>When a Tree Falls: Using Diversity in Ensemble Classifiers to Identify Evasion in Malware Detectors</title><secondary-title>Ndss</secondary-title></titles><periodical><full-title>Ndss</full-title></periodical><pages>21-24</pages><issue>February</issue><keywords/><dates><year>2016</year></dates><isbn>189156241X</isbn><electronic-resource-num>10.14722/ndss.2016.23078</electronic-resource-num><urls><pdf-urls><url>internal-pdf://fdc261b459b0e84fe8590afd543e3fb08b94.pdf</url></pdf-urls></urls><abstract>—Machine learning classifiers are a vital component of modern malware and intrusion detection systems. However, past studies have shown that classifier based detection systems are susceptible to evasion attacks in practice. Improving the evasion resistance of learning based systems is an open problem. To address this, we introduce a novel method for identifying the observations on which an ensemble classifier performs poorly. During detection, when a sufficient number of votes from in-dividual classifiers disagree, the ensemble classifier prediction is shown to be unreliable. The proposed method, ensemble classifier mutual agreement analysis, allows the detection of many forms of classifier evasion without additional external ground truth. We evaluate our approach using PDFrate, a PDF malware detector. Applying our method to data taken from a real network, we show that the vast majority of predictions can be made with high ensemble classifier agreement. However, most classifier eva-sion attempts, including nine targeted mimicry scenarios from two recent studies, are given an outcome of uncertain indicating that these observations cannot be given a reliable prediction by the classifier. To show the general applicability of our approach, we tested it against the Drebin Android malware detector where an uncertain prediction was correctly given to the majority of novel attacks. Our evaluation includes over 100,000 PDF documents and 100,000 Android applications. Furthermore, we show that our approach can be generalized to weaken the effectiveness of the Gradient Descent and Kernel Density Estimation attacks against Support Vector Machines. We discovered that feature bagging is the most important property for enabling ensemble classifier diversity based evasion detection.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bugiel, Sven</author><author>Davi, Lucas</author><author>Dmitrienko, Alexandra</author><author>Fischer, Thomas</author><author>Sadeghi, Ahmad-Reza</author><author>Shastry, Bhargava</author></authors></contributors><titles><title>Poster: the quest for security against privilege escalation attacks on android</title><secondary-title>Proceedings of the 18th ACM conference on Computer and communications security - CCS '11</secondary-title></titles><periodical><full-title>Proceedings of the 18th ACM conference on Computer and communications security - CCS '11</full-title></periodical><pages>741</pages><keywords/><dates><year>2011</year></dates><isbn>9781450309486</isbn><electronic-resource-num>10.1145/2046707.2093482</electronic-resource-num><urls><pdf-urls><url>internal-pdf://fed580c4ae372565a93f9b1427ec7be3b759 (1).pdf</url></pdf-urls><web-urls><url>http://www.informatik.tu-darmstadt.de/fileadmin/user_upload/Group_TRUST/PubsPDF/2011-ccs-poster.pdf%5Cnhttp://dl.acm.org/citation.cfm?doid=2046707.2093482</url></web-urls></urls><abstract>In this paper we present the design and implementation of a security framework that extends the reference monitor of the Android middleware and deploys a mandatory access control on Linux kernel (based on Tomoyo) aiming at detecting and preventing application-level privilege escalation attacks at runtime. In contrast to existing solutions, our framework is system-centric, efficient, detects attacks that involve communication channels controlled by both, Android middleware and the Linux kernel (particularly, Binder IPC, Internet sockets and file system). It can prevent known confused deputy attacks without false positives and is also flexible enough to prevent unknown confused deputy attacks and attacks by colluding applications (e.g., Soundcomber) at the cost of a small rate of false positives.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Gurulian, Iakovos</author><author>Markantonakis, Konstantinos</author><author>Cavalaro, Lorenzo</author><author>Mayes, Keith</author></authors></contributors><titles><title>You can't touch this: Consumer-centric android application repackaging detection</title><secondary-title>Future Generation Computer Systems</secondary-title></titles><periodical><full-title>Future Generation Computer Systems</full-title></periodical><pages>1-9</pages><volume>65</volume><keywords><keyword>Android</keyword><keyword>Application repackaging</keyword><keyword>Effectiveness analysis</keyword><keyword>Electronic fraud</keyword><keyword>User privacy</keyword><keyword>User-centric security</keyword></keywords><dates><year>2016</year></dates><electronic-resource-num>10.1016/j.future.2016.05.021</electronic-resource-num><urls><pdf-urls><url>internal-pdf://fd5d35a829a183d233fa55b58551a627dec7.pdf</url></pdf-urls></urls><abstract>Application repackaging is a widely used method for malware distribution, revenue stealing and piracy. Repackaged applications are modified versions of original applications, that can potentially target large audiences based on the original application's popularity. In this paper, we propose an approach for detecting repackaged applications. Our approach takes advantage of the attacker's reluctance to significantly alter the elements that characterise an application without notably impacting the application's distribution. These elements include the application's name and icon. The detection is initiated from the client side, prior to an application's installation, making it application store agnostic. Our experimental results show that detection based on our algorithm is effective and efficient.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Vidas, Timothy</author><author>Cylab, E C E</author><author>Votipka, Daniel</author><author>Cylab, I N I</author><author>Christin, Nicolas</author></authors></contributors><titles><title>All Your Droid Are Belong To Us : A Survey of Current Android Attacks</title><secondary-title>Proceedings of the 5th USENIX conference on Offensive technologies</secondary-title></titles><periodical><full-title>Proceedings of the 5th USENIX conference on Offensive technologies</full-title></periodical><pages>10</pages><volume>256</volume><keywords/><dates><year>2011</year></dates><urls><pdf-urls><url>internal-pdf://fcae38035f7abe19e6af6bee7663d5d3bba2.pdf</url></pdf-urls><web-urls><url>http://www.usenix.org/event/woot/tech/final_files/Vidas.pdf</url></web-urls></urls><abstract>In the past few years, mobile devices (smartphones, PDAs) have seen both their computational power and their data connectivity rise to a level nearly equivalent to that available on small desktop computers, while becoming ubiquitous. On the downside, these mobile devices are now an extremely attractive target for large-scale security attacks. Mobile device middleware is thus experiencing an increased focus on attempts to mitigate potential security compromises. In particular, Android incorporates by design many well-known security features such as privilege separation. The Android security model also creates several new security sensitive concepts such as Android's application permission system and the unmoderated Android market. In this paper we look to Android as a specific instance of mobile computing. We first discuss the Android security model and some potential weaknesses of the model. We then provide a taxonomy of attacks to the platform demonstrated by real attacks that in the end guarantee privileged access to the device. Where possible, we also propose mitigations for the identified vulnerabilities.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Conference Proceedings">3</ref-type><contributors><authors><author>Savola, Reijo M.</author><author>Vaisanen, Teemu</author><author>Evesti, Antti</author><author>Savolainen, Pekka</author><author>Kemppainen, Juha</author><author>Kokemaki, Marko</author></authors></contributors><titles><title>Toward risk-driven security measurement for Android smartphone platforms</title><secondary-title>2013 Information Security for South Africa - Proceedings of the ISSA 2013 Conference</secondary-title></titles><periodical><full-title>2013 Information Security for South Africa - Proceedings of the ISSA 2013 Conference</full-title></periodical><issue>ii</issue><keywords><keyword>Android</keyword><keyword>risk analysis</keyword><keyword>security effectiveness</keyword><keyword>security metrics</keyword></keywords><dates><year>2013</year></dates><isbn>9781479908080</isbn><electronic-resource-num>10.1109/ISSA.2013.6641049</electronic-resource-num><urls><pdf-urls><url>internal-pdf://savola2013.pdf</url></pdf-urls></urls><abstract>Security for Android smartphone platforms is a challenge arising in part from their openness. We analyse the security objectives of two distinct envisioned public safety and security mobile network systems utilising the Android platform. The analysis is based on an industrial risk analysis activity. In addition, we propose initial heuristics for security objective decomposition aimed at security metrics definition. Systematically defined and applied security metrics can be used for informed risk-driven security decision-making, enabling higher security effectiveness. © 2013 IEEE.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Shao, Yuru</author><author>Luo, Xiapu</author><author>Qian, Chenxiong</author><author>Zhu, Pengfei</author><author>Zhang, Lei</author></authors></contributors><titles><title>Towards a scalable resource-driven approach for detecting repackaged Android applications</title><secondary-title>ACSAC '14 (30th Annual Computer Security Applications Conference)</secondary-title></titles><periodical><full-title>ACSAC '14 (30th Annual Computer Security Applications Conference)</full-title></periodical><pages>56-65</pages><keywords/><dates><year>2014</year></dates><isbn>9781450330053</isbn><electronic-resource-num>10.1145/2664243.2664275</electronic-resource-num><urls><pdf-urls><url>internal-pdf://fc72341fadcf806dfd7c00b87df992d378c5.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2664243.2664275%5Cnhttp://dl.acm.org/citation.cfm?id=2664275</url></web-urls></urls><abstract>Repackaged Android applications (or simply apps) are one of the major sources of mobile malware and also an impor-tant cause of severe revenue loss to app developers. Al-though a number of solutions have been proposed to detect repackaged apps, the majority of them heavily rely on code analysis, thus suffering from two limitations: (1) poor scal-ability due to the billion opcode problem; (2) unreliability to code obfuscation/app hardening techniques. In this pa-per, we explore an alternative approach that exploits core resources, which have close relationships with codes, to de-tect repackaged apps. More precisely, we define new features for characterizing apps, investigate two kinds of algorithms for searching similar apps, and propose a two-stage method-ology to speed up the detection. We realize our approach in a system named ResDroid and conduct large scale eval-uation on it. The results show that ResDroid can identify repackaged apps efficiently and effectively even if they are protected by obfuscation or hardening systems.</abstract></record><record><database name="My Collection_501to 600.enl" path="My Collection_501to 600.enl">My Collection_501to 600.enl</database><ref-type name="Conference Proceedings">3</ref-type><contributors><authors><author>Savola, Reijo M.</author><author>Vaisanen, Teemu</author><author>Evesti, Antti</author><author>Savolainen, Pekka</author><author>Kemppainen, Juha</author><author>Kokemaki, Marko</author></authors></contributors><titles><title>Toward risk-driven security measurement for Android smartphone platforms</title><secondary-title>2013 Information Security for South Africa - Proceedings of the ISSA 2013 Conference</secondary-title></titles><periodical><full-title>2013 Information Security for South Africa - Proceedings of the ISSA 2013 Conference</full-title></periodical><issue>ii</issue><keywords><keyword>Android</keyword><keyword>risk analysis</keyword><keyword>security effectiveness</keyword><keyword>security metrics</keyword></keywords><dates><year>2013</year></dates><isbn>9781479908080</isbn><electronic-resource-num>10.1109/ISSA.2013.6641049</electronic-resource-num><urls><pdf-urls><url>internal-pdf://savola2013.pdf</url></pdf-urls></urls><abstract>Security for Android smartphone platforms is a challenge arising in part from their openness. We analyse the security objectives of two distinct envisioned public safety and security mobile network systems utilising the Android platform. The analysis is based on an industrial risk analysis activity. In addition, we propose initial heuristics for security objective decomposition aimed at security metrics definition. Systematically defined and applied security metrics can be used for informed risk-driven security decision-making, enabling higher security effectiveness. © 2013 IEEE.</abstract></record></records></xml>
