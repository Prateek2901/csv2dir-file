<?xml version="1.0" encoding="UTF-8"?><xml><records><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zou, Shihong</author><author>Zhang, Jing</author><author>Lin, Xiaodong</author></authors></contributors><titles><title>An effective behavior-based Android malware detection system</title><secondary-title>Security and Communication Networks</secondary-title></titles><periodical><full-title>Security and Communication Networks</full-title></periodical><pages>2079-2089</pages><volume>8</volume><issue>12</issue><keywords><keyword>Android security</keyword><keyword>behavior analysis</keyword><keyword>malware detection</keyword></keywords><dates><year>2015</year></dates><electronic-resource-num>10.1002/sec.1155</electronic-resource-num><urls><web-urls><url>http://dx.doi.org/10.1002/sec.1155</url></web-urls></urls><abstract>With the rapid growth of Android applications and malware, it has become a challenge to distinguish malware from a huge number of applications. The use of behavioral analytics is one of the most promising approaches because of its accuracy and resilience to malware variants. In this paper, we propose a behavior-based malware detection system. Firstly, it uses Android APIs and libc (Bionic libc) function calls along with their arguments to describe sensitive application behaviors. Secondly, it conducts behavior analysis and malware detection using machine learning techniques, including Support Vector Machine, Naïve Bayes, and Decision Tree. The experiments are conducted with 1136 real-world samples that are composed of various types of malware and benign applications. The evaluation results show that our system can effectively detect Android malware. In addition, we compare our system with the other behavior-based malware detection system, and the comparison results show the advantage of our system on malware detection. Copyright © 2014 John Wiley &amp; Sons, Ltd.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Gheorghe, Laura</author><author>Marin, Bogdan</author><author>Gibson, Gary</author><author>Mogosanu, Lucian</author><author>Deaconescu, Razvan</author><author>Voiculescu, Valentin-Gabriel</author><author>Carabas, Mihai</author></authors></contributors><titles><title>Smart malware detection on Android</title><secondary-title>Security and Communication Networks</secondary-title></titles><periodical><full-title>Security and Communication Networks</full-title></periodical><pages>4254-4272</pages><volume>8</volume><issue>18</issue><keywords><keyword>Android</keyword><keyword>logistic regression</keyword><keyword>machine learning</keyword><keyword>malware</keyword><keyword>mobile</keyword><keyword>security</keyword></keywords><dates><year>2015</year></dates><electronic-resource-num>10.1002/sec.1340</electronic-resource-num><urls><web-urls><url>http://dx.doi.org/10.1002/sec.1340</url></web-urls></urls><abstract>Nowadays, because of its increased popularity, Android is target to a growing number of attacks and malicious applications, with the purpose of stealing private information and consuming credit by subscribing to premium services. Most of the current commercial antivirus solutions use static signatures for malware detection, which may fail to detect different variants of the same malware and zero-day attacks. In this paper, we present a behavior-based, dynamic analysis security solution, called Android Malware Detection System, for detecting both well-known and zero-day malware. The proposed solution uses a machine learning classifier in order to differentiate between the behaviors of legitimate and malicious applications. In addition, it uses the application statistics for determining its reputation. The final decision is based on a combination of the classifier's result and the application reputation. The solution includes a unique and extensive set of data collectors, which gather application-specific data that describe the behavior of the monitored application. We evaluated our solution on a set of legitimate and malicious applications and obtained a high accuracy of 0.985. Our system is able to detect zero-day malware samples that are not detected by current commercial solutions. Our solution outperforms other similar solutions running on mobile devices. Copyright © 2015 John Wiley &amp; Sons, Ltd.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Lin, Ying-Dar</author><author>Lai, Yuan-Cheng</author><author>Lu, Chun-Nan</author><author>Hsu, Peng-Kai</author><author>Lee, Chia-Yin</author></authors></contributors><titles><title>Three-phase behavior-based detection and classification of known and unknown malware</title><secondary-title>Security and Communication Networks</secondary-title></titles><periodical><full-title>Security and Communication Networks</full-title></periodical><pages>2004-2015</pages><volume>8</volume><issue>11</issue><keywords><keyword>behavior analysis</keyword><keyword>malware classification</keyword><keyword>malware detection</keyword><keyword>sandbox</keyword><keyword>system call</keyword></keywords><dates><year>2015</year></dates><electronic-resource-num>10.1002/sec.1148</electronic-resource-num><urls><web-urls><url>http://dx.doi.org/10.1002/sec.1148</url></web-urls></urls><abstract>To improve both accuracy and efficiency in detecting known and even unknown malware, we propose a three-phase behavior-based malware detection and classification approach, with a faster detector in the first phase to filter most samples, a slower detector in the second phase to observe remaining ambiguous samples, and then a classifier in the third phase to recognize their malware type. The faster detector executes programs in a sandbox to extract representative behaviors fed into a trained artificial neural network to evaluate their maliciousness, whereas the slower detector extracts and matches the LCSs of system call sequences fed into a trained Bayesian model to calculate their maliciousness. In the third phase, we define malware behavior vectors and calculate the cosine similarity to classify the malware. The experimental results show that the hybrid two-phase detection scheme outperforms the one-phase schemes and achieves 3.6% in false negative and 6.8% in false positive. The third-phase classifier also distinguishes the known-type malware with an accuracy of 85.8%. Copyright © 2015 John Wiley &amp; Sons, Ltd.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Teufl, Peter</author><author>Ferk, Michaela</author><author>Fitzek, Andreas</author><author>Hein, Daniel</author><author>Kraxberger, Stefan</author><author>Orthacker, Clemens</author></authors></contributors><titles><title>Malware detection by applying knowledge discovery processes to application metadata on the Android Market (Google Play)</title><secondary-title>Security and Communication Networks</secondary-title></titles><periodical><full-title>Security and Communication Networks</full-title></periodical><pages>389-419</pages><volume>9</volume><issue>5</issue><keywords><keyword>Android</keyword><keyword>IT security</keyword><keyword>knowledge discovery</keyword><keyword>malware detection and analysis</keyword></keywords><dates><year>2016</year></dates><electronic-resource-num>10.1002/sec.675</electronic-resource-num><urls><web-urls><url>http://dx.doi.org/10.1002/sec.675</url></web-urls></urls><abstract>Recent smartphone platforms based on new operating systems, such as iOS, Android, or Windows Phone, have been a huge success in recent years and open up many new opportunities. Unfortunately, 2011 also showed us that the new technologies and the privacy-related data on smartphones are also increasingly interesting for attackers. Especially, the Android platform has been the favorite target for malware, mainly because of the openness of the platform, the ability to install applications from other sources than the Android Market, and the significant gains in market share. Although the processes of detecting and analyzing malware are well known from the PC world, where the arms race between attackers and defenders has continued for the past 15 years, they cannot be directly applied to smartphone platforms because of differences in the hardware and software architectures. In this paper, we first give an overview of the current malware situation on smartphone platforms with a special focus on Android and explain relevant malware detection and analysis methods. It turns out that most of the current malware relies on the installation by the user, who represents the last line of defense in malware detection. With these conclusions, we then present a new malware detection method that focuses on the information that the user is able to see prior to the installation of an application—the metadata within the platform's software market. Depending on the platform, this includes the application's description, its permissions, the ratings, or information about the developer. To analyze these data, we use sophisticated knowledge discovery processes and lean statistical methods. By presenting a wide range of examples based on real application metadata extracted from the Android Market, we show the possibilities of the new method. With the possibilities, we argue that it should be an essential part of a complete malware analysis/detection chain that includes other well-known methods such as network traffic analysis, or static, or dynamic code inspection. Copyright © 2013 John Wiley &amp; Sons, Ltd.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Aldini, Alessandro</author><author>Martinelli, Fabio</author><author>Saracino, Andrea</author><author>Sgandurra, Daniele</author></authors></contributors><titles><title>Detection of repackaged mobile applications through a collaborative approach</title><secondary-title>Concurrency and Computation: Practice and Experience</secondary-title></titles><periodical><full-title>Concurrency and Computation: Practice and Experience</full-title></periodical><pages>2818-2838</pages><volume>27</volume><issue>11</issue><keywords><keyword>Android</keyword><keyword>app repackaging</keyword><keyword>malware</keyword><keyword>probabilistic contract</keyword></keywords><dates><year>2015</year></dates><electronic-resource-num>10.1002/cpe.3447</electronic-resource-num><urls><web-urls><url>http://dx.doi.org/10.1002/cpe.3447</url></web-urls></urls><abstract>Repackaged applications are based on genuine applications, but they subtlety include some modifications. In particular, trojanized applications are one of the most dangerous threats for smartphones. Malware code may be hidden inside applications to access private data or to leak user credit. In this paper, we propose a contract-based approach to detect such repackaged applications, where a contract specifies the set of legal actions that can be performed by an application. Current methods to generate contracts lack information from real usage scenarios, thus being inaccurate and too coarse-grained. This may result either in generating too many false positives or in missing misbehaviors when verifying the compliance between the application and the contract. In the proposed framework, application contracts are generated dynamically by a central server merging execution traces collected and shared continuously by collaborative users executing the application. More precisely, quantitative information extracted from execution traces is used to define a contract describing the expected application behavior, which is deployed to the cooperating users. Then, every user can use the received contract to check whether the related application is either genuine or repackaged. Such a verification is based on an enforcement mechanism that monitors the application execution at run-time and compares it against the contract through statistical tests. Copyright © 2014 John Wiley &amp; Sons, Ltd.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wang, Wei</author><author>Murynets, Ilona</author><author>Bickford, Jeffrey</author><author>Wart, Christopher Van</author><author>Xu, Gang</author></authors></contributors><titles><title>What you see predicts what you get—lightweight agent-based malware detection</title><secondary-title>Security and Communication Networks</secondary-title></titles><periodical><full-title>Security and Communication Networks</full-title></periodical><pages>33-48</pages><volume>6</volume><issue>1</issue><keywords><keyword>latent space model</keyword><keyword>malware detection</keyword><keyword>malware propagation</keyword><keyword>mobile malware</keyword></keywords><dates><year>2013</year></dates><publisher>John Wiley &amp; Sons, Ltd</publisher><electronic-resource-num>10.1002/sec.528</electronic-resource-num><urls><web-urls><url>http://dx.doi.org/10.1002/sec.528</url></web-urls></urls><abstract>Because of the always connected nature of mobile devices, as well as the unique interfaces they expose, such as short message service (SMS), multimedia messaging service (MMS), and Bluetooth, classes of mobile malware tend to propagate using means unseen in the desktop world. In this paper, we propose a lightweight malware detection system on mobile devices to detect, analyze, and predict malware propagating via SMS and MMS messages. We deploy agents in the form of hidden contacts on the device to capture messages sent from malicious applications. Once captured, messages can be further analyzed to identify a message signature as well as potentially a signature for the malicious application itself. By feeding the observed messages over time to a latent space model, the system can estimate the current dynamics and predict the future state of malware propagation within the mobility network. One distinct feature of our system is that it is lightweight and suitable for wide deployment. The system shows a good performance even when only 10% of mobile devices are equipped with three agents on each device. Moreover, the model is generic and independent of malware propagation schemes. We prototype the system on the Android platform in a universal mobile telecommunications system laboratory network to demonstrate the feasibility of deploying agents on mobile devices as well as collecting and blocking malware-carrying messages within the mobility network. We also show that the proposed latent space model estimates the state of malware propagation accurately, regardless of the propagation scheme. Copyright © 2012 John Wiley &amp; Sons, Ltd.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Amamra, Abdelfattah</author><author>Robert, Jean-Marc</author><author>Talhi, Chamseddine</author></authors></contributors><titles><title>Enhancing malware detection for Android systems using a system call filtering and abstraction process</title><secondary-title>Security and Communication Networks</secondary-title></titles><periodical><full-title>Security and Communication Networks</full-title></periodical><pages>1179-1192</pages><volume>8</volume><issue>7</issue><keywords><keyword>Android security</keyword><keyword>anomaly malware detection</keyword><keyword>normal behavior database</keyword><keyword>system calls filtering</keyword></keywords><dates><year>2015</year></dates><electronic-resource-num>10.1002/sec.1073</electronic-resource-num><urls><web-urls><url>http://dx.doi.org/10.1002/sec.1073</url></web-urls></urls><abstract>Improving anomaly-based malware detection techniques has been widely studied in recent years. Most of these efforts have focused on the dataset available for analysis and/or the algorithms used to distinguish between normal or abnormal behavior. These factors have major impacts on the accuracy performance of the detection techniques as well as on their time and space complexities. In this paper, we revisit a classical anomaly-based malware detection approach (i.e., database of normal behavior) analyzing Android system calls with two conflicting objectives: reducing the time and space complexities of the selected approach without decreasing its accuracy performance. To achieve this goal, we introduce a filtering and abstraction process, which (i) removes irrelevant system calls to describe the main behavior of an Android application and (ii) unifies system calls having the same functionality but different names. This process is used to build a database describing a canonical normal behavior model of Android applications. This model is based on the 200 most popular free Android applications available in the Android market. It represents the last line of defense of an in-depth protection strategy for smartphone systems. The results of our experimentations show that our filtering and abstraction process has positive impacts on the performance and the accuracy of the selected malware detection approach. Copyright © 2014 John Wiley &amp; Sons, Ltd.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Du, Yao</author><author>Wang, Xiaoqing</author><author>Wang, Junfeng</author></authors></contributors><titles><title>A static Android malicious code detection method based on multi-source fusion</title><secondary-title>Security and Communication Networks</secondary-title></titles><periodical><full-title>Security and Communication Networks</full-title></periodical><pages>3238-3246</pages><volume>8</volume><issue>17</issue><keywords><keyword>Android malware</keyword><keyword>Dempster–Shafer theory</keyword><keyword>multi-source fusion</keyword></keywords><dates><year>2015</year></dates><electronic-resource-num>10.1002/sec.1248</electronic-resource-num><urls><web-urls><url>http://dx.doi.org/10.1002/sec.1248</url></web-urls></urls><abstract>The rapid development of mobile malwares makes the traditional signature-based and single-feature based malware detection methods a challenging task. The surge of new malwares with more complex structures and dynamic characteristics leads to efficient fusion of multi-source malicious information more difficult in detection. In this paper, we propose a new multi-source based method to detect Android malwares by emphasizing on the traditional static features, control flow graph, and repacking characteristics. Each category of features is treated as an independent information source in feature extracting rules building and classification. Then, the Dempster–Shafer algorithm is used to fuse these information sources. This method can improve accuracy of malware detection without adding too many instability characteristics that are extracted from disassembled codes, and have better performance in the resistance to code obfuscation technologies. To verify our method, different categories of apps are collected to build the dataset in our experiment. Based on the dataset, our method can achieve 97% detection accuracy and 1.9% false positive rate. Copyright © 2015 John Wiley &amp; Sons, Ltd.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wang, Daibin</author><author>Jin, Hai</author><author>Zou, Deqing</author><author>Xu, Peng</author><author>Zhu, Tianqing</author><author>Chen, Gang</author></authors></contributors><titles><title>Taming transitive permission attack via bytecode rewriting on Android application</title><secondary-title>Security and Communication Networks</secondary-title></titles><periodical><full-title>Security and Communication Networks</full-title></periodical><pages>2100-2114</pages><volume>9</volume><issue>13</issue><keywords><keyword>android</keyword><keyword>bytecode rewriting</keyword><keyword>detection</keyword><keyword>privilege escalation attack</keyword><keyword>transitive permission attack</keyword></keywords><dates><year>2016</year></dates><electronic-resource-num>10.1002/sec.1466</electronic-resource-num><urls><web-urls><url>http://dx.doi.org/10.1002/sec.1466</url></web-urls></urls><abstract>Google Android is popular for mobile devices in recent years. The openness and popularity of Android make it a primary target for malware. Even though Android's security mechanisms could defend most malware, its permission model is vulnerable to transitive permission attack, a type of privilege escalation attacks. Many approaches have been proposed to detect this attack by modifying the Android OS. However, the Android's fragmentation problem and requiring rooting Android device hinder those approaches large-scale adoption. In this paper, we present an instrumentation framework, called SEAPP, for Android applications (or “apps”) to detect the transitive permission attack on unmodified Android. SEAPP automatically rewrites an app without requiring its source codes and produces a security-harden app. At runtime, call-chains are built among these apps and detection process is executed before a privileged API is invoked. Our experimental results show that SEAPP could work on a large number of benign apps from the official Android market and malicious apps, with a repackaged success rate of over 99.8%. We also show that our framework effectively tracks call-chains among apps and detects known transitive permission attack with low overhead. Copyright © 2016 John Wiley &amp; Sons, Ltd.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Mooney, J Lowell</author><author>Parham, Abbie Gail</author><author>Cairney, Timothy D</author></authors></contributors><titles><title>Your Guide to Authenticating Mobile Devices</title><secondary-title>Journal of Corporate Accounting &amp; Finance</secondary-title></titles><periodical><full-title>Journal of Corporate Accounting &amp; Finance</full-title></periodical><pages>65-82</pages><volume>26</volume><issue>4</issue><keywords/><dates><year>2015</year></dates><electronic-resource-num>10.1002/jcaf.22052</electronic-resource-num><urls><web-urls><url>http://dx.doi.org/10.1002/jcaf.22052</url></web-urls></urls><abstract>New information technology (IT) mobile devices—such as the iPhone and iPad—are increasingly emerging in the consumer market first. Then, they spread to the workplace. But this is creating major privacy and security headaches for corporate executives. Surveys show that IT groups significantly underestimate—by as much as 50%—how many employees use their own mobile devices for work purposes. So what is to be done? The authors take an in-depth look at one vitally important security measure: user authentication. Companies need to go beyond just using passwords if they want to stay safe and secure. This article shows you how. It includes step-by-step instructions and a series of valuable checklists. © 2015 Wiley Periodicals, Inc.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Anwar, Zahid</author><author>Khan, Waqas Ahmad</author></authors></contributors><titles><title>Guess who is listening in to the board meeting: on the use of mobile device applications as roving spy bugs</title><secondary-title>Security and Communication Networks</secondary-title></titles><periodical><full-title>Security and Communication Networks</full-title></periodical><pages>2813-2825</pages><volume>8</volume><issue>16</issue><keywords><keyword>Android malware</keyword><keyword>GSM bug</keyword><keyword>covert listening</keyword><keyword>spy bug</keyword><keyword>spying</keyword></keywords><dates><year>2015</year></dates><electronic-resource-num>10.1002/sec.1205</electronic-resource-num><urls><web-urls><url>http://dx.doi.org/10.1002/sec.1205</url></web-urls></urls><abstract>Covert listening devices—a combination of a miniature radio transmitter and a microphone—have been used as key espionage instruments as early as the mid-20th century. More recently, hackers have started exploiting inherent weaknesses in current mobile platforms allowing them to remotely convert a victim's smartphone device into a roving spy bug without his knowledge. The goal of this paper is to illustrate with the aid of an Android mobile platform application that permissions gained in a legitimate way can be used to evade the integrity and privacy of the mobile device and install malware that remains completely hidden. When the attacker makes a call to the victim's phone, he is able to listen in to the victim's surroundings transforming the mobile phone into a sophisticated covert listening device. This communication-level attack goes undetected by current detection mechanisms. An anomaly-based detection feature set is another contribution of this paper to mitigate the proposed attack. As more and more mobile devices are being rapidly integrated into enterprises with the increase in bring-your-own-device model in many organizations, without a rigorous security screening policy, this weakness tends to facilitate corporate espionage by presumably allowing as many spy bugs in the board meeting as there are attendees with mobiles. This work provides a demonstration of a dangerous espionage attack targeting smartphones whereby an attacker can, with the aid of an Android mobile platform application, make a call to the victim's phone and listen in to the victim's surroundings transforming the mobile phone into a sophisticated covert listening device. It also proposes and evaluates a defense technique to detect and mitigate the attack where existing security mechanisms fall short. Copyright © 2015 John Wiley &amp; Sons, Ltd.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bahtiyar, Şerif</author></authors></contributors><titles><title>Anatomy of targeted attacks with smart malware</title><secondary-title>Security and Communication Networks</secondary-title></titles><periodical><full-title>Security and Communication Networks</full-title></periodical><pages>6215-6226</pages><volume>9</volume><issue>18</issue><keywords><keyword>security</keyword><keyword>smart malware</keyword><keyword>targeted attack</keyword></keywords><dates><year>2016</year></dates><publisher>John Wiley &amp; Sons, Ltd</publisher><electronic-resource-num>10.1002/sec.1767</electronic-resource-num><urls><web-urls><url>http://dx.doi.org/10.1002/sec.1767</url></web-urls></urls><abstract>The expansive connectivity of information systems has set the stage for pervasive malware to leverage multiple attack vectors and propagation methods. In doing so, this malware has taken on the complexity and richness of the very society it endeavors to control. Defending against it is therefore exceptionally difficult because defense systems have no autonomy in perceiving threats of complex malware and reacting against it. In this paper, smart malware model is defined as emerging complex malware that may be used by defense systems to perceive complex malware and reacting to its attacks. A targeted attack is also presented to show the difficulty of defending systems against smart malware. It is also compared with conventional malware to analyze malware types. Moreover, a numerical study about smart malware is presented to evaluate the proposed model in a more precise manner. The comparison and the numerical study show that our model can be used to perceive smart malware autonomously by automated tools. Copyright © 2017 John Wiley &amp; Sons, Ltd.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Yang, Ming</author><author>Wang, Shan</author><author>Ling, Zhen</author><author>Liu, Yaowen</author><author>Ni, Zhenyu</author></authors></contributors><titles><title>Detection of malicious behavior in android apps through API calls and permission uses analysis</title><secondary-title>Concurrency and Computation: Practice and Experience</secondary-title></titles><periodical><full-title>Concurrency and Computation: Practice and Experience</full-title></periodical><pages>n/a--n/a</pages><volume>29</volume><issue>19</issue><keywords><keyword>API calls analysis</keyword><keyword>Android malware</keyword><keyword>dynamic behavior analysis</keyword><keyword>permission use analysis</keyword><keyword>string subsequence kernel</keyword></keywords><dates><year>2017</year></dates><electronic-resource-num>10.1002/cpe.4172</electronic-resource-num><urls><web-urls><url>http://dx.doi.org/10.1002/cpe.4172</url></web-urls></urls><abstract>In recent years, with the prevalence of smartphones, the number of Android malware shows explosive growth. As malicious apps may steal users' sensitive data and even money from mobile and bank accounts, it is important to detect potential malicious behaviors so as to block them. To achieve this goal, we propose a dynamic behavior inspection and analysis framework for malicious behavior detection. A customized Android system is built to record apps' API calls, permission uses, and some other runtime features. We also develop an automated app behavior inspection platform to install and inspect massive samples so as to collect apps' dynamic behavior records. Then these records are exploited to train a string subsequence kernel–based Support Vector Machine (SVM) model, which can be used to classify benign and malicious behaviors offline. To realize online detection, we further extract apps' runtime features including sensitive permission combination uses, sensitive behavior sequences, and user interactions for behavior classification. The classification results can reach an accuracy of 84.9% in offline phase and 99.0% in online phase. Besides, we verify our scheme for identifying malicious apps, and the results show that 71.8% instances of malware samples are identified by running each app for only 18 minutes.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Feng, Pengbin</author><author>Sun, Cong</author><author>Ma, Jianfeng</author></authors></contributors><titles><title>Measuring the risk value of sensitive dataflow path in Android applications</title><secondary-title>Security and Communication Networks</secondary-title></titles><periodical><full-title>Security and Communication Networks</full-title></periodical><pages>5918-5933</pages><volume>9</volume><issue>18</issue><keywords><keyword>Android</keyword><keyword>information flow</keyword><keyword>machine learning</keyword><keyword>malware detection</keyword><keyword>static analysis</keyword></keywords><dates><year>2016</year></dates><publisher>John Wiley &amp; Sons, Ltd</publisher><electronic-resource-num>10.1002/sec.1746</electronic-resource-num><urls><web-urls><url>http://dx.doi.org/10.1002/sec.1746</url></web-urls></urls><abstract>Nowadays, smartphones carry large amounts of user privacy and sensitive data. With the popularity of the Android operating system, the cases of sensitive date leakage in Android applications are on the rise and are causing a great loss to Android users. In order to mitigate this condition, static and dynamic taint analysis are applied to precisely detect sensitive data leakages. These approaches cannot distinguish sensitive data leakages in benign apps from the ones in malicious apps. Recently, the difference on sensitive data flows between benign apps and malicious apps has been found to be significant. In this paper, we further find that there exists great difference between benign and malicious apps on the frequencies of sensitive dataflow paths. This difference can be used to enforce a risk value over every sensitive dataflow path. This risk value can guide the identification of sensitive data leakages in malicious apps. We present RISKPATH, a tool that automatically calculates the risk values for sensitive dataflow paths in Android applications. Applying the result of RISKPATH to MUDFLOW framework, we increase the true positive rate of malware detection by 3.96–6.54% on different datasets with reasonable increase in time and memory consumption. Copyright © 2017 John Wiley &amp; Sons, Ltd.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Su, Xin</author><author>Zhang, Dafang</author><author>Li, Wenjia</author><author>Wang, Xiaofei</author></authors></contributors><titles><title>AndroGenerator: An automated and configurable android app network traffic generation system</title><secondary-title>Security and Communication Networks</secondary-title></titles><periodical><full-title>Security and Communication Networks</full-title></periodical><pages>4273-4288</pages><volume>8</volume><issue>18</issue><keywords><keyword>Android application</keyword><keyword>automatic execution</keyword><keyword>traffic generator</keyword></keywords><dates><year>2015</year></dates><electronic-resource-num>10.1002/sec.1341</electronic-resource-num><urls><web-urls><url>http://dx.doi.org/10.1002/sec.1341</url></web-urls></urls><abstract>With the rapid growth in the popularity of Android smartphones, a large number of Android applications (or apps) have emerged in both official and alternative Android markets. It is important for network operators and security analysts to understand the network traffic generated by new Android apps for the purposes of network management, app traffic analysis, and malware detection. However, it is time-consuming and tedious to manually install and run Android apps to generate network traffic. Moreover, existing synthetic network traffic generators are unable to generate network traffic that can accurately reflect the network behaviors of Android apps. In this paper, we propose and implement AndroGenerator, an automated Android network traffic generation system, to generate various types of network traffic that can be produced by Android apps. Our system reproduces the network traffic based on the traffic characteristics extracted from traffic traces captured by running a large number of Android applications from several popular Android markets, such as Google Play. The system first generates network traffic through automated execution of Android applications. Then, the system is also able to extract network characteristics from the captured traffic traces and store the extracted results into a database for benchmarking purposes. Finally, AndroGenerator reproduces Android app traffic based via simulating network characteristics of captured traffic traces. In the experiments, we evaluate our system with real-world mobile traffic, and the experiment results show that AndroGenerator can reproduce Android app network traffic accurately. Copyright © 2015 John Wiley &amp; Sons, Ltd.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Yu, Junfeng</author><author>Huang, Qingfeng</author><author>Yian, CheeHoo</author></authors></contributors><titles><title>DroidScreening: a practical framework for real-world Android malware analysis</title><secondary-title>Security and Communication Networks</secondary-title></titles><periodical><full-title>Security and Communication Networks</full-title></periodical><pages>1435-1449</pages><volume>9</volume><issue>11</issue><keywords><keyword>Android malware</keyword><keyword>dynamic analysis</keyword><keyword>instrumentation</keyword><keyword>lazy associative classification</keyword><keyword>security screening</keyword><keyword>static analysis</keyword></keywords><dates><year>2016</year></dates><electronic-resource-num>10.1002/sec.1430</electronic-resource-num><urls><web-urls><url>http://dx.doi.org/10.1002/sec.1430</url></web-urls></urls><abstract>Analyzing Android malware sample is a time-consuming and error-prone work. Automatic techniques to perform suspicious apps screening and threat level evaluation is highly desired by the antivirus industry. In this paper, we proposed a novel automated framework called DroidScreening to speed up the Android malware analysis process and to assist antivirus analyst in generating the heuristics pattern for scanner. DroidScreening employs lazy associative classification (LAC) algorithms to produce classification model by learning from malicious evidence features extracted by using static analysis on Android application package files. Moreover, we proposed a novel high-interaction execution environment that can interact with malicious Android code, so that the analysis samples are induced to start executing their true malicious behavior. Experimentation on malware datasets and using LAC with traditional learning approaches show that the LAC algorithms outperformed other classification algorithms. Finally, we analyzed the performance of DroidScreening and compare it with other similar research work. Copyright © 2016 John Wiley &amp; Sons, Ltd.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bae, Chanwoo</author><author>Shin, Seungwon</author></authors></contributors><titles><title>A collaborative approach on host and network level android malware detection</title><secondary-title>Security and Communication Networks</secondary-title></titles><periodical><full-title>Security and Communication Networks</full-title></periodical><pages>5639-5650</pages><volume>9</volume><issue>18</issue><keywords><keyword>Android</keyword><keyword>Dynamic Analysis</keyword><keyword>Machine-Learning</keyword><keyword>Malicious Behavior</keyword><keyword>Malware</keyword></keywords><dates><year>2016</year></dates><publisher>John Wiley &amp; Sons, Ltd</publisher><electronic-resource-num>10.1002/sec.1723</electronic-resource-num><urls><web-urls><url>http://dx.doi.org/10.1002/sec.1723</url></web-urls></urls><abstract>We suggest a collaborative approach for revealing malicious behaviors on Android smartphones by which monitoring four observable parts: (i) network usages (ii) network connections, (iii) APIs and (iv) permissions. Therefore, we have designed a detection system which consists of four engines: network behavior analysis engine, host domain reputation analysis engine, critical API call pattern analysis engine, and Android permissions use analysis engine. Each of them monitors its specific part from Android apps and independently detects malicious behavior and, given the information from four engines, the correlator determines a final decision. Finally, to show efficiency, we have evaluated our system with real world 1,621 apps. Copyright © 2017 John Wiley &amp; Sons, Ltd.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Xiao, Xi</author><author>Xiao, Xianni</author><author>Jiang, Yong</author><author>Liu, Xuejiao</author><author>Ye, Runguo</author></authors></contributors><titles><title>Identifying Android malware with system call co-occurrence matrices</title><secondary-title>Transactions on Emerging Telecommunications Technologies</secondary-title></titles><periodical><full-title>Transactions on Emerging Telecommunications Technologies</full-title></periodical><pages>675-684</pages><volume>27</volume><issue>5</issue><keywords/><dates><year>2016</year></dates><electronic-resource-num>10.1002/ett.3016</electronic-resource-num><urls><web-urls><url>http://dx.doi.org/10.1002/ett.3016</url></web-urls></urls><abstract>With the popularity of Android devices, mobile malware in Android has became more prevalent. Malware causes lots of harm to users, such as stealing personal information and using too much battery or CPU. Detecting mobile malware is the main task in Android security. In this work, we use a dynamic analysis method to distinguish malware with system call sequences. At first, we track the system calls of applications under different events. Then two different feature models, the frequency vector and the co-occurrence matrix, are employed to extract features from the system call sequence. Finally, we apply Adaptive Regularization Of Weight Vectors and other machine learning algorithms to identify Android malware based on the aforementioned two models, respectively. We evaluate our method with 1189 benign applications and 1227 malicious applications. The experiment results show that the co-occurrence matrix can achieve a much better detection rate than the frequency vector. Our best detection rate is 97.7per cent with false positive rate being 1.34per cent, which is better than those of the existing methods. Copyright © 2016 John Wiley &amp; Sons, Ltd.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wu, Xueping</author><author>Zhang, Dafang</author><author>Su, Xin</author><author>Li, WenWei</author></authors></contributors><titles><title>Detect repackaged Android application based on HTTP traffic similarity</title><secondary-title>Security and Communication Networks</secondary-title></titles><periodical><full-title>Security and Communication Networks</full-title></periodical><pages>2257-2266</pages><volume>8</volume><issue>13</issue><keywords><keyword>Android app</keyword><keyword>HTTP traffic</keyword><keyword>embedded repackaged</keyword><keyword>similarity</keyword></keywords><dates><year>2015</year></dates><electronic-resource-num>10.1002/sec.1170</electronic-resource-num><urls><web-urls><url>http://dx.doi.org/10.1002/sec.1170</url></web-urls></urls><abstract>In recent years, more and more malicious authors aim to Android platform because of the rapid growth number of Android (Google, Menlo Park, California, USA) applications (or apps). They embedded malicious code into Android apps to execute their special malicious behaviors, such as sending text messages to premium numbers, stealing privacy information, or even converting the infected phones into bots. We called the app, which has been embedded with malicious code, as embedded repackaged app. This phenomena leads a big security risk to the Android users and how to detect them becomes an urgent problem. Previous research efforts focus on extracting the app's characteristics for comparison from its static program code, which neither can handle the code obfuscation technologies, nor can analyze the app's dynamic behaviors feature. To address these limitations, we propose an approach based on extracting the app's characteristics from the HTTP traffic, which is generated by the app. Moreover, we have implemented a multi-thread comparison algorithm based on the balanced Vantage Point Tree (VPT), which can remarkably reduce the experiment time. In this experiment, we successfully detected 266 embedded repackaged apps from 7619 Android apps downloaded from six popular Android markets, and the distribution rate of each market ranges from 2.57% to 6.07%. Then based on the analyzing of the HTTP traffic generated by these embedded codes, we found that majority of them are advertisement traffic and malicious traffic. Copyright © 2015 John Wiley &amp; Sons, Ltd.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Fanning, Kurt</author></authors></contributors><titles><title>Minimizing the Cost of Malware</title><secondary-title>Journal of Corporate Accounting &amp; Finance</secondary-title></titles><periodical><full-title>Journal of Corporate Accounting &amp; Finance</full-title></periodical><pages>7-14</pages><volume>26</volume><issue>3</issue><keywords/><dates><year>2015</year></dates><electronic-resource-num>10.1002/jcaf.22029</electronic-resource-num><urls><web-urls><url>http://dx.doi.org/10.1002/jcaf.22029</url></web-urls></urls><abstract>Malware is software that causes harm to the victim. This article explains several aspects of malware, including ransomware, mobile devices, and special issues relating to small business. The article discusses how malware gets into the system and how firms can reduce their costs by avoiding malware. Suggestions include always having the most current version of software. It is also important to find and eliminate holes in the firewall. Next-generation firewalls should probably be included in information technology (IT) budgets: They have more integrated deep-packet inspection, intrusion detection, application identification, and granular control than first-generation firewalls. © 2015 Wiley Periodicals, Inc.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Yun, Xiaochun</author><author>Li, Shuhao</author><author>Zhang, Yongzheng</author></authors></contributors><titles><title>SMS Worm Propagation over Contact Social Networks: Modeling and Validation</title><secondary-title>IEEE Transactions on Information Forensics and Security</secondary-title></titles><periodical><full-title>IEEE Transactions on Information Forensics and Security</full-title></periodical><pages>2365-2380</pages><volume>10</volume><issue>11</issue><keywords><keyword>Network security</keyword><keyword>SMS worm</keyword><keyword>mobile security</keyword><keyword>propagation modeling</keyword><keyword>social network</keyword></keywords><dates><year>2015</year></dates><electronic-resource-num>10.1109/TIFS.2015.2455413</electronic-resource-num><urls><pdf-urls><url>internal-pdf://SMS Worm Propagation Over Contact Social Networks Modeling and Validation.pdf</url></pdf-urls></urls></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wang, Yong</author><author>Streff, K</author><author>Raman, S</author></authors></contributors><titles><title>Smartphone Security Challenges</title><secondary-title>Computer</secondary-title></titles><periodical><full-title>Computer</full-title></periodical><pages>52-58</pages><volume>45</volume><issue>12</issue><keywords><keyword>Batteries</keyword><keyword>Digital forensics</keyword><keyword>Forensics</keyword><keyword>Malware</keyword><keyword>Mobile communication</keyword><keyword>Smart phones</keyword><keyword>attacks</keyword><keyword>business models</keyword><keyword>mobile forensics</keyword><keyword>security</keyword><keyword>security of data</keyword><keyword>smart phones</keyword><keyword>smartphone security challenges</keyword><keyword>smartphones</keyword><keyword>threats</keyword></keywords><dates><year>2012</year></dates><isbn>0018-9162 VO - 45</isbn><electronic-resource-num>10.1109/MC.2012.288</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Smartphone Security Challenges.pdf</url></pdf-urls><web-urls><url>http://ieeexplore.ieee.org/document/6269870/</url></web-urls></urls><abstract>Because of their unique characteristics, smartphones present challenges requiring new business models that offer countermeasures to help ensure their security. © 2012 IEEE.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Shabtai, Asaf</author><author>Kanonov, Uri</author><author>Elovici, Yuval</author></authors></contributors><titles><title>Intrusion detection for mobile devices using the knowledge-based, temporal abstraction method</title><secondary-title>Journal of Systems and Software</secondary-title></titles><periodical><full-title>Journal of Systems and Software</full-title></periodical><pages>1524-1537</pages><volume>83</volume><issue>8</issue><keywords><keyword>Android</keyword><keyword>Intrusion detection</keyword><keyword>Knowledge-based systems</keyword><keyword>Malware</keyword><keyword>Mobile devices</keyword><keyword>Temporal reasoning</keyword></keywords><dates><year>2010</year></dates><publisher>Elsevier Inc.</publisher><isbn>01641212</isbn><accession-num>51401615</accession-num><electronic-resource-num>10.1016/j.jss.2010.03.046</electronic-resource-num><urls><pdf-urls><url>internal-pdf://shabtai2010.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.jss.2010.03.046</url></web-urls></urls><abstract>In this paper, a new approach for detecting previously unencountered malware targeting mobile device is proposed. In the proposed approach, time-stamped security data is continuously monitored within the target mobile device (i.e., smartphones, PDAs) and then processed by the knowledge-based temporal abstraction (KBTA) methodology. Using KBTA, continuously measured data (e.g., the number of sent SMSs) and events (e.g., software installation) are integrated with a mobile device security domain knowledge-base (i.e., an ontology for abstracting meaningful patterns from raw, time-oriented security data), to create higher level, time-oriented concepts and patterns, also known as temporal abstractions. Automatically-generated temporal abstractions are then monitored to detect suspicious temporal patterns and to issue an alert. These patterns are compatible with a set of predefined classes of malware as defined by a security expert (or the owner) employing a set of time and value constraints. The goal is to identify malicious behavior that other defensive technologies (e.g., antivirus or firewall) failed to detect. Since the abstraction derivation process is complex, the KBTA method was adapted for mobile devices that are limited in resources (i.e., CPU, memory, battery). To evaluate the proposed modified KBTA method a lightweight host-based intrusion detection system (HIDS), combined with central management capabilities for Android-based mobile phones, was developed. Evaluation results demonstrated the effectiveness of the new approach in detecting malicious applications on mobile devices (detection rate above 94% in most scenarios) and the feasibility of running such a system on mobile devices (CPU consumption was 3% on average). © 2010 Elsevier Inc. All rights reserved.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Stoecklin, M. Ph.</author><author>Singh, K.</author><author>Koved, L.</author><author>Hu, X.</author><author>Chari, S. N.</author><author>Rao, J. R.</author><author>Cheng, P.-C.</author><author>Christodorescu, M.</author><author>Sailer, R.</author><author>Schales, D. L.</author></authors></contributors><titles><title>Passive security intelligence to analyze the security risks of mobile / BYOD activities</title><secondary-title>IBM Journal of Research and Development</secondary-title></titles><periodical><full-title>IBM Journal of Research and Development</full-title></periodical><pages>9:1-9:13</pages><volume>60</volume><issue>4</issue><keywords><keyword>Bring your own device</keyword><keyword>Computer security</keyword><keyword>Heuristic algorithms</keyword><keyword>IP networks</keyword><keyword>Mobile communication</keyword><keyword>Mobile handsets</keyword><keyword>Monitoring</keyword><keyword>Protocols</keyword></keywords><dates><year>2016</year></dates><isbn>0018-8646 VO - 60</isbn><electronic-resource-num>10.1147/JRD.2016.2569858</electronic-resource-num><urls><pdf-urls><url>internal-pdf://stoecklin2016.pdf</url></pdf-urls><web-urls><url>http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=7523356</url></web-urls></urls><abstract>As enterprises embrace mobile technologies and enable their employees to bring their own devices, traditional security mechanisms are challenged by the col-location of personal and business activities on employee-owned mobile devices on the enterprise network. This presents a new risk to enterprises as employee-owned devices can now be used as stepping stones for bypassing traditional enterprise perimeter security. Current Bring Your Own device (BYOD) programs usually either do not manage employee-owned devices or are limited by self-enrollment and device heterogeneity challenges. In this paper, we introduce a novel, nonintrusive big data analytics methodology to obtain visibility into mobile device usage. At the heart of the methodology is an inference algorithm that uses a dynamic decision tree in near real-time to fingerprint mobile devices and their usage by analyzing passively collected network data. Information, such as device type, device model, and operating systems/versions, as well as applications and their patch level, can be inferred—all without an agent installed on the devices. We correlate such information with supplemental security intelligence (e.g., vulnerability information) to discover previously unknown mobile devices on an organization's network and to establish their security posture and risk. Our evaluation on a major corporate network indicates that mobile devices can be reliably identified while mitigating their potential threats, thus demonstrating that our methodology provides valuable insights to enterprise security administrators</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Mohamed, Manar</author><author>Shrestha, Babins</author><author>Saxena, Nitesh</author></authors></contributors><titles><title>SMASheD: Sniffing and Manipulating Android Sensor Data for Offensive Purposes</title><secondary-title>IEEE Transactions on Information Forensics and Security</secondary-title></titles><periodical><full-title>IEEE Transactions on Information Forensics and Security</full-title></periodical><pages>901-913</pages><volume>12</volume><issue>4</issue><keywords><keyword>Authentication</keyword><keyword>computer security</keyword><keyword>permissions</keyword></keywords><dates><year>2017</year></dates><isbn>9781450339353</isbn><electronic-resource-num>10.1109/TIFS.2016.2620278</electronic-resource-num><urls><pdf-urls><url>internal-pdf://SMASheD Sniffing and Manipulating Android Sensor Data for Offensive Purposes.pdf</url></pdf-urls></urls><abstract>Abstract—The current Android sensor security model either allows only restrictive read access to sensitive sensors (e.g., an app can only read its own touch data) or requires special install-time permissions (e.g., to read microphone, camera or GPS). Moreover, Android does not allow write access to any of the sensors. Sensingbased security and non-security applications therefore crucially rely upon the sanity of the Android sensor security model. In this paper, we show that such a model can be effectively circumvented. Specifically, we build SMASheD, a legitimate framework under the current Android ecosystem that can be used to stealthily sniff as well as manipulate many of the Android’s restricted sensors (even touch input). SMASheD exploits the Android Debug Bridge (ADB) functionality and enables a malicious app with only the INTERNET permission to read, and write to, multiple different sensor data files at will. SMASheD is the first framework, to our knowledge, that can sniff and manipulate protected sensors on unrooted Android devices, without user awareness, without constant device-PC connection and without the need to infect the PC. The primary contributions of this work are two-fold. First, we design and develop the SMASheD framework, and evaluate its effectiveness on multiple Android devices, including phones, watches and glasses. Second, as an offensive implication of the SMASheD framework, we introduce a wide array of potentially devastating attacks. Our attacks against the touchsensor range from accurately logging the touchscreen input (TouchLogger) to injecting touch events for accessing restricted sensors and resources, installing and granting special permissions to other malicious apps, accessing user accounts, and authenticating on behalf of the user — essentially almost doing whatever the device user can do (secretively). Our attacks against various physical sensors (motion, position and environmental) can subvert the functionality provided by numerous existing sensing-based security and non-security applications, including those used for (continuous) authentication, authorization, safety, and elderly care.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Morales, Laura Victoria</author><author>Rueda, Sandra Julieta</author></authors></contributors><titles><title>Meaningful permission management in android</title><secondary-title>IEEE Latin America Transactions</secondary-title></titles><periodical><full-title>IEEE Latin America Transactions</full-title></periodical><pages>1160-1166</pages><volume>13</volume><issue>4</issue><keywords><keyword>Access Control</keyword><keyword>Permission Management</keyword><keyword>Smartphone Security</keyword></keywords><dates><year>2015</year></dates><electronic-resource-num>10.1109/TLA.2015.7106371</electronic-resource-num><urls><pdf-urls><url>internal-pdf://morales2015.pdf</url></pdf-urls></urls><abstract>Android is one of the most targeted mobile platforms, one reason is that it has a big part of the smartphone market. One of the features widely attacked by malware is the Android mechanism to grant permissions to applications. Applications announce their lists of required permissions in their installation packages, and users decide whether to grant those permissions or not. However, most users do not understand the meaning of such permissions. This work proposes the use of categories to help users make a decision; a category represents an application's purpose. It is easy for users to map an application to a category because category names are meaningful. Once a user establishes a mapping application-category, it is possible to automatically evaluate if the permissions an application requests are valid. © 2015 IEEE.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Phone, On-device Mobile</author><author>Machine, Security Exploits</author></authors></contributors><titles><title>Smartphones On-Device Mobile Phone</title></titles><periodical/><keywords/><dates><year>2017</year></dates><urls><pdf-urls><url>internal-pdf://On-Device Mobile Phone Security Exploits Machine Learning.pdf</url></pdf-urls></urls></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Murtaza, Syed Shariyar</author><author>Khreich, Wael</author><author>Hamou-Lhadj, Abdelwahab</author><author>Bener, Ayse Basar</author></authors></contributors><titles><title>Mining trends and patterns of software vulnerabilities</title><secondary-title>Journal of Systems and Software</secondary-title></titles><periodical><full-title>Journal of Systems and Software</full-title></periodical><pages>218-228</pages><volume>117</volume><keywords><keyword>Software vulnerabilities</keyword><keyword>Vulnerability prediction</keyword><keyword>Vulnerability trends</keyword></keywords><dates><year>2016</year></dates><publisher>Elsevier Inc.</publisher><electronic-resource-num>10.1016/j.jss.2016.02.048</electronic-resource-num><urls><pdf-urls><url>internal-pdf://murtaza2016.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.jss.2016.02.048</url></web-urls></urls><abstract>Zero-day vulnerabilities continue to be a threat as they are unknown to vendors; when attacks occur, vendors have zero days to provide remedies. New techniques for the detection of zero-day vulnerabilities on software systems are being developed but they have their own limitations; e.g., anomaly detection techniques are prone to false alarms. To better protect software systems, it is also important to understand the relationship between vulnerabilities and their patterns over a period of time. The mining of trends and patterns of vulnerabilities is useful because it can help software vendors prepare solutions ahead of time for vulnerabilities that may occur in a software application. In this paper, we investigate the use of historical patterns of vulnerabilities in order to predict future vulnerabilities in software applications. In addition, we examine whether the trends of vulnerabilities in software applications have any significant meaning or not. We use the National Vulnerability Database (NVD) as the main resource of vulnerabilities in software applications. We mine vulnerabilities of the last six years from 2009 to 2014 from NVD. Our results show that sequences of the same vulnerabilities (e.g., buffer errors) may occur 150 times in a software product. Our results also depict that the number of SQL injection vulnerabilities have decreased in the last six years while cryptographic vulnerabilities have seen an important increase. However, we have not found any statistical significance in the trends of the occurrence of vulnerabilities over time. The most interesting finding is that the sequential patterns of vulnerability events follow a first order Markov property; that is, we can predict the next vulnerability by using only the previous vulnerability with a recall of approximately 80% and precision of around 90%.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Bhuyan, Monowar H</author><author>Bhattacharyya, D K</author><author>Kalita, J K</author></authors></contributors><titles><title>Network Anomaly Detection : Methods , Systems and Tools</title></titles><periodical/><pages>303-336</pages><volume>16</volume><issue>1</issue><keywords/><dates><year>2014</year></dates><urls><pdf-urls><url>internal-pdf://Network Anomaly Detection Methods- Systems and Tools.pdf</url></pdf-urls></urls></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Xu, Jianlin</author><author>Yu, Yifan</author><author>Chen, Zhen</author><author>Cao, Bin</author><author>Dong, Wenyu</author><author>Guo, Yu</author><author>Cao, Junwei</author></authors></contributors><titles><title>MobSafe: Cloud computing based forensic analysis for massive mobile applications using data mining</title><secondary-title>Tsinghua Science and Technology</secondary-title></titles><periodical><full-title>Tsinghua Science and Technology</full-title></periodical><pages>418-424</pages><volume>18</volume><issue>4</issue><keywords><keyword>Android platform</keyword><keyword>Big data</keyword><keyword>Cloud computing</keyword><keyword>Forensic analysis</keyword><keyword>Hadoop distributed file system</keyword><keyword>Machine learning</keyword><keyword>Mobile malware detection</keyword><keyword>Redis key-value store</keyword></keywords><dates><year>2013</year></dates><isbn>VO  - 18</isbn><electronic-resource-num>10.1109/TST.2013.6574680</electronic-resource-num><urls><pdf-urls><url>internal-pdf://MobSafe cloud computing based forensic analysis for massive mobile applications using data mining.pdf</url></pdf-urls><web-urls><url>http://www.scopus.com/inward/record.url?eid=2-s2.0-84897726157&amp;partnerID=tZOtx3y1</url></web-urls></urls><abstract>With the explosive increase in mobile apps, more and more threats migrate from traditional PC client to mobile device. Compared with traditional Win+Intel alliance in PC, Android+ARM alliance dominates in Mobile Internet, the apps replace the PC client software as the major target of malicious usage. In this paper, to improve the security status of current mobile apps, we propose a methodology to evaluate mobile apps based on cloud computing platform and data mining. We also present a prototype system named MobSafe to identify the mobile app's virulence or benignancy. Compared with traditional method, such as permission pattern based method, MobSafe combines the dynamic and static analysis methods to comprehensively evaluate an Android app. In the implementation, we adopt Android Security Evaluation Framework (ASEF) and Static Android Analysis Framework (SAAF), the two representative dynamic and static analysis methods, to evaluate the Android apps and estimate the total time needed to evaluate all the apps stored in one mobile app market. Based on the real trace from a commercial mobile app market called AppChina, we can collect the statistics of the number of active Android apps, the average number apps installed in one Android device, and the expanding ratio of mobile apps. As mobile app market serves as the main line of defence against mobile malwares, our evaluation results show that it is practical to use cloud computing platform and data mining to verify all stored apps routinely to filter out malware apps from mobile app markets. As the future work, MobSafe can extensively use machine learning to conduct automotive forensic analysis of mobile apps based on the generated multifaceted data in this stage.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sun, Mingshen</author><author>Li, Xiaolei</author><author>Lui, John C.S.</author><author>Ma, Richard T.B.</author><author>Liang, Zhenkai</author></authors></contributors><titles><title>Monet: A User-Oriented Behavior-Based Malware Variants Detection System for Android</title><secondary-title>IEEE Transactions on Information Forensics and Security</secondary-title></titles><periodical><full-title>IEEE Transactions on Information Forensics and Security</full-title></periodical><pages>1103-1112</pages><volume>12</volume><issue>5</issue><keywords><keyword>Malware detection</keyword><keyword>android</keyword><keyword>runtime behavior</keyword><keyword>static structure</keyword></keywords><dates><year>2017</year></dates><electronic-resource-num>10.1109/TIFS.2016.2646641</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Monet A User-Oriented Behavior-Based Malware Variants Detection System for Android.pdf</url></pdf-urls></urls><abstract>Android, the most popular mobile OS, has around 78% of the mobile market share. Due to its popularity, it attracts many malware attacks. In fact, people have discovered around one million new malware samples per quarter, and it was reported that over 98% of these new malware samples are in fact &quot;derivatives&quot; (or variants) from existing malware families. In this paper, we first show that runtime behaviors of malware's core functionalities are in fact similar within a malware family. Hence, we propose a framework to combine &quot;runtime behavior&quot; with &quot;static structures&quot; to detect malware variants. We present the design and implementation of MONET, which has a client and a backend server module. The client module is a lightweight, in-device app for behavior monitoring and signature generation, and we realize this using two novel interception techniques. The backend server is responsible for large scale malware detection. We collect 3723 malware samples and top 500 benign apps to carry out extensive experiments of detecting malware variants and defending against malware transformation. Our experiments show that MONET can achieve around 99% accuracy in detecting malware variants. Furthermore, it can defend against 10 different obfuscation and transformation techniques, while only incurs around 7% performance overhead and about 3% battery overhead. More importantly, MONET will automatically alert users with intrusion details so to prevent further malicious behaviors.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Ullrich, Johanna</author><author>Zseby, Tanja</author><author>Fabini, Joachim</author><author>Weippl, Edgar</author></authors></contributors><titles><title>Network-Based Secret Communication in Clouds: A Survey</title><secondary-title>IEEE Communications Surveys and Tutorials</secondary-title></titles><periodical><full-title>IEEE Communications Surveys and Tutorials</full-title></periodical><pages>1112-1144</pages><volume>19</volume><issue>2</issue><keywords><keyword>Distributed computing</keyword><keyword>Security</keyword><keyword>network security</keyword><keyword>side-channel attacks</keyword></keywords><dates><year>2017</year></dates><electronic-resource-num>10.1109/COMST.2017.2659646</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Network-Based Secret Communication in Clouds A Survey.pdf</url></pdf-urls></urls><abstract>The cloud concept promises computing as a utility. More and more functions are moved to cloud environments. But this transition comes at a cost: Security and privacy solutions have to be adapted to new challenges in cloud environments. We investigate secret communication possibilities – data transmission concealing its mere existence or some of its characteristics – in clouds. The ability to establish such secret communication provides a powerful instrument to adversaries and can be used to gather information for attack preparation, to conceal the coordination of malicious instances or to leak sensitive data.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Muslukhov, Ildar</author><author>Sun, San Tsai</author><author>Wijesekera, Primal</author><author>Boshmaf, Yazan</author><author>Beznosov, Konstantin</author></authors></contributors><titles><title>Decoupling data-at-rest encryption and smartphone locking with wearable devices</title><secondary-title>Pervasive and Mobile Computing</secondary-title></titles><periodical><full-title>Pervasive and Mobile Computing</full-title></periodical><pages>26-34</pages><volume>32</volume><keywords><keyword>Data-at-rest encryption</keyword><keyword>Encryption keys management</keyword><keyword>Smartphone locking</keyword><keyword>Smartphone loss and theft</keyword><keyword>Wearable devices</keyword></keywords><dates><year>2016</year></dates><publisher>Elsevier B.V.</publisher><electronic-resource-num>10.1016/j.pmcj.2016.06.016</electronic-resource-num><urls><pdf-urls><url>internal-pdf://muslukhov2016.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.pmcj.2016.06.016</url></web-urls></urls><abstract>Smartphones store sensitive and confidential data, e.g., business related documents or emails. If a smartphone is stolen, such data are at risk of disclosure. To mitigate this risk, modern smartphones allow users to enable data encryption, which uses a locking password to protect the data encryption key. Unfortunately, users either do not lock their devices at all, due to usability issues, or use weak and easy to guess 4-digit PINs. This makes the current approach of protecting confidential data-at-rest ineffective against password guessing attackers. To address this problem we design, implement and evaluate the Sidekick system — a system that uses a wearable device to decouple data encryption and smartphone locking. Evaluation of the Sidekick system revealed that the proposal can run on an 8-bit System-on-Chip, uses only 4 Kb/20 Kb of RAM/ROM, allows data encryption key fetching in less than two seconds, while lasting for more than a year on a single coin-cell battery.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Votipka, Daniel</author><author>Christin, Nicolas</author></authors></contributors><titles><title>Passe-partout: A general collection methodology for android devices</title><secondary-title>IEEE Transactions on Information Forensics and Security</secondary-title></titles><periodical><full-title>IEEE Transactions on Information Forensics and Security</full-title></periodical><pages>1937-1946</pages><volume>8</volume><issue>12</issue><keywords><keyword>Mobile computing</keyword><keyword>forensics</keyword><keyword>mobile communication</keyword></keywords><dates><year>2013</year></dates><isbn>17422876</isbn><electronic-resource-num>10.1109/TIFS.2013.2285360</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Passe-Partout A General Collection Methodology for Android Devices.pdf</url></pdf-urls></urls><abstract>The Android platform has been deployed across a wide range of devices, predominately mobile phones, bringing unprecedented common software features to a diverse set of devices independent of carrier and manufacturer. Modern digital forensics processes differentiate collection and analysis, with collection ideally only occurring once and the subsequent analysis relying upon proper collection. After exploring special device boot modes and Android's partitioning schema we detail the composition of an Android bootable image and discuss the creation of such an image designed for forensic collection. The major contribution of this paper is a general process for data collection of Android devices and related results of experiments carried out on several specific devices. ?? 2011 Vidas, Zhang &amp; Christin. Published by Elsevier Ltd. All rights reserved.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhang, Yuan</author><author>Yang, Min</author><author>Xu, Bingquan</author><author>Yang, Zhemin</author><author>Gu, Guofei</author><author>Ning, Peng</author><author>Wang, X Sean</author><author>Zang, Binyu</author></authors></contributors><titles><title>Vetting undesirable behaviors in android apps with permission use analysis</title><secondary-title>Proceedings of the 2013 ACM SIGSAC conference on Computer {&amp;} communications security - CCS '13</secondary-title></titles><periodical><full-title>Proceedings of the 2013 ACM SIGSAC conference on Computer {&amp;} communications security - CCS '13</full-title></periodical><pages>611-622</pages><volume>9</volume><issue>11</issue><keywords><keyword>all or part of</keyword><keyword>analysis</keyword><keyword>android behavior representation</keyword><keyword>android security</keyword><keyword>behaviors</keyword><keyword>or</keyword><keyword>or hard copies of</keyword><keyword>permission</keyword><keyword>permission to make digital</keyword><keyword>permission use analysis</keyword><keyword>syscall</keyword><keyword>this work for personal</keyword><keyword>vetdroid</keyword><keyword>vetting undesirable</keyword></keywords><dates><year>2013</year></dates><isbn>9781450324779</isbn><electronic-resource-num>10.1145/2508859.2516689</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Permission Use Analysis for Vetting Undesirable Behaviors in Android Apps.pdf</url></pdf-urls><web-urls><url>http://dl.acm.org/citation.cfm?doid=2508859.2516689</url></web-urls></urls><abstract>Android platform adopts permissions to protect sensitive resources from untrusted apps. However, after permissions are granted by users at install time, apps could use these permissions (sensitive resources) with no further restrictions. Thus, recent years have witnessed the explosion of undesirable behaviors in Android apps. An important part in the defense is the accurate analysis of Android apps. However, traditional syscall-based analysis techniques are not well-suited for Android, because they could not capture critical interactions between the application and the Android system. This paper presents VetDroid, a dynamic analysis platform for reconstructing sensitive behaviors in Android apps from a novel permission use perspective. VetDroid features a systematic framework to effectively construct permission use behaviors, i.e., how applications use permissions to access (sensitive) system resources, and how these acquired permission-sensitive resources are further utilized by the application. With permission use behaviors, security analysts can easily examine the internal sensitive behaviors of an app. Using real-world Android malware, we show that VetDroid can clearly reconstruct fine-grained malicious behaviors to ease malware analysis. We further apply VetDroid to 1,249 top free apps in Google Play. VetDroid can assist in finding more information leaks than TaintDroid, a state-of-the-art technique. In addition, we show how we can use VetDroid to analyze fine-grained causes of information leaks that TaintDroid cannot reveal. Finally, we show that VetDroid can help identify subtle vulnerabilities in some (top free) applications otherwise hard to detect.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sun, Hung Min</author><author>Chen, Yao Hsin</author><author>Lin, Yue Hsun</author></authors></contributors><titles><title>oPass: A user authentication protocol resistant to password stealing and password reuse attacks</title><secondary-title>IEEE Transactions on Information Forensics and Security</secondary-title></titles><periodical><full-title>IEEE Transactions on Information Forensics and Security</full-title></periodical><pages>651-663</pages><volume>7</volume><issue>2</issue><keywords><keyword>Network security</keyword><keyword>password reuse attack</keyword><keyword>password stealing attack</keyword><keyword>user authentication</keyword></keywords><dates><year>2012</year></dates><isbn>1556-6013</isbn><electronic-resource-num>10.1109/TIFS.2011.2169958</electronic-resource-num><urls><pdf-urls><url>internal-pdf://oPass A User Authentication Protocol Resistant to Password Stealing and Password Reuse Attacks.pdf</url></pdf-urls></urls><abstract>Text password is the most popular form of user authentication on websites due to its convenience and simplicity. However, users' passwords are prone to be stolen and compromised under different threats and vulnerabilities. Firstly, users often select weak passwords and reuse the same passwords across different websites. Routinely reusing passwords causes a domino effect; when an adversary compromises one password, she will exploit it to gain access to more websites. Second, typing passwords into untrusted computers suffers password thief threat. An adversary can launch several password stealing attacks to snatch passwords, such as phishing, keyloggers and malware. In this paper, we design a user authentication protocol named oPass which leverages a user's cellphone and short message service to thwart password stealing and password reuse attacks. oPass only requires each participating website possesses a unique phone number, and involves a telecommunication service provider in registration and recovery phases. Through oPass, users only need to remember a long-term password for login on all websites. After evaluating the oPass prototype, we believe oPass is efficient and affordable compared with the conventional web authentication mechanisms.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Eshghi, Soheil</author><author>Khouzani, M. H.R.</author><author>Sarkar, Saswati</author><author>Venkatesh, Santosh S.</author></authors></contributors><titles><title>Optimal Patching in Clustered Malware Epidemics</title><secondary-title>IEEE/ACM Transactions on Networking</secondary-title></titles><periodical><full-title>IEEE/ACM Transactions on Networking</full-title></periodical><pages>283-298</pages><volume>24</volume><issue>1</issue><keywords><keyword>Belief propagation</keyword><keyword>immunization and healing</keyword><keyword>security</keyword><keyword>technology adoption</keyword><keyword>wireless networks</keyword></keywords><dates><year>2016</year></dates><isbn>1063-6692</isbn><electronic-resource-num>10.1109/TNET.2014.2364034</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Optimal Patching in Clustered Malware Epidemics.pdf</url></pdf-urls></urls><abstract>Studies on the propagation of malware in mobile networks have revealed that the spread of malware can be highly inhomogeneous. Platform diversity, contact list utilization by the malware, clustering in the network structure, etc., can also lead to differing spreading rates. In this paper, a general formal framework is proposed for leveraging such heterogeneity to derive optimal patching policies that attain the minimum aggregate cost due to the spread of malware and the surcharge of patching. Using Pontryagin's Maximum Principle for a stratified epidemic model, it is analytically proven that in the mean-field deterministic regime, optimal patch disseminations are simple single-threshold policies. These policies are amenable to implementation and can serve as benchmarks for policies that have less knowledge of the network. Through numerical simulations, the behavior of optimal patching policies is investigated in sample topologies, and their advantages are demonstrated.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Chernyshev, Maxim</author><author>Valli, Craig</author><author>Johnstone, Michael</author></authors></contributors><titles><title>Revisiting Urban War Nibbling: Mobile Passive Discovery of Classic Bluetooth Devices Using Ubertooth One</title><secondary-title>IEEE Transactions on Information Forensics and Security</secondary-title></titles><periodical><full-title>IEEE Transactions on Information Forensics and Security</full-title></periodical><pages>1625-1636</pages><volume>12</volume><issue>7</issue><keywords><keyword>Bluetooth</keyword><keyword>Ubertooth</keyword><keyword>forensics</keyword><keyword>passive discovery</keyword><keyword>surveillance</keyword></keywords><dates><year>2017</year></dates><electronic-resource-num>10.1109/TIFS.2017.2678463</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Revisiting Urban War Nibbling Mobile Passive Discovery of Classic Bluetooth Devices Using Ubertooth One.pdf</url></pdf-urls></urls><abstract>The ubiquitous nature of Bluetooth technology presents opportunities for intelligence gathering based on histori- cal and real-time device presence data. This information can be of value to law enforcement agencies, intelligence organizations, and industry. Despite the introduction of the Bluetooth Low Energy standard that incorporates anonymity preservation mechanisms, the presence of devices that support Classic Bluetooth that uses unique and persistent device identifiers is expected to remain significant for a number of years. The common approach to finding discoverable Classic Bluetooth devices relies on a standard inquiry process that is not truly passive. Furthermore, this approach fails to detect devices that remain undiscoverable. Ubertooth One, a low-cost open source Bluetooth development platform, can assist with overcoming this limitation in a truly pas- sive manner, making it an attractive digital forensic instrument. Using vehicle-based sensors and parallel multi-method device discovery, we conduct a practical evaluation of Ubertooth One for passive discovery and contrast its discovery rate to the standard method. Based on 83 comparative field experiments, we show that Ubertooth One can produce forensically sound observations while able to discover up to ten times as many devices. We also show that this method can identify repeat device presence, as we observe 2370 instances of repeat observations on different days in single and multiple location scenarios. We conclude that this passive technique can complement the standard method and has the potential be used as a viable alternative.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhang, Yuan</author><author>Yang, Min</author><author>Gu, Guofei</author><author>Chen, Hao</author></authors></contributors><titles><title>on Mobile Systems</title></titles><periodical/><pages>2227-2240</pages><volume>11</volume><issue>10</issue><keywords/><dates><year>2016</year></dates><urls><pdf-urls><url>internal-pdf://Rethinking Permission Enforcement Mechanism on Mobile Systems.pdf</url></pdf-urls></urls></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Nan, Yuhong</author><author>Yang, Zhemin</author><author>Yang, Min</author><author>Zhou, Shunfan</author><author>Zhang, Yuan</author><author>Gu, Guofei</author><author>Wang, Xiaofeng</author><author>Sun, Limin</author></authors></contributors><titles><title>Identifying User-Input Privacy in Mobile Applications at a Large Scale</title><secondary-title>IEEE Transactions on Information Forensics and Security</secondary-title></titles><periodical><full-title>IEEE Transactions on Information Forensics and Security</full-title></periodical><pages>647-661</pages><volume>12</volume><issue>3</issue><keywords><keyword>Android security</keyword><keyword>privacy leakage</keyword><keyword>privacy protection</keyword><keyword>user input privacy</keyword></keywords><dates><year>2017</year></dates><electronic-resource-num>10.1109/TIFS.2016.2631949</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Identifying User-Input Privacy in Mobile Applications at a Large Scale.pdf</url></pdf-urls></urls></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Rodriguez, Ricardo J.</author><author>Rodriguez Gaston, Inaki</author><author>Alonso, Javier</author></authors></contributors><titles><title>Towards the Detection of Isolation-Aware Malware</title><secondary-title>IEEE Latin America Transactions</secondary-title></titles><periodical><full-title>IEEE Latin America Transactions</full-title></periodical><pages>1024-1036</pages><volume>14</volume><issue>2</issue><keywords><keyword>Analysis-aware malware</keyword><keyword>binary analysis</keyword><keyword>dynamic binary instrumentation</keyword></keywords><dates><year>2016</year></dates><electronic-resource-num>10.1109/TLA.2016.7437254</electronic-resource-num><urls><pdf-urls><url>internal-pdf://rodriguez2016.pdf</url></pdf-urls></urls><abstract>Malware analysis tools have evolved in the last years providing tightly\ncontrolled sandbox and virtualised environments where malware is\nanalysed minimising potential harmful consequences. Unfortunately,\nmalware has advanced in parallel, being currently able to recognise when\nis running in sandbox or virtual environments and then, behaving as a\nnon-harmful application or even not executing at all. This kind of\nmalware is usually called analysis-aware malware. In this paper, we\npropose a tool to detect the evasion techniques used by analysis-aware\nmalware within sandbox or virtualised environments. Our tool uses\nDynamic Binary Instrumentation to maintain the binary functionality\nwhile executing arbitrary code. We evaluate the tool under a set of\nwell-known analysis-aware malware showing its current effectiveness.\nFinally, we discuss limitations of our proposal and future directions.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sun, He</author><author>Sun, Kun</author><author>Wang, Yuewu</author><author>Jing, Jiwu</author><author>Jajodia, Sushil</author></authors></contributors><titles><title>{TrustDump}: Reliable Memory Acquisition on Smartphones</title></titles><periodical/><pages>202-218</pages><volume>10</volume><issue>12</issue><keywords/><dates><year>2014</year></dates><isbn>0001415123</isbn><electronic-resource-num>10.1007/978-3-319-11203-9_12</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Reliable and Trustworthy Memory Acquisition on Smartphones.pdf</url></pdf-urls></urls><abstract>With the wide usage of smartphones in our daily life, new malware is emerging to compromise the mobile OS and steal the sensitive data from the mobile applications. Anti-malware tools should be continuously updated via static and dynamic malware analysis to detect and prevent the newest malware. Dynamic malware analysis depends on a reliable memory acquisition of the OS and the applications running on the smartphones. In this paper, we develop a TrustZone-based memory acquisition mechanism called TrustDump that is capable of reliably obtaining the RAM memory and CPU registers of the mobile OS even if the OS has crashed or has been compromised. The mobile OS is running in the TrustZone's normal domain, and the memory acquisition tool is running in the TrustZone's secure domain, which has the access privilege to the memory in the normal domain. Instead of using a hypervisor to ensure an isolation between the OS and the memory acquisition tool, we rely on ARM TrustZone to achieve a hardware-assisted isolation with a small trusted computing base (TCB) of about 450 lines of code. We build a TrustDump prototype on Freescale i.MX53 QSB. © 2014 Springer International Publishing Switzerland.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Generic">31</ref-type><contributors><authors><author>Chen, Gong</author><author>Cox, Jacob H.</author><author>Uluagac, A. Selcuk</author><author>Copeland, John A.</author></authors></contributors><titles><title>In-depth survey of digital advertising technologies</title><secondary-title>IEEE Communications Surveys and Tutorials</secondary-title></titles><periodical><full-title>IEEE Communications Surveys and Tutorials</full-title></periodical><pages>2124-2148</pages><volume>18</volume><issue>3</issue><keywords><keyword>Digital advertising</keyword><keyword>advertising networks</keyword><keyword>advertising policy</keyword><keyword>mobile advertising</keyword><keyword>monetization</keyword><keyword>networking</keyword><keyword>online advertising</keyword><keyword>privacy</keyword><keyword>security</keyword></keywords><dates><year>2016</year></dates><isbn>1553-877X VO - 18</isbn><electronic-resource-num>10.1109/COMST.2016.2519912</electronic-resource-num><urls><pdf-urls><url>internal-pdf://In-Depth Survey of Digital Advertising Technologies.pdf</url></pdf-urls></urls><abstract>Some of the world’s most well-known IT companies are in fact advertising companies deriving their primary revenues through digital advertising. For this reason, these IT giants are able to continually drive the evolutions of information technology in ways that serve to enhance our everyday lives. The benefits of this relationship include free web browsers with powerful search engines and mobile applications. Still, it turns out that “free” comes at a cost that is paid through our interactions within a dig- ital advertising ecosystem. Digital advertising is not without its challenges. Issues originate from the complex platforms utilized to support advertising over web and mobile application inter- faces. This is especially true for advertising links. Additionally, as new methods for advertising develop so too does the potential for impacting its underlying ecosystem for good or ill. Accordingly, researchers are interested in understanding this ecosystem, the factors that impact it, and the strategies for improving it. The major contribution of this survey is that it is the first review of the digital advertising ecosystem as it applies to online web- sites and mobile applications. In doing so, we explain the digital advertising relationships within this ecosystem along with their technical, social, political, and physical implications. Furthermore, advertising principles along with a variation of other advertising approaches, both legitimate and malicious, are explored in order to compare and contrast competing digital advertisingmethods. Index</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Hussain, Muzammil</author><author>Al-Haiqi, Ahmed</author><author>Zaidan, A. A.</author><author>Zaidan, B. B.</author><author>Mat Kiah, M. L.</author><author>Anuar, Nor Badrul</author><author>Abdulnabi, Mohamed</author></authors></contributors><titles><title>The rise of keyloggers on smartphones: A survey and insight into motion-based tap inference attacks</title><secondary-title>Pervasive and Mobile Computing</secondary-title></titles><periodical><full-title>Pervasive and Mobile Computing</full-title></periodical><pages>1-25</pages><volume>25</volume><keywords><keyword>Keystroke inference</keyword><keyword>Mobile security</keyword><keyword>Sensors-based attacks</keyword><keyword>Side channels</keyword><keyword>Tap inference</keyword></keywords><dates><year>2016</year></dates><publisher>Elsevier B.V.</publisher><electronic-resource-num>10.1016/j.pmcj.2015.12.001</electronic-resource-num><urls><pdf-urls><url>internal-pdf://hussain2016.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.pmcj.2015.12.001</url></web-urls></urls><abstract>Smartphone sensing capabilities have opened new opportunities for innovative User Interface (UI) and context-aware applications. They have also opened new possibilities for potential risks to user privacy and security infiltration. Researchers have recently explored a new attack vector that exploits the built-in motion sensors to infer user taps on smartphone touchscreens. This new side channel has introduced the threat of keylogging to smartphones despite the lack of physical keyboards. In this paper, we review this type of attack and survey the leading works in the literature to highlight the underpinning motivations and threat model. We also discuss the main issues in the design and implementation of the new attack, in order to provide insights into the practicality, prospects, and limitations of the different approaches. Different countermeasures that can mitigate the rising threat are investigated, and recommendations for further research on this emerging trend are discussed. A comparative summary of the surveyed works is also presented.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Ma, Haoyu</author><author>Li, Ruiqi</author><author>Yu, Xiaoxu</author><author>Jia, Chunfu</author><author>Gao, Debin</author><author>Ma, Haoyu</author><author>Li, Ruiqi</author><author>Yu, Xiaoxu</author><author>Jia, Chunfu</author><author>Gao, Debin</author></authors></contributors><titles><title>Integrated Software Fingerprinting via Neural- Network-Based Control Flow Obfuscation Integrated Software Fingerprinting via Neural-Network-Based Control Flow Obfuscation</title><secondary-title>IEEE Trans. Information Forensics and Security</secondary-title></titles><periodical><full-title>IEEE Trans. Information Forensics and Security</full-title></periodical><pages>2322-2337</pages><volume>11</volume><issue>10</issue><keywords/><dates><year>2016</year></dates><electronic-resource-num>10.1109/TIFS.2016.2555287</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Integrated Software Fingerprinting via Neural-Network-Based Control Flow Obfuscation.pdf</url></pdf-urls></urls></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Li, Qing</author><author>Larsen, Chris</author><author>Van Der Horst, Tim</author></authors></contributors><titles><title>IPv6: A catalyst and evasion tool for botnets and malware delivery networks</title><secondary-title>Computer</secondary-title></titles><periodical><full-title>Computer</full-title></periodical><pages>76-82</pages><volume>46</volume><issue>5</issue><keywords><keyword>Blue Coat Systems</keyword><keyword>IPv4</keyword><keyword>IPv6</keyword><keyword>Web security</keyword><keyword>WebPulse</keyword><keyword>botnets</keyword><keyword>enterprise networks</keyword><keyword>malware</keyword><keyword>mobile networks</keyword><keyword>policy enforcement</keyword></keywords><dates><year>2013</year></dates><isbn>0018-9162 VO  - 46</isbn><electronic-resource-num>10.1109/MC.2012.296</electronic-resource-num><urls><pdf-urls><url>internal-pdf://IPv6 A Catalyst and Evasion Tool for Botnets and Malware Delivery Networks.pdf</url></pdf-urls></urls><abstract>Ultimately, only cloud-based approaches will provide effective weapons for solving the wide spectrum of new security challenges associated with running IPv6.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Xu, Ke</author><author>Li, Yingjiu</author><author>Deng, Robert H.</author></authors></contributors><titles><title>ICCDetector: ICC-Based Malware Detection on Android</title><secondary-title>IEEE Transactions on Information Forensics and Security</secondary-title></titles><periodical><full-title>IEEE Transactions on Information Forensics and Security</full-title></periodical><pages>1252-1264</pages><volume>11</volume><issue>6</issue><keywords><keyword>Android</keyword><keyword>ICC</keyword><keyword>Malware Detection</keyword></keywords><dates><year>2016</year></dates><isbn>1556-6013</isbn><electronic-resource-num>10.1109/TIFS.2016.2523912</electronic-resource-num><urls><pdf-urls><url>internal-pdf://ICCDetector ICC-Based Malware Detection on Android.pdf</url></pdf-urls></urls><abstract>Most existing mobile malware detection methods (e.g., Kirin and DroidMat) are designed based on the resources required by malwares (e.g., permissions, application programming interface (API) calls, and system calls). These methods capture the interactions between mobile apps and Android system, but ignore the communications among components within or cross application boundaries. As a consequence, the majority of the existing methods are less effective in identifying many typical malwares, which require a few or no suspicious resources, but leverage on inter-component communication (ICC) mechanism when launching stealthy attacks. To address this challenge, we propose a new malware detection method, named ICCDetector. ICCDetector outputs a detection model after training with a set of benign apps and a set of malwares, and employs the trained model for malware detection. The performance of ICCDetector is evaluated with 5264 malwares, and 12026 benign apps. Compared with our benchmark, which is a permission-based method proposed by Peng et al. in 2012 with an accuracy up to 88.2%, ICCDetector achieves an accuracy of 97.4%, roughly 10% higher than the benchmark, with a lower false positive rate of 0.67%, which is only about a half of the benchmark. After manually analyzing false positives, we discover 43 new malwares from the benign data set, and reduce the number of false positives to seven. More importantly, ICCDetector discovers 1708 more advanced malwares than the benchmark, while it misses 220 obvious malwares, which can be easily detected by the benchmark. For the detected malwares, ICCDetector further classifies them into five newly defined malware categories, which help understand the relationship between malicious behaviors and ICC characteristics. We also provide a systemic analysis of ICC patterns of benign apps and malwares.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Markelj, Bla??</author><author>Bernik, Igor</author></authors></contributors><titles><title>Safe use of mobile devices arises from knowing the threats</title><secondary-title>Journal of Information Security and Applications</secondary-title></titles><periodical><full-title>Journal of Information Security and Applications</full-title></periodical><pages>84-89</pages><volume>20</volume><keywords><keyword>Cybersecurity</keyword><keyword>Mobile devices</keyword><keyword>Threats</keyword><keyword>Users</keyword></keywords><dates><year>2015</year></dates><electronic-resource-num>10.1016/j.jisa.2014.11.001</electronic-resource-num><urls><pdf-urls><url>internal-pdf://markelj2015.pdf</url></pdf-urls></urls><abstract>Today, the safe use of mobile devices is a prerequisite for successful and transparent work, both on a personal and business level. The study presented in this paper shows that work safety in cyberspace depends on the users' knowledge of threats and their appropriate response to them. Based on the results, it has been established that user awareness should be raised, users should be informed of threats and undergo suitable education on work safety in cyberspace.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Kraus, Lydia</author><author>Wechsung, Ina</author><author>Möller, Sebastian</author></authors></contributors><titles><title>Psychological needs as motivators for security and privacy actions on smartphones</title><secondary-title>Journal of Information Security and Applications</secondary-title></titles><periodical><full-title>Journal of Information Security and Applications</full-title></periodical><pages>34-45</pages><volume>34</volume><keywords><keyword>Psychological needs</keyword><keyword>Security and privacy</keyword><keyword>Smartphones</keyword><keyword>User behavior</keyword><keyword>User experience</keyword></keywords><dates><year>2017</year></dates><publisher>Elsevier Ltd</publisher><electronic-resource-num>10.1016/j.jisa.2016.10.002</electronic-resource-num><urls><pdf-urls><url>internal-pdf://kraus2017.pdf</url></pdf-urls></urls><abstract>Much work has been conducted to investigate the obstacles that keep users from using mitigations against security and privacy threats on smartphones. By contrast, we conducted in-depth interviews (N = 19) to explore users’ motivations for voluntarily applying security and privacy actions on smartphones. Our work focuses on analyzing intrinsic motivation in terms of psychological need fulfillment. The findings from the interview study provide first insights on the salience of basic psychological needs in the context of smartphone security and privacy. They illustrate how security and privacy actions on smartphones are motivated by a variety of psychological needs, only one of them being the need for Security. We further conducted an online survey (N = 70) in which we used questionnaires on psychological need fulfillment from the literature. The online survey is a first attempt to quantify psychological need fulfillment for security and privacy actions on smartphones. Whereas the results of the interview study indicate that Security and other needs play a role as motivators for employing security and privacy actions on smartphones, the online study does not support the need for Security as an outstanding motivator. Instead, in the online study, other needs such as Keeping the meaningful, Stimulation, Autonomy, and Competence show to be rather salient as motivators for security and privacy actions. Furthermore, the mean need fulfillment for security and privacy actions is in general rather low in the online survey. We conclude that there is scope for improvement to maximize psychological need fulfillment with security and privacy actions. In order to achieve a positive user experience with security and privacy technologies on smartphones, we suggest addressing additional psychological needs, beyond the need for Security, in the design of such technologies.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Joshi, Chanchala</author><author>Singh, Umesh Kumar</author></authors></contributors><titles><title>Information security risks management framework – A step towards mitigating security risks in university network</title><secondary-title>Journal of Information Security and Applications</secondary-title></titles><periodical><full-title>Journal of Information Security and Applications</full-title></periodical><pages>128-137</pages><volume>35</volume><keywords><keyword>Security risk</keyword><keyword>Security threats</keyword><keyword>University campus network</keyword><keyword>Vulnerability</keyword></keywords><dates><year>2017</year></dates><publisher>Elsevier Ltd</publisher><electronic-resource-num>10.1016/j.jisa.2017.06.006</electronic-resource-num><urls><pdf-urls><url>internal-pdf://joshi2017.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.jisa.2017.06.006</url></web-urls></urls><abstract>Information is one of the most prominent assets for Universities and must be protected from security breach. This paper analyzed the security threats specifically evolve in University's network, and with consideration of these issues, proposed information security framework for University network environment. The proposed framework reduces the risk of security breach by supporting three phase activities; the first phase assesses the threats and vulnerabilities in order to identify the weak point in educational environment, the second phase focuses on the highest risk and create actionable remediation plan, the third phase of risk assessment model recognizes the vulnerability management compliance requirement in order to improve University's security position. The proposed framework is applied on Vikram University Ujjain India's, computing environment and the evaluation result showed the proposed framework enhances the security level of University campus network. This model can be used by risk analyst and security manager of University to perform reliable and repeatable risk analysis in realistic and affordable manner.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Mangialardo, R J</author><author>Duarte, J C</author></authors></contributors><titles><title>Integrating Static and Dynamic Malware Analysis Using Machine Learning</title></titles><periodical/><pages>3080-3087</pages><volume>13</volume><issue>9</issue><keywords><keyword>classificação de</keyword><keyword>coleta estática e dinâmica</keyword><keyword>de</keyword><keyword>dynamic analysis</keyword><keyword>em conjunto com algoritmos</keyword><keyword>information security</keyword><keyword>machine learning</keyword><keyword>malware</keyword><keyword>máquina têm sido utilizadas</keyword><keyword>para a identificação e</keyword><keyword>stat</keyword><keyword>static analysi</keyword><keyword>static analysis</keyword><keyword>unified analysis</keyword></keywords><dates><year>2015</year></dates><electronic-resource-num>10.1109/TLA.2015.7350062</electronic-resource-num><urls><pdf-urls><url>internal-pdf://mangialardo2015.pdf</url></pdf-urls></urls></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Merlo, Alessio</author><author>Migliardi, Mauro</author><author>Caviglione, Luca</author></authors></contributors><titles><title>A survey on energy-aware security mechanisms</title><secondary-title>Pervasive and Mobile Computing</secondary-title></titles><periodical><full-title>Pervasive and Mobile Computing</full-title></periodical><pages>77-90</pages><volume>24</volume><keywords><keyword>Energy-aware security</keyword><keyword>Green networking</keyword><keyword>Mobile devices</keyword><keyword>Security</keyword></keywords><dates><year>2015</year></dates><publisher>Elsevier B.V.</publisher><isbn>1574-1192</isbn><electronic-resource-num>10.1016/j.pmcj.2015.05.005</electronic-resource-num><urls><pdf-urls><url>internal-pdf://merlo2015.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.pmcj.2015.05.005</url></web-urls></urls><abstract>The increasing adoption of mobile devices as the preferred tool to access the Internet imposes to deepen the investigation of security aspects. In parallel, their power constrained nature must be explicitly considered in order to analyze security in an effective and comprehensive manner. This aspect, which is often neglected in the literature, allows investigating two important behaviors of mobile devices: (i) evaluate if all the layers accounting for privacy and security can be re-engineered or optimized to save power, and (ii) understand the effectiveness of draining energy to conduct attacks. In this perspective, this paper surveys and highlights the most recent work on energy-awareness and security. Also, it summarizes the current state of the art on general techniques to save energy, as well as tools to perform measurements. The major contributions of this survey are, thus, a review of past work aimed at minimizing the energy footprint of security mechanisms, and the identification of promising research trends, such as detecting attacks via anomalous power consumption.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Li, Min</author><author>Fu, Cai</author><author>Liu, Xiao Yang</author><author>Yang, Jia</author><author>Zhu, Tianqing</author><author>Han, Lansheng</author></authors></contributors><titles><title>Evolutionary virus immune strategy for temporal networks based on community vitality</title><secondary-title>Future Generation Computer Systems</secondary-title></titles><periodical><full-title>Future Generation Computer Systems</full-title></periodical><pages>276-290</pages><volume>74</volume><keywords><keyword>Community vitality</keyword><keyword>Evolutionary virus immune strategy</keyword><keyword>Temporal networks</keyword></keywords><dates><year>2017</year></dates><publisher>Elsevier B.V.</publisher><electronic-resource-num>10.1016/j.future.2016.05.015</electronic-resource-num><urls><pdf-urls><url>internal-pdf://li2016.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.future.2016.05.015</url></web-urls></urls><abstract>Preventing viruses spreading in networks is a hot topic. Existing immune strategies are mainly designed for static networks, which become ineffective for temporal networks. In this paper, we propose an evolutionary virus immune strategy for temporal networks, which takes into account the community evolution. First, we define a new metric, community vitality (CV), to quantize the evolution characteristics of communities. Second, based on the community vitality, we propose an immune strategy which selects an optimized number of initial nodes according to node influence (NI). Third, a theoretical analysis is proposed to measure the immune effect of the evolutionary immune strategy. Compared with the random immunization, the targeted immunization and the acquaintance immune strategy, we show that the proposed strategy has a much larger coverage, i.e., more nodes will have immune ability given the same number of initial immune nodes.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Mitchell, Chris</author></authors></contributors><titles><title>Mobile Security</title></titles><periodical/><pages>78-81</pages><issue>February</issue><keywords><keyword>Faculty of Science\Mathematics</keyword><keyword>authentication</keyword><keyword>communication</keyword><keyword>computing</keyword><keyword>environment</keyword><keyword>mobiles</keyword><keyword>privacy</keyword><keyword>protocol</keyword><keyword>security</keyword></keywords><dates><year>2013</year></dates><isbn>9781613501504</isbn><electronic-resource-num>10.4018/978-1-61350-150-4.ch013</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Mobile Security A Look Ahead.pdf</url></pdf-urls><web-urls><url>http://www.twisc.org/related_events/twisc_meeting_schedule/2006-08-10-2006-08-24-2006300c8cc78a0aanquanshuqi8ab2cheng300d</url></web-urls></urls><abstract>This talk...Briefly introduces security terminology. Discusses a range of security problems arising in a pervasive and mobile computing\nenvironment. Also covers possible directions for solutions to some of the problems. Although it covers number of topics, they are all inter-related (as will become obvious!).</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Miller, Charlie</author></authors></contributors><titles><title>Mobile attacks and defense</title><secondary-title>IEEE Security and Privacy</secondary-title></titles><periodical><full-title>IEEE Security and Privacy</full-title></periodical><pages>68-70</pages><volume>9</volume><issue>4</issue><keywords><keyword>ASLR</keyword><keyword>Android</keyword><keyword>Android Market</keyword><keyword>App Store</keyword><keyword>DEP</keyword><keyword>SMS</keyword><keyword>address space layout randomization</keyword><keyword>computer security</keyword><keyword>data execution prevention</keyword><keyword>iOS</keyword><keyword>iPhone</keyword><keyword>jailbreaking</keyword><keyword>malware</keyword><keyword>sandbox</keyword><keyword>smart phone</keyword></keywords><dates><year>2011</year></dates><isbn>1540-7993 VO - 9</isbn><electronic-resource-num>10.1109/MSP.2011.85</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Mobile Attacks and Defense.pdf</url></pdf-urls></urls><abstract>Smartphones' features are great, but with the power they provide, there's also a threat. Smartphones are becoming a target of attackers in the same way PCs have been for many years. This article examines the security models of two popular smart phone operating systems: Apple's iOS and Google's Android.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Yuan, Zhenlong</author><author>Lu, Yongqiang</author><author>Xue, Yibo</author></authors></contributors><titles><title>Droiddetector: android malware characterization and detection using deep learning</title><secondary-title>Journal</secondary-title></titles><periodical><full-title>Journal</full-title></periodical><pages>114-123</pages><volume>21</volume><issue>1</issue><keywords><keyword>android security</keyword><keyword>association rules mining</keyword><keyword>characterization</keyword><keyword>deep learning</keyword><keyword>malware detection</keyword></keywords><dates><year>2016</year></dates><electronic-resource-num>10.1109/TST.2016.7399288</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Droiddetector android malware characterization and detection using deep learning.pdf</url></pdf-urls><web-urls><url>http://ieeexplore.ieee.org/document/7399288/</url></web-urls></urls></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Merlo, Alessio</author><author>Costa, Gabriele</author><author>Verderame, Luca</author><author>Armando, Alessandro</author></authors></contributors><titles><title>Android vs. SEAndroid: An empirical assessment</title><secondary-title>Pervasive and Mobile Computing</secondary-title></titles><periodical><full-title>Pervasive and Mobile Computing</full-title></periodical><pages>113-131</pages><volume>30</volume><issue>2010</issue><keywords><keyword>Android OS</keyword><keyword>Android Security Framework</keyword><keyword>Android security</keyword><keyword>SEAndroid</keyword><keyword>SELinux MAC</keyword></keywords><dates><year>2016</year></dates><publisher>Elsevier B.V.</publisher><electronic-resource-num>10.1016/j.pmcj.2016.01.006</electronic-resource-num><urls><pdf-urls><url>internal-pdf://merlo2016.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.pmcj.2016.01.006</url></web-urls></urls><abstract>Android has a layered architecture that allows applications to leverage services provided by the underlying Linux kernel. However, Android does not prevent applications from directly triggering the kernel functionalities through system call invocations. As recently shown in the literature, this feature can be abused by malicious applications and thus lead to undesirable effects. The adoption of SEAndroid in the latest Android distributions may mitigate the problem. Yet, the effectiveness of SEAndroid to counter these threats is still to be ascertained. In this paper we present an empirical evaluation of the effectiveness of SEAndroid in detecting malicious interplays targeted to the underlying Linux kernel. This is done by extensively profiling the behavior of honest and malicious applications both in standard Android and SEAndroid-enabled distributions. Our analysis indicates that SEAndroid does not prevent direct, possibly malicious, interactions between applications and the Linux kernel, thus showing how it can be circumvented by suitably-crafted system calls. Therefore, we propose a runtime monitoring enforcement module (called Kernel Call Controller) which is compatible both with Android and SEAndroid and is able to enforce security policies on kernel call invocations. We experimentally assess both the efficacy and the performance of KCC on actual devices.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Mirsky, Yisroel</author><author>Shabtai, Asaf</author><author>Shapira, Bracha</author><author>Elovici, Yuval</author><author>Rokach, Lior</author></authors></contributors><titles><title>Anomaly detection for smartphone data streams</title><secondary-title>Pervasive and Mobile Computing</secondary-title></titles><periodical><full-title>Pervasive and Mobile Computing</full-title></periodical><pages>83-107</pages><volume>35</volume><keywords><keyword>Anomaly detection</keyword><keyword>Contexts</keyword><keyword>Continuous authentication</keyword><keyword>Data streams</keyword><keyword>Smartphone security</keyword></keywords><dates><year>2017</year></dates><publisher>Elsevier B.V.</publisher><electronic-resource-num>10.1016/j.pmcj.2016.07.006</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Mirsky et al. - 2017 - Anomaly detection for smartphone data streams.pdf</url><url>internal-pdf://mirsky2016.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.pmcj.2016.07.006</url></web-urls></urls><abstract>Smartphones centralize a great deal of users’ private information and are thus a primary target for cyber-attack. The main goal of the attacker is to try to access and exfiltrate the private information stored in the smartphone without detection. In situations where explicit information is lacking, these attackers can still be detected in an automated way by analyzing data streams (continuously sampled information such as an application's CPU consumption, accelerometer readings, etc.). When clustered, anomaly detection techniques may be applied to the data stream in order to detect attacks in progress. In this paper we utilize an algorithm called pcStream that is well suited for detecting clusters in real world data streams and propose extensions to the pcStream algorithm designed to detect point, contextual, and collective anomalies. We provide a comprehensive evaluation that addresses mobile security issues on a unique dataset collected from 30 volunteers over eight months. Our evaluations show that the pcStream extensions can be used to effectively detect data leakage (point anomalies) and malicious activities (contextual anomalies) associated with malicious applications. Moreover, the algorithm can be used to detect when a device is being used by an unauthorized user (collective anomaly) within approximately 30 s with 1 false positive every two days.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Howry, D</author><author>Shah, Y</author></authors></contributors><titles><title>Evolution of Trusted Systems from PCs to Mobile Devices</title></titles><periodical/><pages>70-80</pages><issue>march</issue><keywords/><dates><year>2013</year></dates><urls><pdf-urls><url>internal-pdf://Evolution of trust systems from PCs to mobile devices Building secured and trusted ecosystems.pdf</url></pdf-urls><web-urls><url>http://files.leveelabs.com/f7f6fd8ffcb3a454e9a2c85989f21d2f/resources/white_papers/758a2cce1f017cec1a9c5796ce1d92db.pdf%5Cndata-clk=hl=en&amp;amp;sa=T&amp;amp;oi=ggp&amp;amp;ct=res&amp;amp;cd=105&amp;amp;ei=zFuqVZaJMYeX0QHw9bvAAQ</url></web-urls></urls></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Rahman, Sazzadur</author><author>Huang, Ting Kai</author><author>Madhyastha, Harsha V.</author><author>Faloutsos, Michalis</author></authors></contributors><titles><title>Detecting Malicious Facebook Applications</title><secondary-title>IEEE/ACM Transactions on Networking</secondary-title></titles><periodical><full-title>IEEE/ACM Transactions on Networking</full-title></periodical><pages>773-787</pages><volume>24</volume><issue>2</issue><keywords><keyword>Facebook apps</keyword><keyword>malicious</keyword><keyword>online social networks</keyword><keyword>spam</keyword></keywords><dates><year>2016</year></dates><isbn>9781450317757</isbn><electronic-resource-num>10.1109/TNET.2014.2385831</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Detecting Malicious Facebook Applications.pdf</url></pdf-urls></urls><abstract>With 20 million installs a day [1], third-party apps are a major reason for the popularity and addictiveness of Facebook. Unfortunately, hackers have realized the potential of using apps for spreading malware and spam. The problem is already significant, as we find that at least 13% of apps in our dataset are malicious. So far, the research community has focused on detecting malicious posts and campaigns. In this paper, we ask the question: Given a Facebook application, can we determine if it is malicious? Our key contribution is in developing FRAppE—Facebook’s Rigorous Ap- plication Evaluator—arguably the first tool focused on detecting malicious apps on Facebook. To develop FRAppE, we use informa- tion gathered by observing the posting behavior of 111K Facebook apps seen across 2.2 million users on Facebook. First, we identify a set of features that help us distinguish malicious apps from benign ones. For example, we find that malicious apps often share names with other apps, and they typically request fewer permissions than benign apps. Second, leveraging these distinguishing features, we show that FRAppE can detect malicious apps with 99.5% accu- racy, with no false positives and a high true positive rate (95.9%). Finally, we explore the ecosystem of malicious Facebook apps and identify mechanisms that these apps use to propagate. Interest- ingly, we find that many apps collude and support each other; in our dataset, we find 1584 apps enabling the viral propagation of 3723 other apps through their posts. Long term, we see FRAppE as a step toward creating an independent watchdog for app assess- ment and ranking, so as to warn Facebook users before installing apps.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Faruki, Parvez</author><author>Laxmi, Vijay</author><author>Bharmal, Ammar</author><author>Gaur, M. S.</author><author>Ganmoor, Vijay</author></authors></contributors><titles><title>AndroSimilar: Robust signature for detecting variants of Android malware</title><secondary-title>Journal of Information Security and Applications</secondary-title></titles><periodical><full-title>Journal of Information Security and Applications</full-title></periodical><pages>66-80</pages><volume>22</volume><keywords><keyword>Android malware</keyword><keyword>Code obfuscation</keyword><keyword>Similarity digest</keyword><keyword>Statistical features</keyword></keywords><dates><year>2015</year></dates><publisher>Elsevier Ltd</publisher><electronic-resource-num>10.1016/j.jisa.2014.10.011</electronic-resource-num><urls><pdf-urls><url>internal-pdf://faruki2015.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.jisa.2014.10.011</url></web-urls></urls><abstract>Android Smartphone popularity has increased malware threats forcing security researchers and AntiVirus (AV) industry to carve out smart methods to defend Smartphone against malicious apps. Robust signature based solutions to mitigate threats become necessary to protect the Smartphone and confidential user data. Here we present AndroSimilar, an approach which generates signatures by extracting statistically robust features, to detect malicious Android apps. Proposed method is effective against code obfuscation and repackaging, widely used techniques to propagate unseen variants of known malware by evading AV signatures. AndroSimilar is a syntactic foot-printing mechanism that finds regions of statistical similarity with known malware to detect those unknown, zero day samples. We also show that syntactic similarity considering whole app, rather than just embedded DEX file is more effective, contrary to known fuzzy hashing approach. We also apply clustering algorithm to identify small set of family signatures to reduce overall signature database size. Proposed approach can be refined to deploy as Smartphone AV.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Shu, Xiaokui</author><author>Zhang, Jing</author><author>Yao, Danfeng</author><author>Feng, Wu Chun</author></authors></contributors><titles><title>Fast detection of transformed data leaks</title><secondary-title>IEEE Transactions on Information Forensics and Security</secondary-title></titles><periodical><full-title>IEEE Transactions on Information Forensics and Security</full-title></periodical><pages>528-542</pages><volume>11</volume><issue>3</issue><keywords><keyword>Alignment</keyword><keyword>Content inspection</keyword><keyword>Data leak detection</keyword><keyword>Dynamic programming</keyword><keyword>Parallelism</keyword><keyword>Sampling</keyword></keywords><dates><year>2016</year></dates><isbn>6024123051</isbn><electronic-resource-num>10.1109/TIFS.2015.2503271</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Fast Detection of Transformed Data Leaks.pdf</url></pdf-urls></urls><abstract>— The leak of sensitive data on computer systems poses a serious threat to organizational security. Statistics show that the lack of proper encryption on files and communications due to human errors is one of the leading causes of data loss. Organizations need tools to identify the exposure of sensitive data by screening the content in storage and transmission, i.e., to detect sensitive information being stored or transmit-ted in the clear. However, detecting the exposure of sensitive information is challenging due to data transformation in the content. Transformations (such as insertion and deletion) result in highly unpredictable leak patterns. In this paper, we utilize sequence alignment techniques for detecting complex data-leak patterns. Our algorithm is designed for detecting long and inexact sensitive data patterns. This detection is paired with a comparable sampling algorithm, which allows one to compare the similarity of two separately sampled sequences. Our system achieves good detection accuracy in recognizing transformed leaks. We implement a parallelized version of our algorithms in graphics processing unit that achieves high analysis throughput. We demonstrate the high multithreading scalability of our data leak detection method required by a sizable organization.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Text, Full</author></authors></contributors><titles><title>FM 99 . 9 , Radio Virus : Exploiting FM Radio Broadcasts for Malware Deployment</title></titles><periodical/><pages>8-9</pages><volume>8</volume><issue>0</issue><keywords/><dates><year>2015</year></dates><electronic-resource-num>10.1109/TIFS.2013.2259818</electronic-resource-num><urls><pdf-urls><url>internal-pdf://FM 99.9- Radio Virus Exploiting FM Radio Broadcasts for Malware Deployment.pdf</url></pdf-urls></urls></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Mtibaa, Abderrahmen</author><author>Harras, Khaled A.</author><author>Alnuweiri, Hussein</author></authors></contributors><titles><title>From botnets to MobiBots: A novel malicious communication paradigm for mobile botnets</title><secondary-title>IEEE Communications Magazine</secondary-title></titles><periodical><full-title>IEEE Communications Magazine</full-title></periodical><pages>61-67</pages><volume>53</volume><issue>8</issue><keywords/><dates><year>2015</year></dates><electronic-resource-num>10.1109/MCOM.2015.7180509</electronic-resource-num><urls><pdf-urls><url>internal-pdf://From botnets to MobiBots a novel malicious communication paradigm for mobile botnets.pdf</url></pdf-urls></urls><abstract>Cyber security is moving from traditional infrastructure to sophisticated mobile infrastructureless threats. A major concern is that such imminent transition is happening at a rate far exceeding the evolution of security solutions. In fact, the transformation of mobile devices into highly capable computing platforms makes the possibility of security attacks originating from within the mobile network a reality. Today, mobile devices are capable of initiating sophisticated cyberattacks, especially when they coordinate together to form what we call a MobiBot. MobiBots differ from classical botnets in that they exploit mobile operating system vulnerabilities and the advantages of device-to-device communication to mask malicious code propagation.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Gadyatskaya, Olga</author><author>Massacci, Fabio</author><author>Nguyen, Quang Huy</author><author>Chetali, Boutheina</author></authors></contributors><titles><title>Load time code validation for mobile phone Java Cards</title><secondary-title>Journal of Information Security and Applications</secondary-title></titles><periodical><full-title>Journal of Information Security and Applications</full-title></periodical><pages>108-129</pages><volume>18</volume><issue>2-3</issue><keywords><keyword>Java Card</keyword><keyword>Load time application validation</keyword><keyword>Secure elements</keyword><keyword>Security-by-contract</keyword></keywords><dates><year>2013</year></dates><publisher>Elsevier Ltd</publisher><electronic-resource-num>10.1016/j.jisa.2013.07.004</electronic-resource-num><urls><pdf-urls><url>internal-pdf://gadyatskaya2013.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.jisa.2013.07.004</url></web-urls></urls><abstract>Over-the-air (OTA) application installation and updates have become a common experience for many end-users of mobile phones. In contrast, OTA updates for applications on the secure elements (such as smart cards) are still hindered by the challenging hardware and certification requirements. The paper describes a security framework for Java Card-based secure element applications. Each application can declare a set of services it provides, a set of services it wishes to call, and its own security policy. An on-card checker verifies compliance and enforces the policy; thus an off-card validation of the application is no longer required. The framework has been optimized in order to be integrated with the run-time environment embedded into a concrete card. This integration has been tried and tested by a smart card manufacturer. In this paper we present the architecture of the framework and provide the implementation footprint which demonstrates that our solution fits on a real secure element. We also report the intricacies of integrating a research prototype with a real Java Card platform. © 2013 Elsevier Ltd. All rights reserved.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Fitzgerald, William M.</author><author>Neville, Ultan</author><author>Foley, Simon N.</author></authors></contributors><titles><title>MASON: Mobile autonomic security for network access controls</title><secondary-title>Journal of Information Security and Applications</secondary-title></titles><periodical><full-title>Journal of Information Security and Applications</full-title></periodical><pages>14-29</pages><volume>18</volume><issue>1</issue><keywords><keyword>Firewalls</keyword><keyword>Security configuration</keyword><keyword>Smartphone threats</keyword></keywords><dates><year>2013</year></dates><publisher>Elsevier Ltd</publisher><electronic-resource-num>10.1016/j.jisa.2013.08.001</electronic-resource-num><urls><pdf-urls><url>internal-pdf://fitzgerald2013.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.jisa.2013.08.001</url></web-urls></urls><abstract>Smartphones are on par with modern desktop environments in terms of operating system and hardware functionality. As a consequence, threats to desktop environments are also applicable to smartphones in addition to traditional threats to mobile phones. End-user management of security configurations that mitigate smartphone threats is complex and error-prone. As a consequence, misconfiguration of a security configuration may unnecessarily expose a smartphone to known threats. In this paper, a threat-based model for smartphone security configuration is presented. To evaluate the approach, a prototype Android security app, MASON, is developed to automatically manage firewall configurations on behalf of the end-user. A case study based on firewall access control demonstrates how automated firewall configuration recommendations can be made based on catalogues of countermeasures. These countermeasures are drawn from best-practice standards such as NIST 800-124, a guideline on cell phone and PDA security and NIST 800-41-rev1, a guideline on firewall security configuration. © 2013 Elsevier Ltd. All rights reserved.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Hovav, Anat</author><author>Putri, Frida Ferdani</author></authors></contributors><titles><title>This is my device! Why should I follow your rules? Employees’ compliance with BYOD security policy</title><secondary-title>Pervasive and Mobile Computing</secondary-title></titles><periodical><full-title>Pervasive and Mobile Computing</full-title></periodical><pages>35-49</pages><volume>32</volume><keywords><keyword>BYOD</keyword><keyword>Freedom threat</keyword><keyword>Information security policy</keyword><keyword>Mobile virtualization</keyword><keyword>Organizational justice</keyword><keyword>Reactance theory</keyword></keywords><dates><year>2016</year></dates><publisher>Elsevier B.V.</publisher><electronic-resource-num>10.1016/j.pmcj.2016.06.007</electronic-resource-num><urls><pdf-urls><url>internal-pdf://hovav2016.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.pmcj.2016.06.007</url></web-urls></urls><abstract>This study examines employees’ intention to comply with organizational BYOD security policies (ISSP). We derived our research model from reactance, protection motivation and organizational justice theories. Our results demonstrate that employees perceived response efficacy and justice positively affect intention to comply with BYOD ISSP. Perceived freedom threat negatively affects compliance intention. Employees’ perceived cost associated with compliance behavior increases perceptions of freedom threat. Security awareness programs have a dual effect: an increase in employee's response efficacy (positive) and response cost (negative). The availability of an IT support team for BYOD increases employees’ response-efficacy and perceived justice.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Hung, Shih Hao</author><author>Hsiao, Shuen Wen</author><author>Teng, Yu Chi</author><author>Chien, Roger</author></authors></contributors><titles><title>Real-time and intelligent private data protection for the Android platform</title><secondary-title>Pervasive and Mobile Computing</secondary-title></titles><periodical><full-title>Pervasive and Mobile Computing</full-title></periodical><pages>231-242</pages><volume>24</volume><keywords><keyword>Android security</keyword><keyword>Information leakage</keyword><keyword>Mobile malware</keyword><keyword>PasDroid</keyword><keyword>Privacy</keyword></keywords><dates><year>2015</year></dates><publisher>Elsevier B.V.</publisher><isbn>15741192 (ISSN)</isbn><electronic-resource-num>10.1016/j.pmcj.2015.08.006</electronic-resource-num><urls><pdf-urls><url>internal-pdf://hung2015.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.pmcj.2015.08.006</url></web-urls></urls><abstract>As the number of smart mobile devices and applications continue to grow dramatically, private data stored and handled by such mobile devices have become the primary targets of hackers and malicious software. Today, many malicious mobile applications steal user information, make premium calls, and send advertisement messages without the user's permission. Unfortunately, the Android system, currently the most popular smart mobile platform, only provides the users with a simple permission granting mechanism during the installation of applications, which are often ignored since most of the users do not pay attention to the potential hidden risks. Even though some vendors have integrated mechanisms to let the users grant or revoke the permissions associated with any applications at any time, such mechanisms are rarely used because the users do not know when, how and what sensitive information have been leaked. In this paper, we proposed mechanisms to track the use of sensitive information by Android applications. We extended TaintDroid to build a real-time security framework, called PasDroid, with mechanisms to trace dubious data flow, map user-application interactions and alert the users about potential privacy leakage on the fly. The information provided by PasDroid enables the users to determine if a transmission should be allowed or blocked with intelligent security policies. Our experimental results show that PasDroid can be deployed with an affordable runtime overhead to help protect users against malicious applications. The design of security policies is key to eliminate false alarms and improve the user experience.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Gates, Christopher S.</author><author>Li, Ninghui</author><author>Peng, Hao</author><author>Sarma, Bhaskar</author><author>Qi, Yuan</author><author>Potharaju, Rahul</author><author>Nita-Rotaru, Cristina</author><author>Molloy, Ian</author></authors></contributors><titles><title>Generating summary risk scores for mobile applications</title><secondary-title>IEEE Transactions on Dependable and Secure Computing</secondary-title></titles><periodical><full-title>IEEE Transactions on Dependable and Secure Computing</full-title></periodical><pages>238-251</pages><volume>11</volume><issue>3</issue><keywords><keyword>Data mining</keyword><keyword>Malware</keyword><keyword>Mobile</keyword><keyword>Risk</keyword></keywords><dates><year>2014</year></dates><isbn>1545-5971 VO - 11</isbn><electronic-resource-num>10.1109/TDSC.2014.2302293</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Generating Summary Risk Scores for Mobile Applications.pdf</url></pdf-urls></urls><abstract>One of Android’s main defense mechanisms against malicious apps is a risk communication mechanism which, before a user installs an app, warns the user about the permissions the app requires, trusting that the user will make the right decision. This approach has been shown to be ineffective as it presents the risk information of each app in a “stand-alone” fashion and in a way that requires too much technical knowledge and time to distill useful information. We discuss the desired properties of risk signals and relative risk scores for Android apps in order to generate another metric that users can utilize when choosing apps. We present a wide range of techniques to generate both risk signals and risk scores that are based on heuristics as well as principled machine learning techniques. Experimental results conducted using real-world data sets show that these methods can effectively identify malware as very risky, are simple to understand, and easy to use.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Xiong, Ping</author><author>Wang, Xiaofeng</author><author>Niu, Wenjia</author><author>Zhu, Tianqing</author><author>Li, Gang</author></authors></contributors><titles><title>Android malware detection with contrasting permission patterns</title><secondary-title>China Communications</secondary-title></titles><periodical><full-title>China Communications</full-title></periodical><pages>1-14</pages><volume>11</volume><issue>8</issue><keywords><keyword>Android</keyword><keyword>classification</keyword><keyword>contrast set</keyword><keyword>malware detection</keyword><keyword>permission pattern</keyword></keywords><dates><year>2014</year></dates><electronic-resource-num>10.1109/CC.2014.6911083</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Android Malware Detection with Contrasting_2014.pdf</url><url>internal-pdf://Android malware detection with contrasting permission patterns.pdf</url></pdf-urls></urls></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Shan, Zhiyong</author><author>Wang, Xin</author></authors></contributors><titles><title>Growing grapes in your computer to defend against malware</title><secondary-title>IEEE Transactions on Information Forensics and Security</secondary-title></titles><periodical><full-title>IEEE Transactions on Information Forensics and Security</full-title></periodical><pages>196-207</pages><volume>9</volume><issue>2</issue><keywords><keyword>Malware detection</keyword><keyword>OS-level information flow</keyword><keyword>behavior</keyword></keywords><dates><year>2014</year></dates><isbn>1556-6013 VO - 9</isbn><electronic-resource-num>10.1109/TIFS.2013.2291066</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Growing Grapes in Your Computer to Defend Against Malware.pdf</url></pdf-urls></urls><abstract>Behavior-based detection is promising to resolve the pressing security problem of malware. However, the great challenge lies in how to detect malware in a both accurate and light-weight manner. In this paper, we propose a novel behavior-based detection method, named growing grapes, aiming to enable accurate online detection. It consists of a clustering engine and detection engine. The clustering engine groups the objects, e.g., processes and files, of a suspicious program together into a cluster, just like growing grapes. The detection engine recognizes the cluster as malicious if the behaviors of the cluster match a predefined behavior template formed by a set of discrete behaviors. The approach is accurate since it identifies a malware based on multiple behaviors and the source of the processes requesting the behaviors. The approach is also light-weight as it uses OS-level information flows instead of data flows that generally impose significant performance impact on the system. To further improve the performance, a novel method of organizing the behavior template and template database is proposed, which not only makes the template matching process very quick, but also makes the storage space small and fixed. Furthermore, the detection accuracy and performance are optimized to the best degree using a combinatorial optimization algorithm, which properly selects and combines multiple behaviors to form a template for malware detection. Finally, the approach novelly identifies malicious OS objects in a cluster fashion rather than one by one as done in traditional methods, which help users to thoroughly eliminate the changes of a malware without malware family knowledge. Compared with commercial antimalware tools, extensive experiments show that our approach can detect new malware samples with higher detection rate and lower false positive rate while imposing low overhead on the system.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Suarez-Tangil, Guillermo</author><author>Tapiador, Juan E.</author><author>Lombardi, Flavio</author><author>Pietro, Roberto Di</author></authors></contributors><titles><title>Alterdroid: Differential Fault Analysis of Obfuscated Smartphone Malware</title><secondary-title>IEEE Transactions on Mobile Computing</secondary-title></titles><periodical><full-title>IEEE Transactions on Mobile Computing</full-title></periodical><pages>789-802</pages><volume>15</volume><issue>4</issue><keywords><keyword>Computer security</keyword><keyword>Malware</keyword><keyword>Mobile computing</keyword></keywords><dates><year>2016</year></dates><isbn>1536-1233</isbn><electronic-resource-num>10.1109/TMC.2015.2444847</electronic-resource-num><urls><pdf-urls><url>internal-pdf://ALTERDROID_Differential Fault Analysis of_2016.pdf</url><url>internal-pdf://- Differential Fault Analysis of Obfuscated Smartphone Malware.pdf</url></pdf-urls></urls><abstract>Malware for smartphones has rocketed over the last years. Market operators face the challenge of keeping their stores free from malicious apps, a task that has become increasingly complex as malware developers are progressively using advanced techniques to defeat malware detection tools. One such technique commonly observed in recent malware samples consists of hiding and obfuscating modules containing malicious functionality in places that static analysis tools overlook (e.g., within data objects). In this paper, we describe ALTERDROID, a dynamic analysis approach for detecting such hidden or obfuscated malware components distributed as parts of an app package. The key idea in ALTERDROID consists of analyzing the behavioral differences between the original app and a number of automatically generated versions of it, where a number of modifications (faults) have been carefully injected. Observable differences in terms of activities that appear or vanish in the modified app are recorded, and the resulting differential signature is analyzed through a pattern-matching process driven by rules that relate different types of hidden functionalities with patterns found in the signature. A thorough justification and a description of the proposed model are provided. The extensive experimental results obtained by testing ALTERDROID over relevant apps and malware samples support the quality and viability of our proposal.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Crussell, Jonathan</author><author>Gibler, Clint</author><author>Chen, Hao</author></authors></contributors><titles><title>AnDarwin: Scalable Detection of Android Application Clones Based on Semantics</title><secondary-title>IEEE Transactions on Mobile Computing</secondary-title></titles><periodical><full-title>IEEE Transactions on Mobile Computing</full-title></periodical><pages>2007-2019</pages><volume>14</volume><issue>10</issue><keywords><keyword>Program analysis</keyword><keyword>clustering</keyword><keyword>mobile applications</keyword><keyword>plagiarism detection</keyword></keywords><dates><year>2015</year></dates><isbn>9783642402029</isbn><electronic-resource-num>10.1109/TMC.2014.2381212</electronic-resource-num><urls><pdf-urls><url>internal-pdf://AnDarwin_Scalable Detection of Android_2015.pdf</url><url>internal-pdf://AnDarwin Scalable Detection of Android Application Clones Based on Semantics.pdf</url></pdf-urls></urls><abstract>Smartphones rely on their vibrant application markets; however, plagiarism threatens the long-term health of these markets. We present a scalable approach to detecting similar Android apps based on their semantic information. We implement our approach in a tool called AnDarwin and evaluate it on 265,359 apps collected from 17 markets including Google Play and numerous third-party markets. In contrast to earlier approaches, AnDarwin has four advantages: it avoids comparing apps pairwise, thus greatly improving its scalability; it analyzes only the app code and does not rely on other information � such as the app�s market, signature, or description � thus greatly increasing its reliability; it can detect both full and partial app similarity; and it can automatically detect library code and remove it from the similarity analysis.We present two use cases for AnDarwin: finding similar apps by different developers (�clones�) and similar apps from the same developer (�rebranded�). In ten hours, AnDarwin detected at least 4,295 apps that are the victims of cloning and 36,106 rebranded apps. Additionally, AnDarwin detects similar code that is injected into many apps, which may indicate the spread of malware. Our evaluation demonstrates AnDarwin�s ability to accurately detect similar apps on a large scale.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Shao, Yuru</author><author>Luo, Xiapu</author><author>Qian, Chenxiong</author></authors></contributors><titles><title>RootGuard: Protecting rooted android phones</title><secondary-title>Computer</secondary-title></titles><periodical><full-title>Computer</full-title></periodical><pages>32-40</pages><volume>47</volume><issue>6</issue><keywords><keyword>Android</keyword><keyword>RootGuard</keyword><keyword>malware</keyword><keyword>root privilege</keyword><keyword>root-management systems</keyword><keyword>security</keyword><keyword>smartphone security</keyword></keywords><dates><year>2014</year></dates><isbn>0018-9162 VO  - 47</isbn><electronic-resource-num>10.1109/MC.2014.163</electronic-resource-num><urls><pdf-urls><url>internal-pdf://RootGuard_2014.pdf</url><url>internal-pdf://RootGuard Protecting Rooted Android Phones.pdf</url></pdf-urls></urls><abstract>Though popular for achieving full operation functionality, rooting Android phones opens these devices to significant security threats. RootGuard offers protection from malware with root privileges while providing user flexibility and control. The Web...</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Rastogi, Vaibhav</author><author>Chen, Yan</author><author>Jiang, Xuxian</author></authors></contributors><titles><title>Catch me if you can: Evaluating android anti-malware against transformation attacks</title><secondary-title>IEEE Transactions on Information Forensics and Security</secondary-title></titles><periodical><full-title>IEEE Transactions on Information Forensics and Security</full-title></periodical><pages>99-108</pages><volume>9</volume><issue>1</issue><keywords><keyword>Android</keyword><keyword>Anti-malware</keyword><keyword>Malware</keyword><keyword>Mobile</keyword></keywords><dates><year>2014</year></dates><isbn>1556-6013</isbn><electronic-resource-num>10.1109/TIFS.2013.2290431</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Catch Me If You Can_Evaluating Android_2014.pdf</url><url>internal-pdf://Catch Me If You Can Evaluating Android Anti-Malware Against Transformation Attacks.pdf</url></pdf-urls></urls><abstract>Mobile malware threats (e.g., on Android) have recently become a real concern. In this paper, we evaluate the state-of-the-art commercial mobile anti-malware products for Android and test how resistant they are against various common obfuscation techniques (even with known malware). Such an evaluation is important for not only measuring the available defense against mobile malware threats, but also proposing effective, next-generation solutions. We developed DroidChameleon, a systematic framework with various transformation techniques, and used it for our study. Our results on 10 popular commercial anti-malware applications for Android are worrisome: none of these tools is resistant against common malware transformation techniques. In addition, a majority of them can be trivially defeated by applying slight transformation over known malware with little effort for malware authors. Finally, in light of our results, we propose possible remedies for improving the current state of malware detection on mobile devices.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Fan, Ming</author><author>Liu, Jun</author><author>Wang, Wei</author><author>Li, Haifei</author><author>Tian, Zhenzhou</author><author>Liu, Ting</author></authors></contributors><titles><title>DAPASA: Detecting Android Piggybacked Apps Through Sensitive Subgraph Analysis</title><secondary-title>IEEE Transactions on Information Forensics and Security</secondary-title></titles><periodical><full-title>IEEE Transactions on Information Forensics and Security</full-title></periodical><pages>1772-1785</pages><volume>12</volume><issue>8</issue><keywords><keyword>Piggybacked apps</keyword><keyword>malware detection</keyword><keyword>sensitive API</keyword><keyword>sensitive subgraph</keyword><keyword>static analysis</keyword></keywords><dates><year>2017</year></dates><electronic-resource-num>10.1109/TIFS.2017.2687880</electronic-resource-num><urls><pdf-urls><url>internal-pdf://DAPASA Detecting Android Piggybacked Apps_2017.pdf</url><url>internal-pdf://DAPASA Detecting Android Piggybacked Apps Through Sensitive Subgraph Analysis.pdf</url></pdf-urls></urls><abstract>© 2017 IEEE.With the exponential growth of smartphone adoption, malware attacks on smartphones have resulted in serious threats to users, especially those on popular platforms, such as Android. Most Android malware is generated by piggybacking malicious payloads into benign applications (apps), which are called piggybacked apps. In this paper, we propose DAPASA, an approach to detect Android piggybacked apps through sensitive subgraph analysis. Two assumptions are established to reflect the different invocation patterns of sensitive APIs in the injected malicious payloads (rider) of a piggybacked app and in its host app (carrier). With these two assumptions, DAPASA generates a sensitive subgraph (SSG) to profile the most suspicious behavior of an app. Five features are constructed from SSG to depict the invocation patterns. The five features are fed into the machine learning algorithms to detect whether the app is piggybacked or benign. DAPASA is evaluated on a large real-world data set consisting of 2551 piggybacked apps and 44 921 popular benign apps. Extensive evaluation results demonstrate that the proposed approach exhibits an impressive detection performance compared with that of three baseline approaches even with only five numeric features. Furthermore, the proposed approach can complement permission-based approaches and API-based approaches with the combination of our five features from a new perspective of the invocation structure.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>La Polla, Mariantonietta</author><author>Martinelli, Fabio</author><author>Sgandurra, Daniele</author></authors></contributors><titles><title>A Survey on Security for Mobile Devices</title><secondary-title>IEEE Communications Surveys &amp; Tutorials</secondary-title></titles><periodical><full-title>IEEE Communications Surveys &amp; Tutorials</full-title></periodical><pages>446-471</pages><volume>15</volume><issue>1</issue><keywords><keyword>Bluetooth</keyword><keyword>IDS-based models</keyword><keyword>Intrusion Detection</keyword><keyword>Malware</keyword><keyword>Mobile Malware</keyword><keyword>Mobile Security</keyword><keyword>Mobile communication</keyword><keyword>Network security</keyword><keyword>Smart phones</keyword><keyword>Trojan horses</keyword><keyword>Trusted Mobile</keyword><keyword>communication channels</keyword><keyword>invasive software</keyword><keyword>malware writers</keyword><keyword>mobile devices</keyword><keyword>mobile services</keyword><keyword>security</keyword><keyword>smart phones</keyword><keyword>telecommunication channels</keyword><keyword>telecommunication security</keyword><keyword>ubiquitous computing</keyword><keyword>ubiquitous services</keyword></keywords><dates><year>2013</year></dates><isbn>1553-877X</isbn><electronic-resource-num>10.1109/SURV.2012.013012.00028</electronic-resource-num><urls><pdf-urls><url>internal-pdf://A Survey on Security for Mobile Devices_2013.pdf</url><url>internal-pdf://A Survey on Security for Mobile Devices.pdf</url></pdf-urls><web-urls><url>http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6170530%5Cnhttp://www.scopus.com/inward/record.url?eid=2-s2.0-84873712223&amp;partnerID=tZOtx3y1</url></web-urls></urls><abstract>Nowadays, mobile devices are an important part of our everyday lives since they enable us to access a large variety of ubiquitous services. In recent years, the availability of these ubiquitous and mobile services has significantly increased due to the different form of connectivity provided by mobile devices, such as GSM, GPRS, Bluetooth and Wi-Fi. In the same trend, the number and typologies of vulnerabilities exploiting these services and communication channels have increased as well. Therefore, smartphones may now represent an ideal target for malware writers. As the number of vulnerabilities and, hence, of attacks increase, there has been a corresponding rise of security solutions proposed by researchers. Due to the fact that this research field is immature and still unexplored in depth, with this paper we aim to provide a structured and comprehensive overview of the research on security solutions for mobile devices. This paper surveys the state of the art on threats, vulnerabilities and security solutions over the period 2004-2011, by focusing on high-level attacks, such those to user applications. We group existing approaches aimed at protecting mobile devices against these classes of attacks into different categories, based upon the detection principles, architectures, collected data and operating systems, especially focusing on IDS-based models and tools. With this categorization we aim to provide an easy and concise view of the underlying model adopted by each approach.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Suarez-Tangil, G.</author><author>Tapiador, J.E.</author><author>Peris-Lopez</author><author>Ribagorda, P.</author></authors></contributors><titles><title>Detection and Analysis of Malware for Smart Devices</title><secondary-title>IEEE Commun. Surv. Tutor</secondary-title></titles><periodical><full-title>IEEE Commun. Surv. Tutor</full-title></periodical><pages>961-987</pages><volume>16</volume><issue>2</issue><keywords/><dates><year>2014</year></dates><urls><pdf-urls><url>internal-pdf://Evolution, Detection and Analysis of Malware for_2014.pdf</url><url>internal-pdf://Evolution- Detection and Analysis of Malware for Smart Devices.pdf</url></pdf-urls></urls></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Neisse, Ricardo</author><author>Steri, Gary</author><author>Geneiatakis, Dimitris</author><author>Nai Fovino, Igor</author></authors></contributors><titles><title>A privacy enforcing framework for Android applications</title><secondary-title>Computers and Security</secondary-title></titles><periodical><full-title>Computers and Security</full-title></periodical><pages>257-277</pages><volume>62</volume><keywords><keyword>Android</keyword><keyword>App instrumentation</keyword><keyword>Permission control</keyword><keyword>Policy enforcement</keyword><keyword>Privacy</keyword></keywords><dates><year>2016</year></dates><publisher>Elsevier Ltd</publisher><electronic-resource-num>10.1016/j.cose.2016.07.005</electronic-resource-num><urls><pdf-urls><url>internal-pdf://17.pdf</url><url>internal-pdf://27.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.cose.2016.07.005</url></web-urls></urls><abstract>The widespread adoption of the Android operating system in a variety type of devices ranging from smart phones to smart TVs, makes it an interesting target for developers of malicious applications. One of the main flaws exploited by these developers is the permissions granting mechanism, which does not allow users to easily understand the privacy implications of the granted permissions. In this paper, we propose an approach to enforce fine-grained usage control privacy policies that enable users to control the access of applications to sensitive resources through application instrumentation. The purpose of this work is to enhance user control on privacy, confidentiality and security of their mobile devices, with regards to application intrusive behaviours. Our approach relies on instrumentation techniques and includes a refinement step where high-level resource-centric abstract policies defined by users are automatically refined to enforceable concrete policies. The abstract policies consider the resources being used and not the specific multiple concrete API methods that may allow an app to access the specific sensitive resources. For example, access to the user location may be done using multiple API methods that should be instrumented and controlled according to the user selected privacy policies. We show how our approach can be applied in Android applications and discuss performance implications under different scenarios.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wang, Wei</author><author>Wang, Xing</author><author>Feng, Dawei</author><author>Liu, Jiqiang</author><author>Han, Zhen</author><author>Zhang, Xiangliang</author></authors></contributors><titles><title>Exploring permission-induced risk in android applications for malicious application detection</title><secondary-title>IEEE Transactions on Information Forensics and Security</secondary-title></titles><periodical><full-title>IEEE Transactions on Information Forensics and Security</full-title></periodical><pages>1869-1882</pages><volume>9</volume><issue>11</issue><keywords><keyword>Android security</keyword><keyword>Android system</keyword><keyword>Intrusion detection</keyword><keyword>Malware detection</keyword><keyword>Permission usage analysis</keyword></keywords><dates><year>2014</year></dates><isbn>1556-6013 VO - 9</isbn><electronic-resource-num>10.1109/TIFS.2014.2353996</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Exploring Permission-Induced Risk in Android_2014.pdf</url><url>internal-pdf://Exploring Permission-Induced Risk in Android Applications for Malicious Application Detection.pdf</url></pdf-urls></urls><abstract>Android has been a major target of malicious applications (malapps). How to detect and keep the malapps out of the app markets is an ongoing challenge. One of the central design points of Android security mechanism is permission control that restricts the access of apps to core facilities of devices. However, it imparts a significant responsibility to the app developers with regard to accurately specifying the requested permissions and to the users with regard to fully understanding the risk of granting certain combinations of permissions. Android permissions requested by an app depict the app's behavioral patterns. In order to help understanding Android permissions, in this paper, we explore the permission-induced risk in Android apps on three levels in a systematic manner. First, we thoroughly analyze the risk of an individual permission and the risk of a group of collaborative permissions. We employ three feature ranking methods, namely, mutual information, correlation coefficient, and T-test to rank Android individual permissions with respect to their risk. We then use sequential forward selection as well as principal component analysis to identify risky permission subsets. Second, we evaluate the usefulness of risky permissions for malapp detection with support vector machine, decision trees, as well as random forest. Third, we in depth analyze the detection results and discuss the feasibility as well as the limitations of malapp detection based on permission requests. We evaluate our methods on a very large official app set consisting of 310 926 benign apps and 4868 real-world malapps and on a third-party app sets. The empirical results show that our malapp detectors built on risky permissions give satisfied performance (a detection rate as 94.62% with a false positive rate as 0.6%), catch the malapps' essential patterns on violating permission access regulations, and are universally applicable to unknown malapps (detection rate as 74.03%).</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Conti, Mauro</author><author>Mancini, Luigi Vincenzo</author><author>Spolaor, Riccardo</author><author>Verde, Nino Vincenzo</author></authors></contributors><titles><title>Analyzing Android Encrypted Network Traffic to Identify User Actions</title><secondary-title>IEEE Transactions on Information Forensics and Security</secondary-title></titles><periodical><full-title>IEEE Transactions on Information Forensics and Security</full-title></periodical><pages>114-125</pages><volume>11</volume><issue>1</issue><keywords/><dates><year>2016</year></dates><isbn>4000005057</isbn><electronic-resource-num>10.1109/TIFS.2015.2478741</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Analyzing Android Encrypted Network Traffic_2016.pdf</url><url>internal-pdf://Analyzing Android Encrypted Network Traffic to Identify User Actions.pdf</url></pdf-urls></urls><abstract>Mobile devices can be maliciously exploited to violate the privacy of people. In most attack scenarios, the adversary takes the local or remote control of the mobile device, by leveraging a vulnerability of the system, hence sending back the collected information to some remote web service. In this paper, we consider a different adversary, who does not interact actively with the mobile device, but he is able to eavesdrop the network traffic of the device from the network side (e.g., controlling a Wi-Fi access point). The fact that the network traffic is often encrypted makes the attack even more challenging. In this paper, we investigate to what extent such an external attacker can identify the specific actions that a user is performing on her mobile apps. We design a system that achieves this goal using advanced machine learning techniques. We built a complete implementation of this system, and we also run a thorough set of experiments, which show that our attack can achieve accuracy and precision higher than 95%, for most of the considered actions. We compared our solution with the three state-of-the-art algorithms, and confirming that our system outperforms all these direct competitors.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Chandramohan, Mahinthan</author><author>Tan, Hee Beng Kuan</author><author>Beng, Hee</author><author>Block S2, Kuan Tan</author></authors></contributors><titles><title>Detection of mobile malware in the wild</title><secondary-title>Computer</secondary-title></titles><periodical><full-title>Computer</full-title></periodical><pages>65-71</pages><volume>45</volume><issue>9</issue><keywords><keyword>mobile malware detection</keyword><keyword>mobile security</keyword><keyword>smartphone protection</keyword></keywords><dates><year>2012</year></dates><isbn>0018-9162</isbn><electronic-resource-num>10.1109/MC.2012.36</electronic-resource-num><urls><pdf-urls><url>internal-pdf://Detection of Mobile Malware_2012.pdf</url><url>internal-pdf://Detection of Mobile Malware in the Wild.pdf</url></pdf-urls></urls><abstract>Smartphones have become an essential part of human life and its usage has grown exponentially in the past few years. The growth of smartphone usage can be directly linked to its ability to support third-party applications that are offered through online application markets. Due to its worldwide adoption and widespread popularity, the mobile malware attacks also growing at an alarming rate (http://bit.ly/sbtujI). Malware authors make use of third-party applications to inject malicious content into smartphones and thus compromise phone &quot; s security. In response, mobile security research has become critical and focused on protecting smartphones from malware attacks and other security threats. In this paper, we present a survey of techniques that are used to detect mobile malware in the wild and discuss the limitations of current techniques and provide some tips to protect smartphones from potential security threats.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Cen, Lei</author><author>Gates, Christoher S.</author><author>Si, Luo</author><author>Li, Ninghui</author></authors></contributors><titles><title>A Probabilistic Discriminative Model for Android Malware Detection with Decompiled Source Code</title><secondary-title>IEEE Transactions on Dependable and Secure Computing</secondary-title></titles><periodical><full-title>IEEE Transactions on Dependable and Secure Computing</full-title></periodical><pages>400-412</pages><volume>12</volume><issue>4</issue><keywords><keyword>Android</keyword><keyword>discriminative model</keyword><keyword>machine learning</keyword><keyword>malicious application</keyword></keywords><dates><year>2015</year></dates><isbn>1545-5971 VO - PP</isbn><electronic-resource-num>10.1109/TDSC.2014.2355839</electronic-resource-num><urls><pdf-urls><url>internal-pdf://A Probabilistic Discriminative Model_2015.pdf</url><url>internal-pdf://A Probabilistic Discriminative Model for Android Malware Detection with Decompiled Source Code.pdf</url></pdf-urls></urls><abstract>Mobile devices are an important part of our everyday lives, and the Android platform has become a market leader. In recent years a number of approaches for Android malware detection have been proposed, using permissions, source code analysis, or dynamic analysis. In this paper, we propose to use a probabilistic discriminative model based on regularized logistic regression for Android malware detection. Through extensive experimental evaluation, we demonstrate that it can generate probabilistic outputs with highly accurate classification results. In particular, we propose to use Android API calls as features extracted from decompiled source code, and analyze and explore issues in feature granularity, feature representation, feature selection, and regularization. We show that the probabilistic discriminative model also works well with permissions, and substantially outperforms the state-of-the-art methods for Android malware detection with application permissions. Furthermore, the discriminative learning model achieves the best detection results by combining both decompiled source code and application permissions. To the best of our knowledge, this is the first research that proposes probabilistic discriminative model for Android malware detection with a thorough study of desired representation of decompiled source code and is the first research work for Android malware detection task that combines both analysis of decompiled source code and application permissions.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Elish, Karim O.</author><author>Shu, Xiaokui</author><author>Yao, Danfeng</author><author>Ryder, Barbara G.</author><author>Jiang, Xuxian</author></authors></contributors><titles><title>Profiling user-trigger dependence for Android malware detection</title><secondary-title>Computers and Security</secondary-title></titles><periodical><full-title>Computers and Security</full-title></periodical><pages>255-273</pages><volume>49</volume><issue>540</issue><keywords><keyword>Android malware</keyword><keyword>Malware detection</keyword><keyword>Static program analysis</keyword><keyword>User-intention</keyword><keyword>User-trigger dependence</keyword></keywords><dates><year>2015</year></dates><publisher>Elsevier Ltd</publisher><isbn>01674048 (ISSN)</isbn><electronic-resource-num>10.1016/j.cose.2014.11.001</electronic-resource-num><urls><pdf-urls><url>internal-pdf://7.pdf</url><url>internal-pdf://26.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.cose.2014.11.001</url></web-urls></urls><abstract>As mobile computing becomes an integral part of the modern user experience, malicious applications have infiltrated open marketplaces for mobile platforms. Malware apps stealthily launch operations to retrieve sensitive user or device data or abuse system resources. We describe a highly accurate classification approach for detecting malicious Android apps. Our method statically extracts a data-flow feature on how user inputs trigger sensitive API invocations, a property referred to as the user-trigger dependence. Our evaluation with 1433 malware apps and 2684 free popular apps gives a classification accuracy (2.1% false negative rate and 2.0% false positive rate) that is better than, or at least competitive against, the state-of-the-art. Our method also discovers new malicious apps in the Google Play market that cannot be detected by virus scanning tools. Our thesis in this mobile app classification work is to advocate the approach of benign property enforcement, i.e., extracting unique behavioral properties from benign programs and designing corresponding classification policies.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Guerar, Meriem</author><author>Merlo, Alessio</author><author>Migliardi, Mauro</author></authors></contributors><titles><title>Completely Automated Public Physical test to tell Computers and Humans Apart: A usability study on mobile devices</title><secondary-title>Future Generation Computer Systems</secondary-title></titles><periodical><full-title>Future Generation Computer Systems</full-title></periodical><keywords><keyword>CAPPCHA</keyword><keyword>CAPTCHA</keyword><keyword>Mobile</keyword><keyword>Security</keyword><keyword>Usability</keyword></keywords><dates><year>2016</year></dates><publisher>Elsevier B.V.</publisher><electronic-resource-num>10.1016/j.future.2017.03.012</electronic-resource-num><urls><pdf-urls><url>internal-pdf://video_7.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.future.2017.03.012</url></web-urls></urls><abstract>A very common approach adopted to fight the increasing sophistication and dangerousness of malware and hacking is to introduce more complex authentication mechanisms. This approach, however, introduces additional cognitive burdens for users and lowers the whole authentication mechanism acceptability to the point of making it unusable. On the contrary, what is really needed to fight the onslaught of automated attacks to users data and privacy is to first tell human and computers apart and then distinguish among humans to guarantee correct authentication. Such an approach is capable of completely thwarting any automated attempt to achieve unwarranted access while it allows keeping simple the mechanism dedicated to recognizing the legitimate user. This kind of approach is behind the concept of Completely Automated Public Turing test to tell Computers and Humans Apart (CAPTCHA), yet CAPTCHA leverages cognitive capabilities, thus the increasing sophistication of computers calls for more and more difficult cognitive tasks that make them either very long to solve or very prone to false negatives.We argue that this problem can be overcome by substituting the cognitive component of CAPTCHA with a different property that programs cannot mimic: the physical nature. In past work we have introduced the Completely Automated Public Physical test to tell Computer and Humans Apart (CAPPCHA) as a way to enhance the PIN authentication method for mobile devices and we have provided a proof of concept implementation. Similarly to CAPTCHA, this mechanism can also be used to prevent automated programs from abusing online services. However, to evaluate the real efficacy of the proposed scheme, an extended empirical assessment of CAPPCHA is required as well as a comparison of CAPPCHA performance with the existing state of the art. To this aim, in this paper we carry out an extensive experimental study on both the performance and the usability of CAPPCHA involving a high number of physical users, and we provide comparisons of CAPPCHA with existing flavors of CAPTCHA.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Li, Gang</author><author>Niu, Wenjia</author><author>Batten, Lynn</author></authors></contributors><titles><title>Special issue on behavior data security issues in network information propagation</title><secondary-title>Future Generation Computer Systems</secondary-title></titles><periodical><full-title>Future Generation Computer Systems</full-title></periodical><pages>120-121</pages><volume>36</volume><keywords/><dates><year>2014</year></dates><publisher>Elsevier B.V.</publisher><electronic-resource-num>10.1016/j.future.2014.02.005</electronic-resource-num><urls><pdf-urls><url>internal-pdf://video_12.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.future.2014.02.005</url></web-urls></urls></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>D'Orazio, Christian J.</author><author>Choo, Kim Kwang Raymond</author></authors></contributors><titles><title>A technique to circumvent SSL/TLS validations on iOS devices</title><secondary-title>Future Generation Computer Systems</secondary-title></titles><periodical><full-title>Future Generation Computer Systems</full-title></periodical><pages>366-374</pages><volume>74</volume><keywords><keyword>Certificate and public key validation</keyword><keyword>MiTM</keyword><keyword>OpenSSL</keyword><keyword>SSL pinning</keyword><keyword>Security</keyword><keyword>iOS security</keyword></keywords><dates><year>2017</year></dates><publisher>Elsevier B.V.</publisher><electronic-resource-num>10.1016/j.future.2016.08.019</electronic-resource-num><urls><pdf-urls><url>internal-pdf://video_8.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.future.2016.08.019</url></web-urls></urls><abstract>SSL/TLS validations such as certificate and public key pinning can reinforce the security of encrypted communications between Internet-of-Things devices and remote servers, and ensure the privacy of users. However, such implementations complicate forensic analysis and detection of information disclosure; say, when a mobile app breaches user's privacy by sending sensitive information to third parties. Therefore, it is crucial to develop the capacity to vet mobile apps augmenting the security of SSL/TLS traffic. In this paper, we propose a technique to bypass the system's default certificate validation as well as built-in SSL/TLS validations performed in iOS apps. We then demonstrate its utility by analysing 40 popular iOS social networking, electronic payment, banking, and cloud computing apps.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Moonsamy, Veelasha</author><author>Rong, Jia</author><author>Liu, Shaowu</author></authors></contributors><titles><title>Mining permission patterns for contrasting clean and malicious android applications</title><secondary-title>Future Generation Computer Systems</secondary-title></titles><periodical><full-title>Future Generation Computer Systems</full-title></periodical><pages>122-132</pages><volume>36</volume><keywords><keyword>Android permission</keyword><keyword>Biclustering</keyword><keyword>Contrast mining</keyword><keyword>Data mining</keyword><keyword>Permission pattern</keyword></keywords><dates><year>2014</year></dates><publisher>Elsevier B.V.</publisher><isbn>0167-739X</isbn><electronic-resource-num>10.1016/j.future.2013.09.014</electronic-resource-num><urls><pdf-urls><url>internal-pdf://video_5.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.future.2013.09.014</url></web-urls></urls><abstract>An Android application uses a permission system to regulate the access to system resources and users' privacy-relevant information. Existing works have demonstrated several techniques to study the required permissions declared by the developers, but little attention has been paid towards used permissions. Besides, no specific permission combination is identified to be effective for malware detection. To fill these gaps, we have proposed a novel pattern mining algorithm to identify a set of contrast permission patterns that aim to detect the difference between clean and malicious applications. A benchmark malware dataset and a dataset of 1227 clean applications has been collected by us to evaluate the performance of the proposed algorithm. Valuable findings are obtained by analyzing the returned contrast permission patterns. © 2013 Elsevier B.V. All rights reserved.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Nancy, Inria</author><author>Est, Grand</author></authors></contributors><titles><title>Vulnerability Assessment in Autonomic Networks and Services : A Survey</title></titles><periodical/><pages>1-17</pages><volume>16</volume><issue>2</issue><keywords/><dates><year>2013</year></dates><urls><pdf-urls><url>internal-pdf://Vulnerability Assessment in Autonomic Networks and Services A Survey.pdf</url></pdf-urls></urls></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Gurulian, Iakovos</author><author>Markantonakis, Konstantinos</author><author>Cavalaro, Lorenzo</author><author>Mayes, Keith</author></authors></contributors><titles><title>You can't touch this: Consumer-centric android application repackaging detection</title><secondary-title>Future Generation Computer Systems</secondary-title></titles><periodical><full-title>Future Generation Computer Systems</full-title></periodical><pages>1-9</pages><volume>65</volume><keywords><keyword>Android</keyword><keyword>Application repackaging</keyword><keyword>Effectiveness analysis</keyword><keyword>Electronic fraud</keyword><keyword>User privacy</keyword><keyword>User-centric security</keyword></keywords><dates><year>2016</year></dates><publisher>Elsevier B.V.</publisher><electronic-resource-num>10.1016/j.future.2016.05.021</electronic-resource-num><urls><pdf-urls><url>internal-pdf://video_6.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.future.2016.05.021</url></web-urls></urls><abstract>Application repackaging is a widely used method for malware distribution, revenue stealing and piracy. Repackaged applications are modified versions of original applications, that can potentially target large audiences based on the original application's popularity. In this paper, we propose an approach for detecting repackaged applications. Our approach takes advantage of the attacker's reluctance to significantly alter the elements that characterise an application without notably impacting the application's distribution. These elements include the application's name and icon. The detection is initiated from the client side, prior to an application's installation, making it application store agnostic. Our experimental results show that detection based on our algorithm is effective and efficient.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>D'Orazio, Christian J.</author><author>Choo, Kim Kwang Raymond</author></authors></contributors><titles><title>Circumventing iOS security mechanisms for APT forensic investigations: A security taxonomy for cloud apps</title><secondary-title>Future Generation Computer Systems</secondary-title></titles><periodical><full-title>Future Generation Computer Systems</full-title></periodical><keywords><keyword>Advanced persistent threat investigations</keyword><keyword>IOS cloud apps</keyword><keyword>IOS cloud forensics</keyword><keyword>IOS security taxonomy</keyword></keywords><dates><year>2016</year></dates><publisher>Elsevier B.V.</publisher><electronic-resource-num>10.1016/j.future.2016.11.010</electronic-resource-num><urls><pdf-urls><url>internal-pdf://video_9.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.future.2016.11.010</url></web-urls></urls><abstract>Mobile devices and apps such as cloud apps are a potential attack vector in an advanced persistent threat (APT) incident, due to their capability to store sensitive data (e.g. backup of private and personal data in digital repositories) and access sensitive resources (e.g. compromising the device to access an organisational network). These devices and apps are, thus, a rich source of digital evidence. It is vital to be able to identify artefacts of forensic interest transmitted to/from and stored on the devices. However, security mechanisms in mobile platforms and apps can complicate the forensic acquisition of data. In this paper, we present techniques to circumvent security mechanisms and facilitate collection of artefacts from cloud apps. We then demonstrate the utility of the circumvention techniques using 18 popular iOS cloud apps as case studies. Based on the findings, we present the first iOS cloud app security taxonomy that could be used in the investigation of an APT incident.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Li, Jianxin</author><author>Li, Bo</author><author>Wo, Tianyu</author><author>Hu, Chunming</author><author>Huai, Jinpeng</author><author>Liu, Lu</author><author>Lam, K. P.</author></authors></contributors><titles><title>CyberGuarder: A virtualization security assurance architecture for green cloud computing</title><secondary-title>Future Generation Computer Systems</secondary-title></titles><periodical><full-title>Future Generation Computer Systems</full-title></periodical><pages>379-390</pages><volume>28</volume><issue>2</issue><keywords><keyword>Cloud computing</keyword><keyword>Green computing</keyword><keyword>Security isolation</keyword><keyword>Virtual security appliance</keyword><keyword>Virtualization</keyword></keywords><dates><year>2012</year></dates><isbn>0167-739X</isbn><electronic-resource-num>10.1016/j.future.2011.04.012</electronic-resource-num><urls><pdf-urls><url>internal-pdf://video_13.pdf</url></pdf-urls></urls><abstract>As the sizes of IT infrastructure continue to grow, cloud computing is a natural extension of virtualisation technologies that enable scalable management of virtual machines over a plethora of physically connected systems. The so-called virtualisation-based cloud computing paradigm offers a practical approach to green IT/clouds, which emphasise the construction and deployment of scalable, energy-efficient network software applications (NetApp) by virtue of improved utilisation of the underlying resources. The latter is typically achieved through increased sharing of hardware and data in a multi-tenant cloud architecture/environment and, as such, accentuates the critical requirement for enhanced security services as an integrated component of the virtual infrastructure management strategy. This paper analyses the key security challenges faced by contemporary green cloud computing environments, and proposes a virtualisation security assurance architecture, CyberGuarder, which is designed to address several key security problems within the 'green' cloud computing context. In particular, CyberGuarder provides three different kinds of services; namely, a virtual machine security service, a virtual network security service and a policy based trust management service. Specifically, the proposed virtual machine security service incorporates a number of new techniques which include (1) a VMM-based integrity measurement approach for NetApp trusted loading, (2) a multi-granularity NetApp isolation mechanism to enable OS user isolation, and (3) a dynamic approach to virtual machine and network isolation for multiple NetApp's based on energy-efficiency and security requirements. Secondly, a virtual network security service has been developed successfully to provide an adaptive virtual security appliance deployment in a NetApp execution environment, whereby traditional security services such as IDS and firewalls can be encapsulated as VM images and deployed over a virtual security network in accordance with the practical configuration of the virtualised infrastructure. Thirdly, a security service providing policy based trust management is proposed to facilitate access control to the resources pool and a trust federation mechanism to support/optimise task privacy and cost requirements across multiple resource pools. Preliminary studies of these services have been carried out on our iVIC platform, with promising results. As part of our ongoing research in large-scale, energy-efficient/green cloud computing, we are currently developing a virtual laboratory for our campus courses using the virtualisation infrastructure of iVIC, which incorporates the important results and experience of CyberGuarder in a practical context. © 2011 Elsevier B.V. All rights reserved.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zhang, Zhiyong</author><author>Gupta, Brij B.</author></authors></contributors><titles><title>Social media security and trustworthiness: Overview and new direction</title><secondary-title>Future Generation Computer Systems</secondary-title></titles><periodical><full-title>Future Generation Computer Systems</full-title></periodical><keywords><keyword>Crowd computing</keyword><keyword>Measurement</keyword><keyword>Security</keyword><keyword>Social media networks</keyword><keyword>Trustworthiness</keyword></keywords><dates><year>2016</year></dates><publisher>Elsevier B.V.</publisher><electronic-resource-num>10.1016/j.future.2016.10.007</electronic-resource-num><urls><pdf-urls><url>internal-pdf://video_11.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.future.2016.10.007</url></web-urls></urls><abstract>The emerging social media with inherent capabilities seems to be gaining edge over comprehensiveness, diversity and wisdom, nevertheless its security and trustworthiness issues have also become increasingly serious, which need to be addressed urgently. The available studies mainly aim at both social media content and user security, including model, protocol, mechanism and algorithm. Unfortunately, there is a lack of investigating on effective and efficient evaluations and measurements for security and trustworthiness of various social media tools, platforms and applications, thus has effect on their further improvement and evolution. To address the challenge, this paper firstly made a survey on the state-of-the-art of social media networks security and trustworthiness particularly for the increasingly growing sophistication and variety of attacks as well as related intelligence applications. And then, we highlighted a new direction on evaluating and measuring those fundamental and underlying platforms, meanwhile proposing a hierarchical architecture for crowd evaluations based on signaling theory and crowd computing, which is essential for social media ecosystem. Finally, we conclude our work with several open issues and cutting-edge challenges.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Wang, Zhaoguo</author><author>Li, Chenglong</author><author>Yuan, Zhenlong</author><author>Guan, Yi</author><author>Xue, Yibo</author></authors></contributors><titles><title>DroidChain: A novel Android malware detection method based on behavior chains</title><secondary-title>Pervasive and Mobile Computing</secondary-title></titles><periodical><full-title>Pervasive and Mobile Computing</full-title></periodical><pages>3-14</pages><volume>32</volume><keywords><keyword>Android malware</keyword><keyword>Behavior chain</keyword><keyword>Malware installation</keyword><keyword>Privacy leakage</keyword><keyword>Privilege escalation</keyword><keyword>SMS financial charge</keyword></keywords><dates><year>2016</year></dates><publisher>Elsevier B.V.</publisher><isbn>1574-1192</isbn><electronic-resource-num>10.1016/j.pmcj.2016.06.018</electronic-resource-num><urls><pdf-urls><url>internal-pdf://wang2016.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.pmcj.2016.06.018</url></web-urls></urls><abstract>The drastic increase of Android malware has led to strong interest in automating malware analysis. In this paper, to fight against malware variants and zero-day malware, we proposed DroidChain: a method combining static analysis and a behavior chain model. We transform the malware detection problem into more accessible matrix form. Using this method, we propose four kinds of malware models, including privacy leakage, SMS financial charges, malware installation, and privilege escalation. To reduce time complexity, we propose the WxShall-extend algorithm. We had moved the prototype to GitHub and evaluate using 1260 malware samples. Experimental malware detection results demonstrate accuracy, precision, and recall of 73%–93%, 71%–99%, and 42%–92%, respectively. Calculation time accounts for 6.58% of the well-known Warshall algorithm's expense. Results demonstrate that our method, which can detect four kinds of malware simultaneously, is better than Androguard and Kirin.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Chen, Liang</author><author>Yan, Zheng</author><author>Zhang, Weidong</author><author>Kantola, Raimo</author></authors></contributors><titles><title>TruSMS: A trustworthy SMS spam control system based on trust management</title><secondary-title>Future Generation Computer Systems</secondary-title></titles><periodical><full-title>Future Generation Computer Systems</full-title></periodical><pages>77-93</pages><volume>49</volume><keywords><keyword>Performance evaluation</keyword><keyword>Spam control</keyword><keyword>Traffic analysis</keyword><keyword>Trust management</keyword><keyword>Trust mining</keyword></keywords><dates><year>2015</year></dates><publisher>Elsevier B.V.</publisher><isbn>10848045</isbn><electronic-resource-num>10.1016/j.future.2014.06.010</electronic-resource-num><urls><pdf-urls><url>internal-pdf://video_14.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.future.2014.06.010</url></web-urls></urls><abstract>The fast growth of mobile networks has greatly enriched our life by disseminating information and providing communications at any time and anywhere. However, at the same time, when people gather and exchange useful information, they also receive unwanted data and contents, such as spam and unsolicited commercial advertisements. SMS (Short Message Service) spam is one typical example of unwanted contents, which has caused a serious problem to mobile users by intruding their devices, occupying device memories and irritating the users. More critically, some of these fraudulent messages deceive users and cause them incalculable loss. SMS spam control has become a crucial issue that impacts the further success of mobile networks. A number of researches have been conducted to control unwanted contents or traffic, some are based on trust and reputation mechanisms. But the literature still lacks an effective solution for SMS spam control. In this paper, we present the design and implementation of an SMS spam control system named TruSMS based on trust management. It can control SMS spam from its source to destinations according to trust evaluation by analyzing spam detection behaviors and SMS traffic data. We evaluate TruSMS performance under a variety of intrusions and attacks with a prototype system implementation. The result shows that TruSMS is effective with regard to accuracy, efficiency and robustness, which imply its trustworthiness.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Xiao, Xi</author><author>Wang, Zhenlong</author><author>Li, Qing</author><author>Xia, Shutao</author><author>Jiang, Yong</author></authors></contributors><titles><title>Back-propagation neural network on Markov chains from system call sequences: a new approach for detecting Android malware with system call sequences</title><secondary-title>IET Information Security</secondary-title></titles><periodical><full-title>IET Information Security</full-title></periodical><pages>8-15</pages><volume>11</volume><issue>1</issue><keywords/><dates><year>2017</year></dates><electronic-resource-num>10.1049/iet-ifs.2015.0211</electronic-resource-num><urls><pdf-urls><url>internal-pdf://xiao2016.pdf</url></pdf-urls><web-urls><url>http://digital-library.theiet.org/content/journals/10.1049/iet-ifs.2015.0211</url></web-urls></urls></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Sharma, Sugam</author></authors></contributors><titles><title>Expanded cloud plumes hiding Big Data ecosystem</title><secondary-title>Future Generation Computer Systems</secondary-title></titles><periodical><full-title>Future Generation Computer Systems</full-title></periodical><pages>63-92</pages><volume>59</volume><keywords><keyword>Big Data</keyword><keyword>Cloud</keyword><keyword>IoT</keyword><keyword>Smart Data and Lakes</keyword><keyword>XCLOUDX</keyword><keyword>as-a-Service</keyword></keywords><dates><year>2016</year></dates><publisher>Elsevier B.V.</publisher><isbn>0167-739X</isbn><electronic-resource-num>10.1016/j.future.2016.01.003</electronic-resource-num><urls><pdf-urls><url>internal-pdf://video_15.pdf</url></pdf-urls></urls><abstract>Today, a paradigm shift is being observed in science, where the focus is gradually shifting away from operation to data, which is greatly influencing the decision making also. The data is being inundated proactively from several sources in various forms; especially social media and in modern data science vocabulary is being recognized as Big Data. Today, Big Data is permeating through the bigger aspect of human life for scientific and commercial dependencies, especially for massive scale data analytics of beyond the exabyte magnitude. As the footprint of Big Data applications is continuously expanding, the reliability on cloud environments is also increasing to obtain appropriate, robust and affordable services to deal with Big Data challenges. Cloud computing avoids any need to locally maintain the overly scaled computing infrastructure that include not only dedicated space, but the expensive hardware and software also. Several data models to process Big Data are already developed and a number of such models are still emerging, potentially relying on heterogeneous underlying storage technologies, including cloud computing. In this paper, we investigate the growing role of cloud computing in Big Data ecosystem. Also, we propose a novel XCLOUDX {XCloudX, X...X}classification to zoom in to gauge the intuitiveness of the scientific name of the cloud-assisted NoSQL Big Data models and analyze whether XCloudX always uses cloud computing underneath or vice versa. XCloudX symbolizes those NoSQL Big Data models that embody the term &quot;cloud&quot; in their name, where X is any alphanumeric variable. The discussion is strengthen by a set of important case studies. Furthermore, we study the emergence of as-a-Service era, motivated by cloud computing drive and explore the new members beyond traditional cloud computing stack, developed in the past couple of years.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Yerima, Suleiman Y</author><author>Sezer, Sakir</author><author>Muttik, Igor</author></authors></contributors><titles><title>High accuracy android malware detection using ensemble learning.</title><secondary-title>IET Information Security</secondary-title></titles><periodical><full-title>IET Information Security</full-title></periodical><pages>313-320</pages><volume>9</volume><issue>6</issue><keywords><keyword>GOOGLE Inc.</keyword><keyword>INFORMATION &amp; communication technologies</keyword><keyword>MACHINE learning</keyword><keyword>MALWARE (Computer software)</keyword><keyword>SMARTPHONES</keyword></keywords><dates><year>2015</year></dates><electronic-resource-num>10.1049/iet-ifs.2014.0099</electronic-resource-num><urls><pdf-urls><url>internal-pdf://yerima2015.pdf</url></pdf-urls><web-urls><url>http://10.0.4.25/iet-ifs.2014.0099%5Cnhttp://search.ebscohost.com/login.aspx?direct=true&amp;db=iih&amp;AN=110259059&amp;lang=es&amp;site=ehost-live</url></web-urls></urls><abstract>With over 50 billion downloads and more than 1.3 million apps in Google's official market, Android has continued to gain popularity among smartphone users worldwide. At the same time there has been a rise in malware targeting the platform, with more recent strains employing highly sophisticated detection avoidance techniques. As traditional signature-based methods become less potent in detecting unknown malware, alternatives are needed for timely zero-day discovery. Thus, this study proposes an approach that utilises ensemble learning for Android malware detection. It combines advantages of static analysis with the efficiency and performance of ensemble machine learning to improve Android malware detection accuracy. The machine learning models are built using a large repository of malware samples and benign apps from a leading antivirus vendor. Experimental results and analysis presented shows that the proposed method which uses a large feature space to leverage the power of ensemble learning is capable of 97.3-99% detection accuracy with very low false positive rates. [ABSTRACT FROM AUTHOR]</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Zein, Samer</author><author>Salleh, Norsaremah</author><author>Grundy, John</author></authors></contributors><titles><title>A systematic mapping study of mobile application testing techniques</title><secondary-title>Journal of Systems and Software</secondary-title></titles><periodical><full-title>Journal of Systems and Software</full-title></periodical><pages>334-356</pages><volume>117</volume><keywords><keyword>Mobile application testing</keyword><keyword>Software testing</keyword><keyword>Systematic mapping</keyword></keywords><dates><year>2016</year></dates><publisher>Elsevier Inc.</publisher><isbn>0164-1212</isbn><electronic-resource-num>10.1016/j.jss.2016.03.065</electronic-resource-num><urls><pdf-urls><url>internal-pdf://zein2016.pdf</url></pdf-urls><web-urls><url>http://dx.doi.org/10.1016/j.jss.2016.03.065</url></web-urls></urls><abstract>The importance of mobile application specific testing techniques and methods has been attracting much attention of software engineers over the past few years. This is due to the fact that mobile applications are different than traditional web and desktop applications, and more and more they are moving to being used in critical domains. Mobile applications require a different approach to application quality and dependability and require an effective testing approach to build high quality and more reliable software. We performed a systematic mapping study to categorize and to structure the research evidence that has been published in the area of mobile application testing techniques and challenges that they have reported. Seventy nine (79) empirical studies are mapped to a classification schema. Several research gaps are identified and specific key testing issues for practitioners are identified: there is a need for eliciting testing requirements early during development process; the need to conduct research in real-world development environments; specific testing techniques targeting application life-cycle conformance and mobile services testing; and comparative studies for security and usability testing.</abstract></record><record><database name="My Collection_801to 900.enl" path="My Collection_801to 900.enl">My Collection_801to 900.enl</database><ref-type name="Journal Article">0</ref-type><contributors><authors><author>Hua, Jingyu</author><author>Shen, Zhenyu</author><author>Zhong, Sheng</author></authors></contributors><titles><title>We Can Track You If You Take the Metro: Tracking Metro Riders Using Accelerometers on Smartphones</title></titles><periodical/><pages>286-297</pages><volume>12</volume><issue>2</issue><keywords/><dates><year>2015</year></dates><urls><pdf-urls><url>internal-pdf://We Can Track You if You Take the Metro Tracking Metro Riders Using Accelerometers on Smartphones.pdf</url></pdf-urls><web-urls><url>http://arxiv.org/abs/1505.05958</url></web-urls></urls><abstract>Motion sensors (e.g., accelerometers) on smartphones have been demonstrated to be a powerful side channel for attackers to spy on users' inputs on touchscreen. In this paper, we reveal another motion accelerometer-based attack which is particularly serious: when a person takes the metro, a malicious application on her smartphone can easily use accelerator readings to trace her. We first propose a basic attack that can automatically extract metro-related data from a large amount of mixed accelerator readings, and then use an ensemble interval classier built from supervised learning to infer the riding intervals of the user. While this attack is very effective, the supervised learning part requires the attacker to collect labeled training data for each station interval, which is a significant amount of effort. To improve the efficiency of our attack, we further propose a semi-supervised learning approach, which only requires the attacker to collect labeled data for a very small number of station intervals with obvious characteristics. We conduct real experiments on a metro line in a major city. The results show that the inferring accuracy could reach 89\% and 92\% if the user takes the metro for 4 and 6 stations, respectively.</abstract></record></records></xml>
